<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section data-type="chapter" epub:type="chapter" class="pagenumrestart" data-pdf-bookmark="Chapter 1. The Machine Learning Landscape"><div class="chapter" id="landscape_chapter">
<h1><span class="label">Chapter 1. </span>The Machine Learning Landscape</h1>

<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46324228401056">
<h5>A Note for Early Release Readers</h5>
<p>With Early Release ebooks, you get books in their earliest form—the author’s raw and unedited content as they write—so you can take advantage of these technologies long before the official release of these titles.</p>

<p>This will be the 1st chapter of the final book. Notebooks are available on GitHub at <a href="https://github.com/ageron/handson-ml3"><em class="hyperlink">https://github.com/ageron/handson-ml3</em></a>. Datasets are available at <a href="https://github.com/ageron/data"><em class="hyperlink">https://github.com/ageron/data</em></a>.</p>

<p>If you have comments about how we might improve the content and/or examples in this book, or if you notice missing material within this chapter, please reach out to the editor at <a href="mailto:mcronin@oreilly.com">mcronin@oreilly.com</a>.</p>
</div></aside>

<p>Not so long ago, if you had picked up your phone and asked it the way home, it would have ignored you—and people would have questionned your sanity. But Machine Learning is no longer Science Fiction: billions of people use it every day. And the truth is it has actually been around for decades in some specialized applications, <a data-type="indexterm" data-primary="Optical Character Recognition (OCR)" id="idm46324228395008"/>such as Optical Character Recognition (OCR). The first ML application that really became mainstream, improving the lives of hundreds of millions of people, took over the world back in the 1990s: <a data-type="indexterm" data-primary="spam filters" id="idm46324228393952"/>the <em>spam filter</em>. It’s not exactly a self-aware robot, but it does technically qualify as Machine Learning: it has actually learned so well that you seldom need to flag an email as spam anymore. It was followed by hundreds of ML applications that now quietly power hundreds of products and features that you use regularly: voice prompts, automatic translation, image search, product recommendations, and many more.</p>

<p>Where does Machine Learning start and where does it end? What exactly does it mean for a machine to <em>learn</em> something? If I download a copy of all Wikipedia articles, has my computer really learned something? Is it suddenly smarter? In this chapter I will start by clarifying what Machine Learning is and why you may want to use it.</p>

<p>Then, before we set out to explore the Machine Learning continent, we will take a look at the map and learn about the main regions and the most notable landmarks: supervised versus unsupervised learning and their variants, online versus batch learning, instance-based versus model-based learning. Then we will look at the workflow of a typical ML project, discuss the main challenges you may face, and cover how to evaluate and fine-tune a Machine Learning system.</p>

<p>This chapter introduces a lot of fundamental concepts (and jargon) that every data scientist should know by heart. It will be a high-level overview (it’s the only chapter without much code), all rather simple, but my goal is to ensure everything is crystal clear to you before we continue on to the rest of the book. So grab a coffee and let’s get started!</p>
<div data-type="tip"><h6>Tip</h6>
<p>If you are already familiar with Machine Learning basics, you may want to skip directly to <a data-type="xref" href="ch02.xhtml#project_chapter">Chapter 2</a>. If you are not sure, try to answer all the questions listed at the end of the chapter before moving on.</p>
</div>






<section data-type="sect1" data-pdf-bookmark="What Is Machine Learning?"><div class="sect1" id="what_is_machine_learning">
<h1>What Is Machine Learning?</h1>

<p>Machine Learning is the science (and art) of programming computers so they can <em>learn from data</em>.</p>

<p>Here is a slightly more general definition:</p>
<blockquote>
<p>[Machine Learning is the] field of study that gives computers the ability to learn without being explicitly programmed.</p>
<p data-type="attribution">Arthur Samuel，1959</p>
</blockquote>

<p>And a more engineering-oriented one:</p>
<blockquote>
<p>A computer program is said to learn from experience <em>E</em> with respect to some task <em>T</em> and some performance measure <em>P</em>, if its performance on <em>T</em>, as measured by <em>P</em>, improves with experience <em>E</em>.</p>
<p data-type="attribution">Tom Mitchell，1997</p>
</blockquote>

<p>Your spam filter is a Machine Learning program that, given examples of spam emails (flagged by users) and examples of regular emails (nonspam, also called “ham”), can learn to flag spam. The examples that the system uses to learn are<a data-type="indexterm" data-primary="training sets" id="idm46324234865888"/> called the <em>training set</em>. Each training example is<a data-type="indexterm" data-primary="training instances" id="idm46324234864608"/><a data-type="indexterm" data-primary="training samples" id="idm46324234863904"/> called a <em>training instance</em> (or <em>sample</em>). The part of a Machine Learning system that learns and makes predictions is called a <em>model</em>. Neural networks and random forests are examples of models.</p>

<p>In this case, the task <em>T</em> is to flag spam for new emails, the experience <em>E</em> is<a data-type="indexterm" data-primary="training data" data-secondary="defined" id="idm46324234860352"/> the <em>training data</em>, and the performance measure <em>P</em> needs to be defined; for example, you can use the ratio of correctly classified emails. This<a data-type="indexterm" data-primary="accuracy" data-secondary="example of" id="idm46324234858272"/> particular performance measure is called <em>accuracy</em>, and it is often used in classification tasks.</p>

<p>If you just download a copy of all Wikipedia articles, your computer has a lot more data, but it is not suddenly better at any task. It is not Machine Learning.</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="Why Use Machine Learning?"><div class="sect1" id="idm46324234856112">
<h1>Why Use Machine Learning?</h1>

<p>Consider<a data-type="indexterm" data-primary="Machine Learning (ML)" data-secondary="benefits of" id="idm46324234854096"/><a data-type="indexterm" data-primary="spam filters" id="idm46324234853088"/> how you would write a spam filter using traditional programming techniques (<a data-type="xref" href="#traditional_approach_diagram">Figure 1-1</a>):</p>
<ol>
<li>
<p>First you would examine what spam typically looks like. You might notice that some words or phrases (such as “4U,” “credit card,” “free,” and “amazing”) tend to come up a lot in the subject line. Perhaps you would also notice a few other patterns in the sender’s name, the email’s body, and other parts of the email.</p>
</li>
<li>
<p>You would write a detection algorithm for each of the patterns that you noticed, and your program would flag emails as spam if a number of these patterns were detected.</p>
</li>
<li>
<p>You would test your program and repeat steps 1 and 2 until it was good enough to launch.</p>
</li>

</ol>

<figure class="smallerseventy"><div id="traditional_approach_diagram" class="figure">
<img src="Images/mls3_0101.png" alt="mls3 0101" width="1885" height="935"/>
<h6><span class="label">Figure 1-1. </span>The traditional approach</h6>
</div></figure>

<p>Since the problem is difficult, your program will likely become a long list of complex rules—pretty hard to maintain.</p>

<p>In contrast, a spam filter based on Machine Learning techniques automatically learns which words and phrases are good predictors of spam by detecting unusually frequent patterns of words in the spam examples compared to the ham examples (<a data-type="xref" href="#ml_approach_diagram">Figure 1-2</a>). The program is much shorter, easier to maintain, and most likely more accurate.</p>

<p>What if spammers notice that all their emails containing “4U” are blocked? They might start writing “For U” instead. A spam filter using traditional programming techniques would need to be updated to flag “For U” emails. If spammers keep working around your spam filter, you will need to keep writing new rules forever.</p>

<p>In contrast, a spam filter based on Machine Learning techniques automatically notices that “For U” has become unusually frequent in spam flagged by users, and it starts flagging them without your intervention (<a data-type="xref" href="#adapting_to_change_diagram">Figure 1-3</a>).</p>

<figure class="smallerseventy"><div id="ml_approach_diagram" class="figure">
<img src="Images/mls3_0102.png" alt="mls3 0102" width="1885" height="976"/>
<h6><span class="label">Figure 1-2. </span>The Machine Learning approach</h6>
</div></figure>

<figure class="smallerseventy"><div id="adapting_to_change_diagram" class="figure">
<img src="Images/mls3_0103.png" alt="mls3 0103" width="1778" height="744"/>
<h6><span class="label">Figure 1-3. </span>Automatically adapting to change</h6>
</div></figure>

<p>Another area where Machine Learning shines is for problems that either are too complex for traditional approaches or have no known algorithm. For example, consider speech recognition. Say you want to start simple and write a program capable of distinguishing the words “one” and “two.” You might notice that the word “two” starts with a high-pitch sound (“T”), so you could hardcode an algorithm that measures high-pitch sound intensity and use that to distinguish ones and twos⁠—but obviously this technique will not scale to thousands of words spoken by millions of very different people in noisy environments and in dozens of languages. The best solution (at least today) is to write an algorithm that learns by itself, given many example recordings for each word.</p>

<p>Finally, Machine Learning can help humans learn (<a data-type="xref" href="#data_mining_diagram">Figure 1-4</a>). ML models can be inspected to see what they have learned (although for some models this can be tricky). For instance, once a spam filter has been trained on enough spam, it can easily be inspected to reveal the list of words and combinations of words that it believes are the best predictors of spam. Sometimes this will reveal unsuspected <span class="keep-together">correlations</span> or new trends, and thereby lead to a better understanding of the problem. Digging into large amounts of data to discover hidden patterns is called <em>data mining</em>, and Machine Learning excels at it.</p>

<figure class="smallerseventyfive"><div id="data_mining_diagram" class="figure">
<img src="Images/mls3_0104.png" alt="mls3 0104" width="2056" height="1201"/>
<h6><span class="label">Figure 1-4. </span>Machine Learning can help humans learn</h6>
</div></figure>

<p>To summarize, Machine Learning is great for:</p>

<ul>
<li>
<p>Problems for which existing solutions require a lot of fine-tuning or long
lists of rules: one Machine Learning model can often simplify code and perform better than the traditional approach.</p>
</li>
<li>
<p>Complex problems for which using a traditional approach yields no good solution: the best
Machine Learning techniques can perhaps find a solution.</p>
</li>
<li>
<p>Fluctuating environments: a Machine Learning system can easily be retrained on new data, always keeping it up to date.</p>
</li>
<li>
<p>Getting insights about complex problems and large amounts of data.</p>
</li>
</ul>
</div></section>













<section data-type="sect1" data-pdf-bookmark="Examples of Applications"><div class="sect1" id="idm46324234855488">
<h1>Examples of Applications</h1>

<p>Let’s look<a data-type="indexterm" data-primary="Machine Learning (ML)" data-secondary="applications for" id="idm46324234215440"/> at some concrete examples of Machine Learning tasks, along with the techniques that can tackle them:</p>
<dl>
<dt>Analyzing images of products on a production line to automatically classify them</dt>
<dd>
<p>This is image classification, typically performed using convolutional neural networks (CNNs; see Chapter 14) or sometimes Transformers (see Chapter 16).</p>
</dd>
<dt>Detecting tumors in brain scans</dt>
<dd>
<p>This is semantic image segmentation, where each pixel in the image is classified (as we want to determine the exact location and shape of tumors), typically using CNNs or Transformers.</p>
</dd>
<dt>Automatically classifying news articles</dt>
<dd>
<p>This is natural language processing (NLP), and more specifically text classification, which can be tackled using recurrent neural networks (RNNs) and CNNs, but Transformers work even better (see Chapter 16).</p>
</dd>
<dt>Automatically flagging offensive comments on discussion forums</dt>
<dd>
<p>This is also text classification, using the same NLP tools.</p>
</dd>
<dt>Summarizing long documents automatically</dt>
<dd>
<p>This is a branch of NLP called text summarization, again using the same tools.</p>
</dd>
<dt>Creating a chatbot or a personal assistant</dt>
<dd>
<p>This involves many NLP components, including natural language understanding (NLU) and question-answering modules.</p>
</dd>
<dt>Forecasting your company’s revenue next year, based on many performance metrics</dt>
<dd>
<p>This is a regression task (i.e., predicting values) that may be tackled using any regression model, such as a Linear Regression or Polynomial Regression model (see <a data-type="xref" href="ch04.xhtml#linear_models_chapter">Chapter 4</a>), a regression SVM (see <a data-type="xref" href="ch05.xhtml#svm_chapter">Chapter 5</a>), a regression Random Forest (see <a data-type="xref" href="ch07.xhtml#ensembles_chapter">Chapter 7</a>), or an artificial neural network (see <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a>). If you want to take into account sequences of past performance metrics, you may want to use RNNs, CNNs, or Transformers (see Chapters 15 and 16).</p>
</dd>
<dt>Making your app react to voice commands</dt>
<dd>
<p>This is speech recognition, which requires processing audio samples: since they are long and complex sequences, they are typically processed using RNNs, CNNs, or Transformers (see Chapters 15 and 16).</p>
</dd>
<dt>Detecting credit card fraud</dt>
<dd>
<p>This is anomaly detection, which can be tackled using isolation forests, Gaussian mixture models (see <a data-type="xref" href="ch09.xhtml#unsupervised_learning_chapter">Chapter 9</a>) or autoencoders (see Chapter 17).</p>
</dd>
<dt>Segmenting clients based on their purchases so that you can design a different marketing strategy for each segment</dt>
<dd>
<p>This is clustering, which can be achieved using K-Means, DBSCAN and more (see <a data-type="xref" href="ch09.xhtml#unsupervised_learning_chapter">Chapter 9</a>).</p>
</dd>
<dt>Representing a complex, high-dimensional dataset in a clear and insightful diagram</dt>
<dd>
<p>This is data visualization, often involving dimensionality reduction techniques (see <a data-type="xref" href="ch08.xhtml#dimensionality_chapter">Chapter 8</a>).</p>
</dd>
<dt>Recommending a product that a client may be interested in, based on past purchases</dt>
<dd>
<p>This is a recommender system. One approach is to feed past purchases (and other information about the client) to an artificial neural network (see <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a>), and get it to output the most likely next purchase. This neural net would typically be trained on past sequences of purchases across all clients.</p>
</dd>
<dt>Building an intelligent bot for a game</dt>
<dd>
<p>This is often tackled using Reinforcement Learning (RL; see Chapter 18), which is a branch of Machine Learning that trains agents (such as bots) to pick the actions that will maximize their rewards over time (e.g., a bot may get a reward every time the player loses some life points), within a given environment (such as the game). The famous AlphaGo program that beat the world champion at the game of Go was built using RL.</p>
</dd>
</dl>

<p>This list could go on and on, but hopefully it gives you a sense of the incredible breadth and complexity of the tasks that Machine Learning can tackle, and the types of techniques that you would use for each task.</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="Types of Machine Learning Systems"><div class="sect1" id="idm46324234541696">
<h1>Types of Machine Learning Systems</h1>

<p>There<a data-type="indexterm" data-primary="Machine Learning (ML)" data-secondary="types of" id="MLtype01"/> are so many different types of Machine Learning systems that it is useful to classify them in broad categories, based on the following criteria:</p>

<ul>
<li>
<p>How they are supervised during training (supervised, unsupervised, semi-supervised, self-supervised, and others)</p>
</li>
<li>
<p>Whether or not they can learn incrementally on the fly (online versus batch learning)</p>
</li>
<li>
<p>Whether they work by simply comparing new data points to known data points, or instead by detecting patterns in the training data and building a predictive model, much like scientists do (instance-based versus model-based learning)</p>
</li>
</ul>

<p>These criteria are not exclusive; you can combine them in any way you like. For example, a state-of-the-art spam filter may learn on the fly using a deep neural network model trained using human-provided examples of spam and ham; this makes it an online, model-based, supervised learning system.</p>

<p>Let’s look at each of these criteria a bit more closely.</p>








<section data-type="sect2" data-pdf-bookmark="Training Supervision"><div class="sect2" id="idm46324232557056">
<h2>Training Supervision</h2>

<p>ML systems can be classified according to the amount and type of supervision they get during training. There are many categories, but we’ll discuss the main ones: supervised learning, unsupervised learning, self-supervised learning, semi-supervised learning, and Reinforcement Learning.</p>










<section data-type="sect3" data-pdf-bookmark="Supervised learning"><div class="sect3" id="idm46324232555248">
<h3>Supervised learning</h3>

<p>In <em>supervised learning</em>, the<a data-type="indexterm" data-primary="algorithms" data-secondary="supervised learning" id="idm46324232552896"/><a data-type="indexterm" data-primary="supervised learning" data-secondary="defined" id="idm46324232551888"/><a data-type="indexterm" data-primary="labels" id="idm46324232550944"/> training set you feed to the algorithm includes the desired solutions, called <em>labels</em> (<a data-type="xref" href="#supervised_learning_diagram">Figure 1-5</a>).</p>

<figure><div id="supervised_learning_diagram" class="figure">
<img src="Images/mls3_0105.png" alt="mls3 0105" width="2693" height="863"/>
<h6><span class="label">Figure 1-5. </span>A labeled training set for spam classification (an example of supervised learning)</h6>
</div></figure>

<p>A<a data-type="indexterm" data-primary="classification problems" data-secondary="example of" id="idm46324233307328"/><a data-type="indexterm" data-primary="supervised learning" data-secondary="common tasks" id="idm46324233306320"/> typical supervised learning task is <em>classification</em>. The spam filter is a good example of this: it is trained with many example emails along with their <em>class</em> (spam or ham), and it must learn how to classify new emails.</p>

<p>Another<a data-type="indexterm" data-primary="prediction problems" id="idm46324233303600"/> typical task is to predict a <em>target</em> numeric value, such as the price of a car, given a set of <em>features</em> (mileage, age, brand, etc.). This<a data-type="indexterm" data-primary="regression problems" data-secondary="defined" id="idm46324233301888"/> sort of task is called <em>regression</em> (<a data-type="xref" href="#regression_diagram">Figure 1-6</a>).⁠<sup><a data-type="noteref" id="idm46324233299488-marker" href="ch01.xhtml#idm46324233299488">1</a></sup> To train the system, you need to give it many examples of cars, including both their features and their targets (i.e., their prices).</p>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>The words <em>target</em> and <em>label</em> are generally treated as synonyms in supervised learning, but <em>target</em> is more common in regression tasks, and <em>label</em> is more common in classification tasks. Moreover, <em>features</em> are sometimes called <em>predictors</em> or <em>attributes</em>. These terms may refer to individual samples (e.g., “this car’s mileage feature is equal to 15,000”) or to all samples (e.g., “the mileage feature is strongly correlated with price”).</p>
</div>

<p>Note<a data-type="indexterm" data-primary="Logistic Regression" data-secondary="classification with" id="idm46324233293408"/> that some regression models can be used for classification as well, and vice versa. For example, <em>Logistic Regression</em> is commonly used for classification, as it can output a value that corresponds to the probability of belonging to a given class (e.g., 20% chance of being spam).</p>

<figure class="smallerninety"><div id="regression_diagram" class="figure">
<img src="Images/mls3_0106.png" alt="mls3 0106" width="1889" height="961"/>
<h6><span class="label">Figure 1-6. </span>A regression problem: predict a value, given an input feature (there are usually multiple input features, and sometimes multiple output values)</h6>
</div></figure>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Unsupervised learning"><div class="sect3" id="idm46324233343872">
<h3>Unsupervised learning</h3>

<p>In <em>unsupervised learning</em>, as you<a data-type="indexterm" data-primary="algorithms" data-secondary="unsupervised learning" id="idm46324233341696"/><a data-type="indexterm" data-primary="unsupervised learning" data-secondary="defined" id="idm46324233340688"/> might guess, the training data is unlabeled (<a data-type="xref" href="#unsupervised_learning_diagram">Figure 1-7</a>). The system tries to learn without a teacher.</p>

<figure class="smallersixty"><div id="unsupervised_learning_diagram" class="figure">
<img src="Images/mls3_0107.png" alt="mls3 0107" width="1954" height="929"/>
<h6><span class="label">Figure 1-7. </span>An unlabeled training set for unsupervised learning</h6>
</div></figure>

<p>For<a data-type="indexterm" data-primary="algorithms" data-secondary="clustering algorithms" id="idm46324233335856"/><a data-type="indexterm" data-primary="clustering algorithms" data-secondary="applications for" id="idm46324233334848"/><a data-type="indexterm" data-primary="unsupervised learning" data-secondary="common tasks" id="idm46324233333904"/> example, say you have a lot of data about your blog’s visitors. You may want to run a <em>clustering</em> algorithm to try to detect groups of similar visitors (<a data-type="xref" href="#clustering_diagram">Figure 1-8</a>). At no point do you tell the algorithm which group a visitor belongs to: it finds those connections without your help. For example, it might notice that 40% of your visitors are teenagers who love comic books and generally read your blog after school, while 20% are adults who enjoy sci-fi and who visit during the weekends. If you<a data-type="indexterm" data-primary="algorithms" data-secondary="hierarchical clustering algorithms" id="idm46324233331504"/><a data-type="indexterm" data-primary="hierarchical clustering algorithms" id="idm46324233330592"/> use a <em>hierarchical clustering</em> algorithm, it may also subdivide each group into smaller groups. This may help you target your posts for each group.</p>

<figure class="smallersixty"><div id="clustering_diagram" class="figure">
<img src="Images/mls3_0108.png" alt="mls3 0108" width="1938" height="937"/>
<h6><span class="label">Figure 1-8. </span>Clustering</h6>
</div></figure>

<p><em>Visualization</em> algorithms<a data-type="indexterm" data-primary="algorithms" data-secondary="visualization algorithms" id="idm46324228906704"/><a data-type="indexterm" data-primary="visualization algorithms" id="idm46324228905728"/> are also good examples of unsupervised learning: you feed them a lot of complex and unlabeled data, and they output a 2D or 3D representation of your data that can easily be plotted (<a data-type="xref" href="#socher_ganjoo_manning_ng_2013_paper">Figure 1-9</a>). These algorithms try to preserve as much structure as they can (e.g., trying to keep separate clusters in the input space from overlapping in the visualization) so that you can understand how the data is organized and perhaps identify unsuspected patterns.</p>

<figure class="smallerninety"><div id="socher_ganjoo_manning_ng_2013_paper" class="figure">
<img src="Images/mls3_0109.png" alt="mls3 0109" width="1149" height="757"/>
<h6><span class="label">Figure 1-9. </span>Example of a t-SNE visualization highlighting semantic clusters⁠<sup><a data-type="noteref" id="idm46324228901792-marker" href="ch01.xhtml#idm46324228901792">2</a></sup></h6>
</div></figure>

<p>A<a data-type="indexterm" data-primary="dimensionality reduction" data-secondary="goal of" id="idm46324228900096"/> related task is <em>dimensionality reduction</em>, in which the goal is to simplify the data without losing too much information. One way to do this is to merge several correlated features into one. For example, a car’s mileage may be strongly correlated with its age, so the dimensionality reduction algorithm will merge them into one feature that represents the car’s wear and tear. This<a data-type="indexterm" data-primary="feature extraction" id="idm46324228898528"/> is called <em>feature extraction</em>.</p>
<div data-type="tip"><h6>Tip</h6>
<p>It is often a good idea to try to reduce the dimension of your training data using a dimensionality reduction algorithm before you feed it to another Machine Learning algorithm (such as a supervised learning algorithm). It will run much faster, the data will take up less disk and memory space, and in some cases it may also perform better.</p>
</div>

<p>Yet<a data-type="indexterm" data-primary="anomaly detection" data-secondary="examples of" id="idm46324228895504"/> another important unsupervised task is <em>anomaly detection</em>—for example, detecting unusual credit card transactions to prevent fraud, catching manufacturing defects, or automatically removing outliers from a dataset before feeding it to another learning algorithm. The system is shown mostly normal instances during training, so it learns to recognize them; then, when it sees a new instance, it can tell whether it looks like a normal one or whether it is likely an anomaly (see <a data-type="xref" href="#anomaly_detection_diagram">Figure 1-10</a>). A very similar task<a data-type="indexterm" data-primary="novelty detection" id="idm46324228893072"/> is <em>novelty detection</em>: it aims to detect new instances that look different from all instances in the training set. This requires having a very “clean” training set, devoid of any instance that you would like the algorithm to detect. For example, if you have thousands of pictures of dogs, and 1% of these pictures represent Chihuahuas, then a novelty detection algorithm should not treat new pictures of Chihuahuas as novelties. On the other hand, anomaly detection algorithms may consider these dogs as so rare and so different from other dogs that they would likely classify them as anomalies (no offense to Chihuahuas).</p>

<figure class="smallerseventy"><div id="anomaly_detection_diagram" class="figure">
<img src="Images/mls3_0110.png" alt="mls3 0110" width="1938" height="937"/>
<h6><span class="label">Figure 1-10. </span>Anomaly detection</h6>
</div></figure>

<p>Finally, another<a data-type="indexterm" data-primary="association rule learning" id="idm46324233326192"/> common unsupervised task is <em>association rule learning</em>, in which the goal is to dig into large amounts of data and discover interesting relations between attributes. For example, suppose you own a supermarket. Running an association rule on your sales logs may reveal that people who purchase barbecue sauce and potato chips also tend to buy steak. Thus, you may want to place these items close to one another.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Semi-supervised learning"><div class="sect3" id="idm46324233343248">
<h3>Semi-supervised learning</h3>

<p>Since labeling<a data-type="indexterm" data-primary="semi-supervised learning" data-secondary="defined" id="idm46324233323328"/> data is usually time-consuming and costly, you will often have plenty of unlabeled instances, and few labeled instances. Some algorithms can deal with data that’s partially labeled. This is called <em>semi-supervised learning</em> (<a data-type="xref" href="#semi_supervised_learning_diagram">Figure 1-11</a>).</p>

<figure class="smallerseventy"><div id="semi_supervised_learning_diagram" class="figure">
<img src="Images/mls3_0111.png" alt="mls3 0111" width="1938" height="937"/>
<h6><span class="label">Figure 1-11. </span>Semi-supervised learning with two classes (triangles and squares): the unlabeled examples (circles) help classify a new instance (the cross) into the triangle class rather than the square class, even though it is closer to the labeled squares</h6>
</div></figure>

<p>Some<a data-type="indexterm" data-primary="semi-supervised learning" data-secondary="examples of" id="idm46324233318176"/> photo-hosting services, such as Google Photos, are good examples of this. Once you upload all your family photos to the service, it automatically recognizes that the same person A shows up in photos 1, 5, and 11, while another person B shows up in photos 2, 5, and 7. This is the unsupervised part of the algorithm (clustering). Now all the system needs is for you to tell it who these people are. Just add one label per person⁠<sup><a data-type="noteref" id="idm46324233317024-marker" href="ch01.xhtml#idm46324233317024">3</a></sup> and it is able to name everyone in every photo, which is useful for searching photos.</p>

<p>Most semi-supervised learning algorithms are combinations of unsupervised and supervised algorithms. For example a clustering algorithm may be used to group similar instances together, and then every unlabeled instance can be labeled with the most common label in their cluster. Once the whole dataset is labeled, it is possible to use any supervised learning algorithm.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Self-supervised learning"><div class="sect3" id="idm46324233315856">
<h3>Self-supervised learning</h3>

<p>Another approach to Machine Learning involves actually generating a fully labeled dataset from a fully unlabeled one. Again, once the whole dataset it labeled, any supervised learning algorithm can be used. This approach is called <em>self-supervised learning</em>.</p>

<p>For example, if you have a large dataset of unlabeled images, you can randomly mask a small part of each image and then train a model to recover the original image (<a data-type="xref" href="#self_supervised_learning_diagram">Figure 1-12</a>). During training, the masked images are used as the inputs to the model, and the original images are used as the labels.</p>

<figure class="smallerseventy"><div id="self_supervised_learning_diagram" class="figure">
<img src="Images/mls3_0112.png" alt="mls3 0112" width="1902" height="957"/>
<h6><span class="label">Figure 1-12. </span>Self-supervised learning example: input (left) and target (right)</h6>
</div></figure>

<p>The resulting model may be quite useful in itself, for example to repair damaged images or to erase unwanted objects from pictures. But more often than not, a model trained using self-supervised learning is not the final goal. You usually want to tweak and fine-tune the model for a slightly different task. One that you actually care about.</p>

<p>For example, suppose that what you really want is to have a pet classification model: given a picture of any pet, it will tell you what species it belongs to. If you have a large dataset of unlabeled photos of pets, you can start by training an image-repairing model using self-supervised learning. Once it performs well, it must be able to distinguish different pet species: indeed, when it repairs an image of a cat whose face is masked, it knows it must not add a dog’s face. Assuming your model’s architecture allows it (and most neural network architectures do), it is then possible to tweak the model so that it predicts pet species instead of repairing images. The final step consists of fine-tuning the model on a labeled dataset: the model already knows what cats, dogs and other pet species look like, so this step is only needed so the model can learn the mapping between the species it already knows and the labels we expect from it.</p>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>Transferring knowledge from one task to another is called <em>transfer learning</em>, and it’s one of the most important techniques in Machine Learning today, especially when using <em>deep neural networks</em> (i.e., neural networks composed of many layers of neurons). We will discuss this in detail in <a data-type="xref" href="part02.xhtml#neural_nets_part">Part II</a>.</p>
</div>

<p>Some people consider self-supervised learning to be a part of unsupervised learning, since it deals with fully unlabeled datasets. But self-supervised learning uses (generated) labels during training, so in that regard it’s closer to supervised learning. And the term “unsupervised learning” is generally used when dealing with tasks like clustering, dimensionality reduction or anomaly detection, whereas self-supervised learning focuses on the same tasks as supervised learning: mainly classification and regression. In short, it’s best to treat self-supervised learning as its own category.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Reinforcement Learning"><div class="sect3" id="idm46324226927456">
<h3>Reinforcement Learning</h3>

<p><em>Reinforcement Learning</em> is<a data-type="indexterm" data-primary="Reinforcement Learning (RL)" data-secondary="overview of" id="idm46324226925616"/><a data-type="indexterm" data-primary="agents" id="idm46324226924640"/><a data-type="indexterm" data-primary="rewards" id="idm46324226923968"/><a data-type="indexterm" data-primary="penalties" id="idm46324226923296"/><a data-type="indexterm" data-primary="policies" id="idm46324226922624"/> a very different beast. The learning system, called an <em>agent</em> in this context, can observe the environment, select and perform actions, and get <em>rewards</em> in return (or <em>penalties</em> in the form of negative rewards, as shown in <a data-type="xref" href="#reinforcement_learning_diagram">Figure 1-13</a>). It must then learn by itself what is the best strategy, called a <em>policy</em>, to get the most reward over time. A policy defines what action the agent should choose when it is in a given situation.</p>

<figure class="smallerseventy"><div id="reinforcement_learning_diagram" class="figure">
<img src="Images/mls3_0113.png" alt="mls3 0113" width="2156" height="1542"/>
<h6><span class="label">Figure 1-13. </span>Reinforcement Learning</h6>
</div></figure>

<p>For example, many robots implement Reinforcement Learning algorithms to learn how to walk. DeepMind’s AlphaGo program is also a good example of Reinforcement Learning: it made the headlines in May 2017 when it beat Ke Jie, the number one ranked player in the world at the time, at the game of Go. It learned its winning policy by analyzing millions of games, and then playing many games against itself. Note that learning was turned off during the games against the champion; AlphaGo was just applying the policy it had learned. As we will see in the next section, this is called <em>offline learning</em>.</p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="Batch versus Online Learning"><div class="sect2" id="idm46324226915888">
<h2>Batch versus Online Learning</h2>

<p>Another criterion used to classify Machine Learning systems is whether or not the system can learn incrementally from a stream of incoming data.</p>










<section data-type="sect3" data-pdf-bookmark="Batch learning"><div class="sect3" id="idm46324226914272">
<h3>Batch learning</h3>

<p>In <em>batch learning</em>, the<a data-type="indexterm" data-primary="batch learning" id="idm46324234315584"/> system is incapable of learning incrementally: it must be trained using all the available data. This will generally take a lot of time and computing resources, so it is typically done offline. First the system is trained, and then it is launched into production and runs without learning anymore; it just applies what it has learned. This is<a data-type="indexterm" data-primary="offline learning" id="idm46324234314368"/> called <em>offline learning</em>.</p>

<p>Unfortunately, a model’s performance tends to decay slowly over time, simply because the world continues to evolve while the model remains unchanged. This phenomenon is often called <em>model rot</em> or <em>data drift</em>. The solution is to regularly retrain the model on up-to-date data. How often you need to do that depends on the use case: if the model classifies pictures of cats and dogs, its performance will decay very slowly, but if the model deals with fast-evolving systems, for example making predictions on the financial market, then it is likely to decay quite fast.</p>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>Even a model trained to classify pictures of cats and dogs may need to be retrained regularly, not because cats and dogs will mutate overnight, but because cameras keep changing, along with image formats, sharpness, brightness, and size ratios. Moreover, people may love different breeds next year, or they may decide to dress their pets with tiny hats—who knows?</p>
</div>

<p>If you want a batch learning system to know about new data (such as a new type of spam), you need to train a new version of the system from scratch on the full dataset (not just the new data, but also the old data), then replace the old model with the new one. Fortunately, the whole process of training, evaluating, and launching a Machine Learning system can be automated fairly easily (as we saw in <a data-type="xref" href="#adapting_to_change_diagram">Figure 1-3</a>), so even a batch learning system can adapt to change. Simply update the data and train a new version of the system from scratch as often as needed.</p>

<p>This solution is simple and often works fine, but training using the full set of data can take many hours, so you would typically train a new system only every 24 hours or even just weekly. If your system needs to adapt to rapidly changing data (e.g., to predict stock prices), then you need a more reactive solution.</p>

<p>Also, training on the full set of data requires a lot of computing resources (CPU, memory space, disk space, disk I/O, network I/O, etc.). If you have a lot of data and you automate your system to train from scratch every day, it will end up costing you a lot of money. If the amount of data is huge, it may even be impossible to use a batch learning algorithm.</p>

<p>Finally, if your system needs to be able to learn autonomously and it has limited resources (e.g., a smartphone application or a rover on Mars), then carrying around large amounts of training data and taking up a lot of resources to train for hours every day is a showstopper.</p>

<p>Fortunately, a better option in all these cases is to use algorithms that are capable of learning incrementally.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Online learning"><div class="sect3" id="idm46324226913872">
<h3>Online learning</h3>

<p>In <em>online learning</em>, you<a data-type="indexterm" data-primary="online learning" id="idm46324234304752"/> train the system incrementally by feeding it data instances sequentially, either individually or in small groups<a data-type="indexterm" data-primary="mini-batches" id="idm46324234303760"/> called <em>mini-batches</em>. Each learning step is fast and cheap, so the system can learn about new data on the fly, as it arrives (see <a data-type="xref" href="#online_learning_diagram">Figure 1-14</a>).</p>

<figure class="smallereighty"><div id="online_learning_diagram" class="figure">
<img src="Images/mls3_0114.png" alt="mls3 0114" width="2108" height="849"/>
<h6><span class="label">Figure 1-14. </span>In online learning, a model is trained and launched into production, and then it keeps learning as new data comes in</h6>
</div></figure>

<p>Online learning is useful for systems that need to adapt to change extremely rapidly (e.g., to detect new patterns in the stock market). It is also a good option if you have limited computing resources, for example if the model is trained on a mobile device.</p>

<p>Online<a data-type="indexterm" data-primary="out-of-core learning" id="idm46324234298544"/> learning algorithms can also be used to train models on huge datasets that cannot fit in one machine’s main memory (this is called <em>out-of-core</em> learning). The algorithm loads part of the data, runs a training step on that data, and repeats the process until it has run on all of the data (see <a data-type="xref" href="#ol_for_huge_datasets_diagram">Figure 1-15</a>).</p>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>Out-of-core<a data-type="indexterm" data-primary="incremental learning" id="idm46324234982896"/> learning is usually done offline (i.e., not on the live system), so <em>online learning</em> can be a confusing name. Think of it as <em>incremental learning</em>.</p>
</div>

<figure class="smallereighty"><div id="ol_for_huge_datasets_diagram" class="figure">
<img src="Images/mls3_0115.png" alt="mls3 0115" width="2309" height="1137"/>
<h6><span class="label">Figure 1-15. </span>Using online learning to handle huge datasets</h6>
</div></figure>

<p>One important parameter of online learning systems is how fast they should adapt to changing data: this<a data-type="indexterm" data-primary="learning rate" id="idm46324234978128"/> is called the <em>learning rate</em>. If you set a high learning rate, then your system will rapidly adapt to new data, but it will also tend to quickly forget the old data (you don’t want a spam filter to flag only the latest kinds of spam it was shown). Conversely, if you set a low learning rate, the system will have more inertia; that is, it will learn more slowly, but it will also be less sensitive to noise in the new data or to sequences of nonrepresentative data points (outliers).</p>

<p>A big challenge with online learning is that if bad data is fed to the system, the system’s performance will decline, possibly quickly (depending on the data quality and learning rate). If it’s a live system, your clients will notice. For example, bad data could come from a bug (e.g., a malfunctioning sensor on a robot), or it could come from someone trying to game the system (e.g., spamming a search engine to try to rank high in search results). To reduce this risk, you need to monitor your system closely and promptly switch learning off (and possibly revert to a previously working state) if you detect a drop in performance. You may also want to monitor the input data and react to abnormal data, for example using an anomaly detection algorithm (see <a data-type="xref" href="ch09.xhtml#unsupervised_learning_chapter">Chapter 9</a>).</p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="Instance-Based Versus Model-Based Learning"><div class="sect2" id="idm46324234975360">
<h2>Instance-Based Versus Model-Based Learning</h2>

<p>One more way to categorize Machine Learning systems is by how they <em>generalize</em>. Most Machine Learning tasks are about making<a data-type="indexterm" data-primary="prediction problems" id="idm46324234973344"/> predictions. This means that given a number of training examples, the system needs to be able to make good predictions for (generalize to) examples it has never seen before. Having a good performance measure on the training data is good, but insufficient; the true goal is to perform well on new instances.</p>

<p>There are two main approaches to generalization: instance-based learning and model-based learning.</p>










<section data-type="sect3" data-pdf-bookmark="Instance-based learning"><div class="sect3" id="idm46324234971888">
<h3>Instance-based learning</h3>

<p>Possibly<a data-type="indexterm" data-primary="instance-based learning" id="idm46324234970320"/> the most trivial form of learning is simply to learn by heart. If you were to create a spam filter this way, it would just flag all emails that are identical to emails that have already been flagged by users—not the worst solution, but certainly not the best.</p>

<p>Instead of just flagging emails that are identical to known spam emails, your spam filter could be programmed to also flag emails that are very similar to known spam emails. This<a data-type="indexterm" data-primary="measure of similarity" id="idm46324234968880"/> requires a <em>measure of similarity</em> between two emails. A (very basic) similarity measure between two emails could be to count the number of words they have in common. The system would flag an email as spam if it has many words in common with a known spam email.</p>

<p>This is called <em>instance-based learning</em>: the system learns the examples by heart, then generalizes to new cases by using a similarity measure to compare them to the learned examples (or a subset of them). For example, in <a data-type="xref" href="#instance_based_learning_diagram">Figure 1-16</a> the new instance would be classified as a triangle because the majority of the most similar instances belong to that class.</p>

<figure class="smallerseventy"><div id="instance_based_learning_diagram" class="figure">
<img src="Images/mls3_0116.png" alt="mls3 0116" width="1938" height="937"/>
<h6><span class="label">Figure 1-16. </span>Instance-based learning</h6>
</div></figure>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Model-based learning, and a typical Machine Learning workflow"><div class="sect3" id="model_based_learning">
<h3>Model-based learning, and a typical Machine Learning workflow</h3>

<p>Another<a data-type="indexterm" data-primary="model-based learning" id="idm46324234077040"/> way to generalize from a set of examples is to build a model of these examples and then use that model to make <em>predictions</em>. This is called <em>model-based learning</em> (<a data-type="xref" href="#model_based_learning_diagram">Figure 1-17</a>).</p>

<figure class="smallerseventy"><div id="model_based_learning_diagram" class="figure">
<img src="Images/mls3_0117.png" alt="mls3 0117" width="1938" height="980"/>
<h6><span class="label">Figure 1-17. </span>Model-based learning</h6>
</div></figure>

<p>For example, suppose<a data-type="indexterm" data-primary="Better Life Index" id="idm46324234071680"/> you want to know if money makes people happy, so you download the Better Life Index data from the OECD’s website and World Bank stats about gross domestic product (GDP) per capita from OurWorldInData.org. Then you join the tables and sort by GDP per capita. <a data-type="xref" href="#life_satisfaction_table_excerpt">Table 1-1</a> shows an excerpt of what you get.</p>
<table id="life_satisfaction_table_excerpt">
<caption><span class="label">Table 1-1. </span>Does money make people happier?</caption>
<thead>
<tr>
<th>Country</th>
<th>GDP per capita (USD)</th>
<th>Life satisfaction</th>
</tr>
</thead>
<tbody>
<tr>
<td><p>Turkey</p></td>
<td><p>28,384</p></td>
<td><p>5.5</p></td>
</tr>
<tr>
<td><p>Hungary</p></td>
<td><p>31,008</p></td>
<td><p>5.6</p></td>
</tr>
<tr>
<td><p>France</p></td>
<td><p>42,026</p></td>
<td><p>6.5</p></td>
</tr>
<tr>
<td><p>United States</p></td>
<td><p>60,236</p></td>
<td><p>6.9</p></td>
</tr>
<tr>
<td><p>New Zealand</p></td>
<td><p>42,404</p></td>
<td><p>7.3</p></td>
</tr>
<tr>
<td><p>Australia</p></td>
<td><p>48,698</p></td>
<td><p>7.3</p></td>
</tr>
<tr>
<td><p>Denmark</p></td>
<td><p>55,938</p></td>
<td><p>7.6</p></td>
</tr>
</tbody>
</table>

<p>Let’s plot the data for these countries (<a data-type="xref" href="#money_happy_scatterplot">Figure 1-18</a>).</p>

<figure class="smallersixtyfive"><div id="money_happy_scatterplot" class="figure">
<img src="Images/mls3_0118.png" alt="mls3 0118" width="1395" height="788"/>
<h6><span class="label">Figure 1-18. </span>Do you see a trend here?</h6>
</div></figure>

<p>There does seem to be a trend here! Although<a data-type="indexterm" data-primary="noisy data" id="idm46324234093792"/><a data-type="indexterm" data-primary="data" data-secondary="noisy data" id="idm46324234093088"/> the data is <em>noisy</em> (i.e., partly random), it looks like life satisfaction goes up more or less linearly as the country’s GDP per capita increases. So you decide to model life satisfaction as a linear function of GDP per capita. This<a data-type="indexterm" data-primary="model selection" id="idm46324234091360"/><a data-type="indexterm" data-primary="linear models" id="idm46324234090656"/> step is called <em>model selection</em>: you selected a <em>linear model</em> of life satisfaction with just one attribute, GDP per capita (<a data-type="xref" href="#a_simple_linear_model">Equation 1-1</a>).</p>
<div data-type="equation" id="a_simple_linear_model">
<h5><span class="label">Equation 1-1. </span>A simple linear model</h5>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow>
    <mtext>life_satisfaction</mtext>
    <mo>=</mo>
    <msub><mi>θ</mi> <mn>0</mn> </msub>
    <mo>+</mo>
    <msub><mi>θ</mi> <mn>1</mn> </msub>
    <mo>×</mo>
    <mtext>GDP_per_capita</mtext>
  </mrow>
</math>
</div>

<p>This<a data-type="indexterm" data-primary="model parameters" id="idm46324234080224"/> model has two <em>model parameters</em>, <em>θ</em><sub>0</sub> and <em>θ</em><sub>1</sub>.⁠<sup><a data-type="noteref" id="idm46324234440528-marker" href="ch01.xhtml#idm46324234440528">4</a></sup> By tweaking these parameters, you can make your model represent any linear function, as shown in <a data-type="xref" href="#tweaking_model_params_plot">Figure 1-19</a>.</p>

<figure class="smallersixtyfive"><div id="tweaking_model_params_plot" class="figure">
<img src="Images/mls3_0119.png" alt="mls3 0119" width="1395" height="788"/>
<h6><span class="label">Figure 1-19. </span>A few possible linear models</h6>
</div></figure>

<p>Before you can use your model, you need to define the parameter values <em>θ</em><sub>0</sub> and <em>θ</em><sub>1</sub>. How can you know which values will make your model perform best? To answer this question, you need to specify a performance measure. You can either<a data-type="indexterm" data-primary="utility functions" id="idm46324234433936"/><a data-type="indexterm" data-primary="fitness functions" id="idm46324234433232"/><a data-type="indexterm" data-primary="cost functions" data-secondary="role of" id="idm46324234432560"/> define a <em>utility function</em> (or <em>fitness function</em>) that measures how <em>good</em> your model is, or you can define a <em>cost function</em> that measures how <em>bad</em> it is. For Linear Regression problems, people typically use a cost function that measures the distance between the linear model’s predictions and the training examples; the objective is to minimize this distance.</p>

<p>This is where the Linear Regression algorithm comes in: you feed it your training examples, and it finds the parameters that make the linear model fit best to your data. This<a data-type="indexterm" data-primary="training models" data-secondary="defined" id="idm46324234428768"/><a data-type="indexterm" data-primary="models" data-secondary="training" id="idm46324234427792"/> is called <em>training</em> the model. In our case, the algorithm finds that the optimal parameter values are <em>θ</em><sub>0</sub> = 3.75 and <em>θ</em><sub>1</sub> = 6.78 × 10<sup>–5</sup>.</p>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>Confusingly, the same<a data-type="indexterm" data-primary="models" data-secondary="defined" id="idm46324234423504"/> word “model” can refer to a <em>type of model</em> (e.g., Linear Regression),<a data-type="indexterm" data-primary="fully-specified model architecture" id="idm46324234421600"/> to a <em>fully specified model architecture</em> (e.g., Linear Regression with one input and one output), or<a data-type="indexterm" data-primary="final trained models" id="idm46324234420288"/> to the <em>final trained model</em> ready to be used for predictions (e.g., Linear Regression with one input and one output, using <em>θ</em><sub>0</sub> = 3.75 and <em>θ</em><sub>1</sub> = 6.78 × 10<sup>–5</sup>). Model selection consists in choosing the type of model and fully specifying its architecture. Training a model means running an algorithm to find the model parameters that will make it best fit the training data, and hopefully make good predictions on new data.</p>
</div>

<p>Now the model fits the training data as closely as possible (for a linear model), as you can see in <a data-type="xref" href="#best_fit_model_plot">Figure 1-20</a>.</p>

<figure class="smallersixtyfive"><div id="best_fit_model_plot" class="figure">
<img src="Images/mls3_0120.png" alt="mls3 0120" width="1395" height="788"/>
<h6><span class="label">Figure 1-20. </span>The linear model that fits the training data best</h6>
</div></figure>

<p>You are finally ready to run the model to make predictions. For example, say you want to know how happy Cypriots are, and the OECD data does not have the answer. Fortunately, you can use your model to make a good prediction: you look up Cyprus’s GDP per capita, find $37,655, and then apply your model and find that life satisfaction is likely to be somewhere around 3.75 + 37,655 × 6.78 × 10<sup>–5</sup> = 6.30.</p>

<p>To<a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="linear model using" id="idm46324228423712"/> whet your appetite, <a data-type="xref" href="#example_scikit_code">Example 1-1</a> shows the Python code that loads the data, separates the inputs <code>X</code> from the labels <code>y</code>, creates a scatterplot for visualization, and then trains a linear model and makes a prediction.⁠<sup><a data-type="noteref" id="idm46324228420800-marker" href="ch01.xhtml#idm46324228420800">5</a></sup></p>
<div id="example_scikit_code" data-type="example">
<h5><span class="label">Example 1-1. </span>Training and running a linear model using Scikit-Learn</h5>

<pre data-type="programlisting" data-code-language="python"><code class="kn">import</code> <code class="nn">matplotlib.pyplot</code> <code class="kn">as</code> <code class="nn">plt</code>
<code class="kn">import</code> <code class="nn">numpy</code> <code class="kn">as</code> <code class="nn">np</code>
<code class="kn">import</code> <code class="nn">pandas</code> <code class="kn">as</code> <code class="nn">pd</code>
<code class="kn">from</code> <code class="nn">sklearn.linear_model</code> <code class="kn">import</code> <code class="n">LinearRegression</code>

<code class="c1"># Download and prepare the data</code>
<code class="n">data_root</code> <code class="o">=</code> <code class="s2">"https://github.com/ageron/data/raw/main/"</code>
<code class="n">lifesat</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">read_csv</code><code class="p">(</code><code class="n">data_root</code> <code class="o">+</code> <code class="s2">"lifesat/lifesat.csv"</code><code class="p">)</code>
<code class="n">X</code> <code class="o">=</code> <code class="n">lifesat</code><code class="p">[[</code><code class="s2">"GDP per capita (USD)"</code><code class="p">]]</code><code class="o">.</code><code class="n">values</code>
<code class="n">y</code> <code class="o">=</code> <code class="n">lifesat</code><code class="p">[[</code><code class="s2">"Life satisfaction"</code><code class="p">]]</code><code class="o">.</code><code class="n">values</code>

<code class="c1"># Visualize the data</code>
<code class="n">lifesat</code><code class="o">.</code><code class="n">plot</code><code class="p">(</code><code class="n">kind</code><code class="o">=</code><code class="s1">'scatter'</code><code class="p">,</code> <code class="n">grid</code><code class="o">=</code><code class="bp">True</code><code class="p">,</code>
             <code class="n">x</code><code class="o">=</code><code class="s2">"GDP per capita (USD)"</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="s2">"Life satisfaction"</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">axis</code><code class="p">([</code><code class="mi">23</code><code class="n">_500</code><code class="p">,</code> <code class="mi">62</code><code class="n">_500</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="p">])</code>
<code class="n">plt</code><code class="o">.</code><code class="n">show</code><code class="p">()</code>

<code class="c1"># Select a linear model</code>
<code class="n">model</code> <code class="o">=</code> <code class="n">LinearRegression</code><code class="p">()</code>

<code class="c1"># Train the model</code>
<code class="n">model</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">y</code><code class="p">)</code>

<code class="c1"># Make a prediction for Cyprus</code>
<code class="n">X_new</code> <code class="o">=</code> <code class="p">[[</code><code class="mi">37</code><code class="n">_655</code><code class="o">.</code><code class="mi">2</code><code class="p">]]</code>  <code class="c1"># Cyprus' GDP per capita in 2020</code>
<code class="k">print</code><code class="p">(</code><code class="n">model</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_new</code><code class="p">))</code> <code class="c1"># outputs [[6.30165767]]</code></pre></div>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>If you had used an<a data-type="indexterm" data-primary="instance-based learning" id="idm46324232410864"/> instance-based learning algorithm instead, you would have found that Israel has the closest GDP per capita to that of Cyprus ($38,341), and since the OECD data tells us that Israelis’ life satisfaction is 7.2, you would have predicted a life satisfaction of 7.2 for Cyprus. If you zoom out a bit and look at the two next-closest countries, you will find Lithuania and Slovenia, both with a life satisfaction of 5.9. Averaging these three values, you get 6.33, which is pretty close to your model-based prediction. This<a data-type="indexterm" data-primary="k-Nearest Neighbors regression" id="idm46324232409552"/><a data-type="indexterm" data-primary="regression problems" data-secondary="k-Nearest Neighbors regression" id="idm46324232380864"/> simple algorithm is called <em>k-Nearest Neighbors</em> regression (in this example, <em>k</em> = 3).</p>

<p>Replacing the Linear Regression model with k-Nearest Neighbors regression in the previous code is as simple as replacing these two lines:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.linear_model</code> <code class="kn">import</code> <code class="n">LinearRegression</code>
<code class="n">model</code> <code class="o">=</code> <code class="n">LinearRegression</code><code class="p">()</code></pre>

<p>with these two:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.neighbors</code> <code class="kn">import</code> <code class="n">KNeighborsRegressor</code>
<code class="n">model</code> <code class="o">=</code> <code class="n">KNeighborsRegressor</code><code class="p">(</code><code class="n">n_neighbors</code><code class="o">=</code><code class="mi">3</code><code class="p">)</code></pre>
</div>

<p>If all went well, your model will make good predictions. If not, you may need to use more attributes (employment rate, health, air pollution, etc.), get more or better-quality training data, or perhaps select a more powerful model (e.g., a Polynomial Regression model).</p>

<p>In summary:</p>

<ul>
<li>
<p>You studied the data.</p>
</li>
<li>
<p>You selected a model.</p>
</li>
<li>
<p>You trained it on the training data (i.e., the learning algorithm searched for the model parameter values that minimize a cost function).</p>
</li>
<li>
<p>Finally, you<a data-type="indexterm" data-primary="inference" id="idm46324226773824"/> applied the model to make predictions on new cases (this is called <em>inference</em>), hoping that this model will generalize well.</p>
</li>
</ul>

<p>This is what a typical Machine Learning project looks like. In <a data-type="xref" href="ch02.xhtml#project_chapter">Chapter 2</a> you will experience this firsthand by going through a project end to end.</p>

<p>We have covered a lot of ground so far: you now know what Machine Learning is really about, why it is useful, what some of the most common categories of ML systems are, and what a typical project workflow looks like. Now let’s look at what can go wrong in learning and prevent you from making accurate predictions.<a data-type="indexterm" data-primary="" data-startref="MLtype01" id="idm46324226719680"/></p>
</div></section>



</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Main Challenges of Machine Learning"><div class="sect1" id="idm46324234078144">
<h1>Main Challenges of Machine Learning</h1>

<p>In<a data-type="indexterm" data-primary="Machine Learning (ML)" data-secondary="challenges of" id="MLchallenge01"/> short, since your main task is to select a model and train it on some data, the two things that can go wrong are “bad model” and “bad data.” Let’s start with examples of bad data.</p>








<section data-type="sect2" data-pdf-bookmark="Insufficient Quantity of Training Data"><div class="sect2" id="idm46324226716016">
<h2>Insufficient Quantity of Training Data</h2>

<p>For<a data-type="indexterm" data-primary="training data" data-secondary="insufficient quantity of" id="idm46324226714752"/> a toddler to learn what an apple is, all it takes is for you to point to an apple and say “apple” (possibly repeating this procedure a few times). Now the child is able to recognize apples in all sorts of colors and shapes. Genius.</p>

<p>Machine Learning is not quite there yet; it takes a lot of data for most Machine Learning algorithms to work properly. Even for very simple problems you typically need thousands of examples, and for complex problems such as image or speech recognition you may need millions of examples (unless you can reuse parts of an existing model).</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46324226713136">
<h5>The Unreasonable Effectiveness of Data</h5>
<p>In a <a href="https://homl.info/6">famous paper</a> published<a data-type="indexterm" data-primary="algorithms" data-secondary="importance of data over" id="idm46324226710880"/><a data-type="indexterm" data-primary="data" data-secondary="importance of over algorithms" id="idm46324226709872"/> in 2001, Microsoft researchers Michele Banko and Eric Brill showed that very different Machine Learning algorithms, including fairly simple ones, performed almost identically well on a complex problem of natural language disambiguation⁠<sup><a data-type="noteref" id="idm46324226708576-marker" href="ch01.xhtml#idm46324226708576">6</a></sup> once they were given enough data (as you can see in <a data-type="xref" href="#banko_brill_2001_plot">Figure 1-21</a>).</p>

<figure class="smallersixty"><div id="banko_brill_2001_plot" class="figure">
<img src="Images/mls3_0121.png" alt="mls3 0121" width="1440" height="1378"/>
<h6><span class="label">Figure 1-21. </span>The importance of data versus algorithms⁠<sup><a data-type="noteref" id="idm46324226704896-marker" href="ch01.xhtml#idm46324226704896">7</a></sup></h6>
</div></figure>

<p>As<a data-type="indexterm" data-primary="corpus development" id="idm46324226703408"/> the authors put it, “these results suggest that we may want to reconsider the trade-off between spending time and money on algorithm development versus spending it on corpus development.”</p>

<p>The idea that data matters more than algorithms for complex problems was further popularized by Peter Norvig et al. in a paper titled <a href="https://homl.info/7">“The Unreasonable Effectiveness of Data”</a>, published in 2009.⁠<sup><a data-type="noteref" id="idm46324226701472-marker" href="ch01.xhtml#idm46324226701472">8</a></sup>  It should be noted, however, that small- and medium-sized datasets are still very common, and it is not always easy or cheap to get extra training data⁠—so don’t abandon algorithms just yet.</p>
</div></aside>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Nonrepresentative Training Data"><div class="sect2" id="idm46324226700112">
<h2>Nonrepresentative Training Data</h2>

<p>In<a data-type="indexterm" data-primary="training data" data-secondary="nonrepresentative" id="idm46324226698768"/> order to generalize well, it is crucial that your training data be representative of the new cases you want to generalize to. This is true whether you use instance-based learning or model-based learning.</p>

<p>For example, the set of countries we used earlier for training the linear model was not perfectly representative; it did not contain any country with a GDP per capita lower than $23,500 or higher than $62,500. <a data-type="xref" href="#representative_training_data_scatterplot">Figure 1-22</a> shows what the data looks like when you add such countries.</p>

<figure><div id="representative_training_data_scatterplot" class="figure">
<img src="Images/mls3_0122.png" alt="mls3 0122" width="2295" height="788"/>
<h6><span class="label">Figure 1-22. </span>A more representative training sample</h6>
</div></figure>

<p>If you train a linear model on this data, you get the solid line, while the old model is represented by the dotted line. As you can see, not only does adding a few missing countries significantly alter the model, but it makes it clear that such a simple linear model is probably never going to work well. It seems that very rich countries are not happier than moderately rich countries (in fact, they seem slightly unhappier!), and conversely some poor countries seem happier than many rich countries.</p>

<p>By using a nonrepresentative training set, we trained a model that is unlikely to make accurate predictions, especially for very poor and very rich countries.</p>

<p>It is crucial to use a training set that is representative of the cases you want to generalize to. This is often harder than it sounds: if the sample is too small, you will<a data-type="indexterm" data-primary="sampling noise" id="idm46324226693296"/> have <em>sampling noise</em> (i.e., nonrepresentative data as a result of chance), but even very large samples can be nonrepresentative if the sampling method is flawed. This<a data-type="indexterm" data-primary="sampling bias" id="idm46324226692048"/> is called <em>sampling bias</em>.</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46324226690672">
<h5>Examples of Sampling Bias</h5>
<p>Perhaps the most famous example of sampling bias happened during the US presidential election in 1936, which pitted Landon against Roosevelt: the <em>Literary Digest</em> conducted a very large poll, sending mail to about 10 million people. It got 2.4 million answers, and predicted with high confidence that Landon would get 57% of the votes. Instead, Roosevelt won with 62% of the votes. The flaw was in the <em>Literary Digest</em>’s sampling method:</p>

<ul>
<li>
<p>First, to obtain the addresses to send the polls to, the <em>Literary Digest</em> used telephone directories, lists of magazine subscribers, club membership lists, and the like. All of these lists tended to favor wealthier people, who were more likely to vote Republican (hence Landon).</p>
</li>
<li>
<p>Second, less than 25% of the people who were polled answered. Again this introduced a sampling bias, by potentially ruling out people who didn’t care much about politics, people who didn’t like the <em>Literary Digest</em>, and other key groups. This is a special type of sampling bias called <em>nonresponse bias</em>.</p>
</li>
</ul>

<p>Here is another example: say you want to build a system to recognize funk music videos. One way to build your training set is to search for “funk music” on YouTube and use the resulting videos. But this assumes that YouTube’s search engine returns a set of videos that are representative of all the funk music videos on YouTube. In reality, the search results are likely to be biased toward popular artists (and if you live in Brazil you will get a lot of “funk carioca” videos, which sound nothing like James Brown). On the other hand, how else can you get a large training set?</p>
</div></aside>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Poor-Quality Data"><div class="sect2" id="idm46324226683872">
<h2>Poor-Quality Data</h2>

<p>Obviously, if your training data<a data-type="indexterm" data-primary="training data" data-secondary="poor quality" id="idm46324226682544"/> is full of errors, outliers, and noise (e.g., due to poor-quality measurements), it will make it harder for the system to detect the underlying patterns, so your system is less likely to perform well. It is often well worth the effort to spend time cleaning up your training data. The truth is, most data scientists spend a significant part of their time doing just that. The following are a couple examples of when you’d want to clean up training data:</p>

<ul>
<li>
<p>If some instances are clearly outliers, it may help to simply discard them or try to fix the errors manually.</p>
</li>
<li>
<p>If some instances are missing a few features (e.g., 5% of your customers did not specify their age), you must decide whether you want to ignore this attribute altogether, ignore these instances, fill in the missing values (e.g., with the median age), or train one model with the feature and one model without it.</p>
</li>
</ul>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Irrelevant Features"><div class="sect2" id="idm46324226678912">
<h2>Irrelevant Features</h2>

<p>As<a data-type="indexterm" data-primary="training data" data-secondary="irrelevant features" id="idm46324233552464"/> the saying goes: garbage in, garbage out. Your system will only be capable of learning if the training data contains enough relevant features and not too many irrelevant ones. A critical part of the success of a Machine Learning project is coming up with a good set of features to train on. This<a data-type="indexterm" data-primary="feature engineering" id="idm46324233551328"/> process, called <em>feature engineering</em>, involves the following steps:</p>

<ul>
<li>
<p><em>Feature selection</em> (selecting<a data-type="indexterm" data-primary="feature selection" id="idm46324233548768"/> the most useful features to train on among existing features)</p>
</li>
<li>
<p><em>Feature extraction</em> (combining<a data-type="indexterm" data-primary="feature extraction" id="idm46324233546784"/> existing features to produce a more useful one⁠—as we saw earlier, dimensionality reduction algorithms can help)</p>
</li>
<li>
<p>Creating new features by gathering new data</p>
</li>
</ul>

<p>Now that we have looked at many examples of bad data, let’s look at a couple examples of bad algorithms.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Overfitting the Training Data"><div class="sect2" id="idm46324233543904">
<h2>Overfitting the Training Data</h2>

<p>Say<a data-type="indexterm" data-primary="training data" data-secondary="overfitting" id="idm46324233541936"/><a data-type="indexterm" data-primary="overfitting" data-secondary="defined" id="idm46324233540928"/> you are visiting a foreign country and the taxi driver rips you off. You might be tempted to say that <em>all</em> taxi drivers in that country are thieves. Overgeneralizing is something that we humans do all too often, and unfortunately machines can fall into the same trap if we are not careful. In Machine Learning this is called <em>overfitting</em>: it means that the model performs well on the training data, but it does not generalize well.</p>

<p><a data-type="xref" href="#overfitting_model_plot">Figure 1-23</a> shows an example of a high-degree polynomial life satisfaction model that strongly overfits the training data. Even though it performs much better on the training data than the simple linear model, would you really trust its predictions?</p>

<figure><div id="overfitting_model_plot" class="figure">
<img src="Images/mls3_0123.png" alt="mls3 0123" width="2313" height="806"/>
<h6><span class="label">Figure 1-23. </span>Overfitting the training data</h6>
</div></figure>

<p>Complex models such as deep neural networks can detect subtle patterns in the data, but if the training set is noisy, or if it is too small (which introduces sampling noise), then the model is likely to detect patterns in the noise itself. Obviously these patterns will not generalize to new instances. For example, say you feed your life satisfaction model many more attributes, including uninformative ones such as the country’s name. In that case, a complex model may detect patterns like the fact that all countries in the training data with a <em>w</em> in their name have a life satisfaction greater than 7: New Zealand (7.3), Norway (7.6), Sweden (7.3), and Switzerland (7.5). How confident are you that the <em>w</em>-satisfaction rule generalizes to Rwanda or Zimbabwe? Obviously this pattern occurred in the training data by pure chance, but the model has no way to tell whether a pattern is real or simply the result of noise in the data.</p>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>Overfitting happens when the model is too complex relative to the amount and noisiness of the training data. Here are possible solutions:</p>

<ul>
<li>
<p>Simplify the model by selecting one with fewer parameters (e.g., a linear model rather than a high-degree polynomial model), by reducing the number of attributes in the training data, or by constraining the model.</p>
</li>
<li>
<p>Gather more training data.</p>
</li>
<li>
<p>Reduce the noise in the training data (e.g., fix data errors and remove outliers).</p>
</li>
</ul>
</div>

<p>Constraining<a data-type="indexterm" data-primary="regularization" data-secondary="defined" id="idm46324233528912"/> a model to make it simpler and reduce the risk of overfitting is called <em>regularization</em>. For example, the linear model we defined earlier has two parameters, <em>θ</em><sub>0</sub> and <em>θ</em><sub>1</sub>. This gives the learning algorithm two <em>degrees of freedom</em> to adapt the model to the training data: it can tweak both the height (<em>θ</em><sub>0</sub>) and the slope (<em>θ</em><sub>1</sub>) of the line. If we forced <em>θ</em><sub>1</sub> = 0, the algorithm would have only one degree of freedom and would have a much harder time fitting the data properly: all it could do is move the line up or down to get as close as possible to the training instances, so it would end up around the mean. A very simple model indeed! If we allow the algorithm to modify <em>θ</em><sub>1</sub> but we force it to keep it small, then the learning algorithm will effectively have somewhere in between one and two degrees of freedom. It will produce a model that’s simpler than one with two degrees of freedom, but more complex than one with just one. You want to find the right balance between fitting the training data perfectly and keeping the model simple enough to ensure that it will generalize well.</p>

<p><a data-type="xref" href="#ridge_model_plot">Figure 1-24</a> shows three models. The dotted line represents the original model that was trained on the countries represented as circles (without the countries represented as squares), the solid line is our second model trained with all countries (circles and squares), and the dashed line is a model trained with the same data as the first model but with a regularization constraint. You can see that regularization
forced the model to have a smaller slope: this model does not fit the training data (circles) as well as the first model, but it actually generalizes better to new examples that it did not see during training (squares).</p>

<figure><div id="ridge_model_plot" class="figure">
<img src="Images/mls3_0124.png" alt="mls3 0124" width="2295" height="788"/>
<h6><span class="label">Figure 1-24. </span>Regularization reduces the risk of overfitting</h6>
</div></figure>

<p>The<a data-type="indexterm" data-primary="hyperparameters" data-secondary="defined" id="idm46324233519104"/> amount of regularization to apply during learning can be controlled by a <em>hyperparameter</em>. A hyperparameter is a parameter of a learning algorithm (not of the model). As such, it is not affected by the learning algorithm itself; it must be set prior to training and remains constant during training. If you set the regularization hyperparameter to a very large value, you will get an almost flat model (a slope close to zero); the learning algorithm will almost certainly not overfit the training data, but it will be less likely to find a good solution. Tuning hyperparameters is an important part of building a Machine Learning system (you will see a detailed example in the next chapter).</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Underfitting the Training Data"><div class="sect2" id="idm46324233543280">
<h2>Underfitting the Training Data</h2>

<p>As<a data-type="indexterm" data-primary="training data" data-secondary="underfitting" id="idm46324233516320"/><a data-type="indexterm" data-primary="underfitting" id="idm46324233515312"/> you might guess, <em>underfitting</em> is the opposite of overfitting: it occurs when your model is too simple to learn the underlying structure of the data. For example, a linear model of life satisfaction is prone to underfit; reality is just more complex than the model, so its predictions are bound to be inaccurate, even on the training <span class="keep-together">examples</span>.</p>

<p>Here are the main options for fixing this problem:</p>

<ul>
<li>
<p>Select a more powerful model, with more parameters.</p>
</li>
<li>
<p>Feed better features to the learning algorithm (feature engineering).</p>
</li>
<li>
<p>Reduce the constraints on the model (e.g., reduce the regularization hyperparameter).</p>
</li>
</ul>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Stepping Back"><div class="sect2" id="idm46324233509344">
<h2>Stepping Back</h2>

<p>By<a data-type="indexterm" data-primary="Machine Learning (ML)" data-secondary="overview of" id="idm46324233508016"/> now you know a lot about Machine Learning. However, we went through so many concepts that you may be feeling a little lost, so let’s step back and look at the big <span class="keep-together">picture</span>:</p>

<ul>
<li>
<p>Machine Learning is about making machines get better at some task by learning from data, instead of having to explicitly code rules.</p>
</li>
<li>
<p>There are many different types of ML systems: supervised or not, batch or online, instance-based or model-based.</p>
</li>
<li>
<p>In an ML project you gather data in a training set, and you feed the training set to a learning algorithm. If the algorithm is model-based, it tunes some parameters to fit the model to the training set (i.e., to make good predictions on the training set itself), and then hopefully it will be able to make good predictions on new cases as well. If the algorithm is instance-based, it just learns the examples by heart and generalizes to new instances by using a similarity measure to compare them to the learned instances.</p>
</li>
<li>
<p>The system will not perform well if your training set is too small, or if the data is not representative, is noisy, or is polluted with irrelevant features (garbage in, garbage out). Lastly, your model needs to be neither too simple (in which case it will underfit) nor too complex (in which case it will overfit).</p>
</li>
</ul>

<p>There’s just one last important topic to cover: once you have trained a model, you don’t want to just “hope” it generalizes to new cases. You want to evaluate it and fine-tune it if necessary. Let’s see how to do that.<a data-type="indexterm" data-primary="" data-startref="MLchallenge01" id="idm46324233501104"/></p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Testing and Validating"><div class="sect1" id="idm46324233499744">
<h1>Testing and Validating</h1>

<p>The<a data-type="indexterm" data-primary="Machine Learning (ML)" data-secondary="testing and validating" id="MLtest01"/> only way to know how well a model will generalize to new cases is to actually try it out on new cases. One way to do that is to put your model in production and monitor how well it performs. This works well, but if your model is horribly bad, your users will complain—not the best idea.</p>

<p>A<a data-type="indexterm" data-primary="training sets" id="idm46324233496080"/><a data-type="indexterm" data-primary="test sets" id="idm46324233495344"/> better option is to split your data into two sets: the <em>training set</em> and the <em>test set</em>. As these names imply, you train your model using the training set, and you test it using the test set. The error rate<a data-type="indexterm" data-primary="generalization error" id="idm46324233493584"/><a data-type="indexterm" data-primary="out-of-sample error" id="idm46324233492880"/> on new cases is called the <em>generalization error</em> (or <em>out-of-sample error</em>), and by evaluating your model on the test set, you get an estimate of this error. This value tells you how well your model will perform on instances it has never seen before.</p>

<p>If the training error is low (i.e., your model makes few mistakes on the training set) but the generalization error is high, it means that your model is overfitting the training data.</p>
<div data-type="tip"><h6>Tip</h6>
<p>It is common to use 80% of the data for training<a data-type="indexterm" data-primary="training data" data-secondary="hold outs" id="idm46324233489888"/><a data-type="indexterm" data-primary="hold outs" id="idm46324233488912"/> and <em>hold out</em> 20% for testing. However, this depends on the size of the dataset: if it contains 10 million instances, then holding out 1% means your test set will contain 100,000 instances, probably more than enough to get a good estimate of the generalization error.</p>
</div>








<section data-type="sect2" data-pdf-bookmark="Hyperparameter Tuning and Model Selection"><div class="sect2" id="idm46324233487440">
<h2>Hyperparameter Tuning and Model Selection</h2>

<p>Evaluating a model<a data-type="indexterm" data-primary="testing and validation" data-secondary="hyperparameter tuning" id="idm46324233485904"/><a data-type="indexterm" data-primary="hyperparameters" data-secondary="hyperparameter tuning" id="idm46324233484896"/><a data-type="indexterm" data-primary="testing and validation" data-secondary="model selection" id="idm46324233483952"/><a data-type="indexterm" data-primary="model selection" id="idm46324233483008"/> is simple enough: just use a test set. But suppose you are hesitating between two types of models (say, a linear model and a polynomial model): how can you decide between them? One option is to train both and compare how well they generalize using the test set.</p>

<p>Now suppose that the linear model generalizes better, but you want to apply some regularization to avoid overfitting. The question is, how do you choose the value of the regularization hyperparameter? One option is to train 100 different models using 100 different values for this hyperparameter. Suppose you find the best hyperparameter value that produces a model with the lowest generalization error⁠—say, just 5% error. You launch this model into production, but unfortunately it does not perform as well as expected and produces 15% errors. What just happened?</p>

<p>The problem is that you measured the generalization error multiple times on the test set, and you adapted the model and hyperparameters to produce the best model <em>for that particular set</em>. This means that the model is unlikely to perform as well on new data.</p>

<p>A<a data-type="indexterm" data-primary="holdout validation" id="idm46324233480144"/><a data-type="indexterm" data-primary="validation sets" id="idm46324233479408"/><a data-type="indexterm" data-primary="development sets (dev sets)" id="idm46324233478736"/> common solution to this problem is called <em>holdout validation</em> (<a data-type="xref" href="#hyperparameter_tuning_diagram">Figure 1-25</a>): you simply hold out part of the training set to evaluate several candidate models and select the best one. The new held-out set is called the <em>validation set</em> (or the <em>development set</em>, or <em>dev set</em>). More specifically, you train multiple models with various hyperparameters on the reduced training set (i.e., the full training set minus the validation set), and you select the model that performs best on the validation set. After this holdout validation process, you train the best model on the full training set (including the validation set), and this gives you the final model. Lastly, you evaluate this final model on the test set to get an estimate of the generalization error.</p>

<figure class="smallerseventy"><div id="hyperparameter_tuning_diagram" class="figure">
<img src="Images/mls3_0125.png" alt="mls3 0125" width="1526" height="773"/>
<h6><span class="label">Figure 1-25. </span>Model selection using holdout validation</h6>
</div></figure>

<p>This solution usually works quite well. However, if the validation set is too small, then model evaluations will be imprecise: you may end up selecting a suboptimal model by mistake. Conversely, if the validation set is too large, then the remaining training set will be much smaller than the full training set. Why is this bad? Well, since the final model will be trained on the full training set, it is not ideal to compare candidate models trained on a much smaller training set. It would be like selecting the fastest sprinter to participate in a marathon. One<a data-type="indexterm" data-primary="cross-validation" id="idm46324233472752"/> way to solve this problem is to perform repeated <em>cross-validation</em>, using many small validation sets. Each model is evaluated once per validation set after it is trained on the rest of the data. By averaging out all the evaluations of a model, you get a much more accurate measure of its performance. There is a drawback, however: the training time is multiplied by the number of validation sets.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Data Mismatch"><div class="sect2" id="idm46324233470992">
<h2>Data Mismatch</h2>

<p>In<a data-type="indexterm" data-primary="testing and validation" data-secondary="data mismatch" id="idm46324233469424"/><a data-type="indexterm" data-primary="data" data-secondary="data mismatch" id="idm46324233468416"/> some cases, it’s easy to get a large amount of data for training, but this data probably won’t be perfectly representative of the data that will be used in production. For example, suppose you want to create a mobile app to take pictures of flowers and automatically determine their species. You can easily download millions of pictures of flowers on the web, but they won’t be perfectly representative of the pictures that will actually be taken using the app on a mobile device. Perhaps you only have 1,000 representative pictures (i.e., actually taken with the app).</p>

<p>In this case, the most important rule to remember is that both the validation set and the test set must be as representative as possible of the data you expect to use in production, so they should be composed exclusively of representative pictures: you can shuffle them and put half in the validation set and half in the test set (making sure that no duplicates or near-duplicates end up in both sets). After training your model on the web pictures, if you observe that the performance of the model on the validation set is disappointing, you will not know whether this is because your model has overfit the training set, or whether this is just due to the mismatch between the web pictures and the mobile app pictures.</p>

<p>One<a data-type="indexterm" data-primary="train-dev sets" id="idm46324233466544"/> solution is to hold out some of the training pictures (from the web) in yet another set that Andrew Ng dubbed the <em>train-dev set</em> (<a data-type="xref" href="#train_dev_diagram">Figure 1-26</a>). After the model is trained (on the training set, <em>not</em> on the train-dev set), you can evaluate it on the train-dev set. If the model performs poorly, then it must have overfit the training set, so you should try to simplify or regularize the model, get more training data, and clean up the training data. But if it performs well on the train-dev set, then you can evaluate the model on the dev set. If it performs poorly, then the problem must be coming from the data mismatch. You can try to tackle this problem by preprocessing the web images to make them look more like the pictures that will be taken by the mobile app, and then retraining the model. Once you have a model that performs well on both the train-dev set and the dev set, you can evaluate it one last time on the test set to know how well it is likely to perform in production.</p>

<figure class="smallerseventy"><div id="train_dev_diagram" class="figure">
<img src="Images/mls3_0126.png" alt="mls3 0126" width="1813" height="467"/>
<h6><span class="label">Figure 1-26. </span>When real data is scarce (right), you may use similar abundant data (left) for training and hold out some of it in a train-dev set to evaluate overfitting. The real data is then used to evaluate data-mismatch (dev set), and to evaluate the final model’s performance (test set).</h6>
</div></figure>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46324233461552">
<h5>No Free Lunch Theorem</h5>
<p>A model is a simplified representation of the data. The simplifications are meant to discard the superfluous details that are unlikely to generalize to new instances. When you select a particular type of model, you are implicitly making <em>assumptions</em> about the data. For example, if you choose a linear model, you are implicitly assuming that the data is fundamentally linear and that the distance between the instances and the straight line is just noise, which can safely be ignored.</p>

<p>In a <a href="https://homl.info/8">famous 1996 paper</a>,⁠<sup><a data-type="noteref" id="idm46324233457936-marker" href="ch01.xhtml#idm46324233457936">9</a></sup> David Wolpert<a data-type="indexterm" data-primary="No Free Lunch (NFL) theorem" id="idm46324233456800"/> demonstrated that if you make absolutely no assumption about the data, then there is no reason to prefer one model over any other. This is called the <em>No Free Lunch</em> (NFL) theorem. For some datasets the best model is a linear model, while for other datasets it is a neural network. There is no model that is <em>a priori</em> guaranteed to work better (hence the name of the theorem). The only way to know for sure which model is best is to evaluate them all. Since this is not possible, in practice you make some reasonable assumptions about the data and evaluate only a few reasonable models. For example, for simple tasks you may evaluate linear models with various levels of regularization, and for a complex problem you may evaluate various neural networks.<a data-type="indexterm" data-primary="" data-startref="MLtest01" id="idm46324233454880"/><a data-type="indexterm" data-primary="loss functions" data-see="cost functions" id="idm46324233453904"/></p>
</div></aside>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Exercises"><div class="sect1" id="idm46324233452832">
<h1>Exercises</h1>

<p>In this chapter we have covered some of the most important concepts in Machine Learning. In the next chapters we will dive deeper and write more code, but before we do, make sure you can answer the following questions:</p>
<ol>
<li>
<p>How would you define Machine Learning?</p>
</li>
<li>
<p>Can you name four types of applications where it shines?</p>
</li>
<li>
<p>What is a labeled training set?</p>
</li>
<li>
<p>What are the two most common supervised tasks?</p>
</li>
<li>
<p>Can you name four common unsupervised tasks?</p>
</li>
<li>
<p>What type of algorithm would you use to allow a robot to walk in various unknown terrains?</p>
</li>
<li>
<p>What type of algorithm would you use to segment your customers into multiple groups?</p>
</li>
<li>
<p>Would you frame the problem of spam detection as a supervised learning problem or an unsupervised learning problem?</p>
</li>
<li>
<p>What is an online learning system?</p>
</li>
<li>
<p>What is out-of-core learning?</p>
</li>
<li>
<p>What type of algorithm relies on a similarity measure to make predictions?</p>
</li>
<li>
<p>What is the difference between a model parameter and a model hyperparameter?</p>
</li>
<li>
<p>What do model-based algorithms search for? What is the most common strategy they use to succeed? How do they make predictions?</p>
</li>
<li>
<p>Can you name four of the main challenges in Machine Learning?</p>
</li>
<li>
<p>If your model performs great on the training data but generalizes poorly to new instances, what is happening? Can you name three possible solutions?</p>
</li>
<li>
<p>What is a test set, and why would you want to use it?</p>
</li>
<li>
<p>What is the purpose of a validation set?</p>
</li>
<li>
<p>What is the train-dev set, when do you need it, and how do you use it?</p>
</li>
<li>
<p>What can go wrong if you tune hyperparameters using the test set?</p>
</li>

</ol>

<p>Solutions to these exercises are available at the end of this chapter’s notebook, at <a href="https://homl.info/colab3"><em class="hyperlink">https://homl.info/colab3</em></a>.</p>
</div></section>







<div data-type="footnotes"><p data-type="footnote" id="idm46324233299488"><sup><a href="ch01.xhtml#idm46324233299488-marker">1</a></sup> Fun fact: this odd-sounding name is a statistics term introduced by Francis Galton while he was studying the fact that the children of tall people tend to be shorter than their parents. Since the children were shorter, he called this <em>regression to the mean</em>. This name was then applied to the methods he used to analyze correlations between variables.</p><p data-type="footnote" id="idm46324228901792"><sup><a href="ch01.xhtml#idm46324228901792-marker">2</a></sup> Notice how animals are rather well separated from vehicles and how horses are close to deer but far from birds. Figure reproduced with permission from Richard Socher et al., “Zero-Shot Learning Through Cross-Modal Transfer,” <em>Proceedings of the 26th International Conference on Neural Information Processing Systems</em> 1 (2013): 935–943.</p><p data-type="footnote" id="idm46324233317024"><sup><a href="ch01.xhtml#idm46324233317024-marker">3</a></sup> That’s when the system works perfectly. In practice it often creates a few clusters per person, and sometimes mixes up two people who look alike, so you may need to provide a few labels per person and manually clean up some clusters.</p><p data-type="footnote" id="idm46324234440528"><sup><a href="ch01.xhtml#idm46324234440528-marker">4</a></sup> By convention, the Greek letter <em>θ</em> (theta) is frequently used to represent model parameters.</p><p data-type="footnote" id="idm46324228420800"><sup><a href="ch01.xhtml#idm46324228420800-marker">5</a></sup> It’s OK if you don’t understand all the code yet; I will present Scikit-Learn in the following chapters.</p><p data-type="footnote" id="idm46324226708576"><sup><a href="ch01.xhtml#idm46324226708576-marker">6</a></sup> For example, knowing whether to write “to,” “two,” or “too,” depending on the context.</p><p data-type="footnote" id="idm46324226704896"><sup><a href="ch01.xhtml#idm46324226704896-marker">7</a></sup> Figure reproduced with permission from Michele Banko and Eric Brill, “Scaling to Very Very Large Corpora for Natural Language Disambiguation,” <em>Proceedings of the 39th Annual Meeting of the Association for Computational Linguistics</em> (2001): 26–33.</p><p data-type="footnote" id="idm46324226701472"><sup><a href="ch01.xhtml#idm46324226701472-marker">8</a></sup> Peter Norvig et al., “The Unreasonable Effectiveness of Data,” <em>IEEE Intelligent Systems</em> 24, no. 2 (2009): 8–12.</p><p data-type="footnote" id="idm46324233457936"><sup><a href="ch01.xhtml#idm46324233457936-marker">9</a></sup> David Wolpert, “The Lack of A Priori Distinctions Between Learning Algorithms,” <em>Neural Computation</em> 8, no. 7 (1996): 1341–1390.</p></div></div></section></div></body>
</html>
<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 2. End-to-End Machine Learning Project"><div class="chapter" id="project_chapter">
<h1><span class="label">Chapter 2. </span>End-to-End Machine Learning Project</h1>

<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46324234196128">
<h5>A Note for Early Release Readers</h5>
<p>With Early Release ebooks, you get books in their earliest form—the author’s raw and unedited content as they write—so you can take advantage of these technologies long before the official release of these titles.</p>

<p>This will be the 2nd chapter of the final book. Notebooks are available on GitHub at <a href="https://github.com/ageron/handson-ml3"><em class="hyperlink">https://github.com/ageron/handson-ml3</em></a>. Datasets are available at <a href="https://github.com/ageron/data"><em class="hyperlink">https://github.com/ageron/data</em></a>.</p>

<p>If you have comments about how we might improve the content and/or examples in this book, or if you notice missing material within this chapter, please reach out to the editor at <a href="mailto:mcronin@oreilly.com">mcronin@oreilly.com</a>.</p>
</div></aside>

<p>In<a data-type="indexterm" data-primary="example project" data-secondary="overview of" id="idm46324234190208"/> this chapter you will work through an example project end to end, pretending to be a recently hired data scientist at a real estate company. The example project is fictitious; the goal is to illustrate the main steps of a Machine Learning project, not to learn anything about the real estate business. Here are the main steps we will walk through:</p>
<ol>
<li>
<p>Look at the big picture.</p>
</li>
<li>
<p>Get the data.</p>
</li>
<li>
<p>Explore and visualize the data to gain insights.</p>
</li>
<li>
<p>Prepare the data for Machine Learning algorithms.</p>
</li>
<li>
<p>Select a model and train it.</p>
</li>
<li>
<p>Fine-tune your model.</p>
</li>
<li>
<p>Present your solution.</p>
</li>
<li>
<p>Launch, monitor, and maintain your system.</p>
</li>

</ol>






<section data-type="sect1" data-pdf-bookmark="Working with Real Data"><div class="sect1" id="idm46324234181296">
<h1>Working with Real Data</h1>

<p>When<a data-type="indexterm" data-primary="example project" data-secondary="real-world data for" id="idm46324234179728"/><a data-type="indexterm" data-primary="data" data-see="also data preparation; data visualization; training data" id="idm46324234178720"/><a data-type="indexterm" data-primary="data" data-secondary="sources for" id="idm46324234177808"/> you are learning about Machine Learning, it is best to experiment with real-world data, not artificial datasets. Fortunately, there are thousands of open datasets to choose from, ranging across all sorts of domains. Here are a few places you can look to get data:</p>

<ul>
<li>
<p>Popular open data repositories</p>

<ul>
<li>
<p><a href="https://www.openml.org/">OpenML.org</a></p>
</li>
<li>
<p><a href="https://www.kaggle.com/datasets">Kaggle.com</a></p>
</li>
<li>
<p><a href="https://paperswithcode.com/datasets">PapersWithCode.com</a></p>
</li>
<li>
<p><a href="https://archive.ics.uci.edu/ml/">UC Irvine Machine Learning Repository</a></p>
</li>
<li>
<p><a href="https://registry.opendata.aws/">Amazon’s AWS datasets</a></p>
</li>
<li>
<p><a href="https://www.tensorflow.org/datasets">TensorFlow Datasets</a></p>
</li>
</ul>
</li>
<li>
<p>Meta portals (they list open data repositories)</p>

<ul>
<li>
<p><a href="http://dataportals.org/">DataPortals.org</a></p>
</li>
<li>
<p><a href="https://opendatamonitor.eu/">OpenDataMonitor.eu</a></p>
</li>
</ul>
</li>
<li>
<p>Other pages listing many popular open data repositories</p>

<ul>
<li>
<p><a href="https://homl.info/9">Wikipedia’s list of Machine Learning datasets</a></p>
</li>
<li>
<p><a href="https://homl.info/10">Quora.com</a></p>
</li>
<li>
<p><a href="https://www.reddit.com/r/datasets">The datasets subreddit</a></p>
</li>
</ul>
</li>
</ul>

<p>In this chapter we’ll use the <a data-type="indexterm" data-primary="data" data-secondary="California Housing Prices dataset" id="idm46324234157248"/><a data-type="indexterm" data-primary="California Housing Prices dataset" id="idm46324234156208"/>California Housing Prices dataset from the StatLib repository⁠<sup><a data-type="noteref" id="idm46324234155392-marker" href="ch02.xhtml#idm46324234155392">1</a></sup> (see <a data-type="xref" href="#california_housing_prices_plot">Figure 2-1</a>). This dataset is based on data from the 1990 California census. It is not exactly recent (a nice house in the Bay Area was still affordable at the time), but it has many qualities for learning, so we will pretend it is recent data. For teaching purposes I’ve added a categorical attribute and removed a few features.</p>

<figure class="smallerseventy"><div id="california_housing_prices_plot" class="figure">
<img src="Images/mls3_0201.png" alt="mls3 0201" width="2683" height="2006"/>
<h6><span class="label">Figure 2-1. </span>California housing prices</h6>
</div></figure>
</div></section>













<section data-type="sect1" data-pdf-bookmark="Look at the Big Picture"><div class="sect1" id="idm46324234150848">
<h1>Look at the Big Picture</h1>

<p>Welcome<a data-type="indexterm" data-primary="example project" data-secondary="project goals" id="idm46324234149280"/> to the Machine Learning Housing Corporation! Your first task is to use California census data to build a model of housing prices in the state. This data includes metrics such as the population, median income, and median housing price for each block group in California. Block groups are the smallest geographical unit for which the US Census Bureau publishes sample data (a block group typically has a population of 600 to 3,000 people). I will call them “districts” for short.</p>

<p>Your model should learn from this data and be able to predict the median housing price in any district, given all the other metrics.</p>
<div data-type="tip"><h6>Tip</h6>
<p>Since you are a well-organized data scientist, the first thing you should do is pull out your<a data-type="indexterm" data-primary="Machine Learning project checklist" id="idm46324234146640"/><a data-type="indexterm" data-primary="example project" data-secondary="Machine Learning project checklist" id="idm46324234145920"/> Machine Learning project checklist. You can start with the one in Appendix A; it should work reasonably well for most Machine Learning projects, but make sure to adapt it to your needs. In this chapter we will go through many checklist items, but we will also skip a few, either because they are self-explanatory or because they will be discussed in later chapters.</p>
</div>








<section data-type="sect2" data-pdf-bookmark="Frame the Problem"><div class="sect2" id="idm46324234144576">
<h2>Frame the Problem</h2>

<p>The<a data-type="indexterm" data-primary="example project" data-secondary="framing the problem" id="idm46324234142608"/> first question to ask your boss is what exactly the business objective is. Building a model is probably not the end goal. How does the company expect to use and benefit from this model? Knowing the objective is important because it will determine how you frame the problem, which algorithms you will select, which performance measure you will use to evaluate your model, and how much effort you will spend tweaking it.</p>

<p>Your boss answers that your model’s output (a prediction of a district’s median housing price) will be fed to another Machine Learning system (see <a data-type="xref" href="#house_pricing_pipeline_diagram">Figure 2-2</a>), along with many other signals.⁠<sup><a data-type="noteref" id="idm46324234140080-marker" href="ch02.xhtml#idm46324234140080">2</a></sup> This downstream system will determine whether it is worth investing in a given area or not. Getting this right is critical, as it directly affects <span class="keep-together">revenue</span>.</p>

<figure><div id="house_pricing_pipeline_diagram" class="figure">
<img src="Images/mls3_0202.png" alt="mls3 0202" width="2478" height="816"/>
<h6><span class="label">Figure 2-2. </span>A Machine Learning pipeline for real estate investments</h6>
</div></figure>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46324234136000">
<h5>Pipelines</h5>
<p>A<a data-type="indexterm" data-primary="components" id="idm46324234134672"/><a data-type="indexterm" data-primary="pipelines" id="idm46324234133936"/> sequence of data processing components is called a data <em>pipeline</em>. Pipelines are very common in Machine Learning systems, since there is a lot of data to manipulate and many data transformations to apply.</p>

<p>Components typically run asynchronously. Each component pulls in a large amount of data, processes it, and spits out the result in another data store. Then, some time later, the next component in the pipeline pulls this data and spits out its own output. Each component is fairly self-contained: the interface between components is simply the data store. This makes the system simple to grasp (with the help of a data flow graph), and different teams can focus on different components. Moreover, if a component breaks down, the downstream components can often continue to run normally (at least for a while) by just using the last output from the broken component. This makes the architecture quite robust.</p>

<p>On the other hand, a broken component can go unnoticed for some time if proper monitoring is not implemented. The data gets stale and the overall system’s performance drops.</p>
</div></aside>

<p>The next question to ask your boss is what the current solution looks like (if any). The current situation will often give you a reference for performance, as well as insights on how to solve the problem. Your boss answers that the district housing prices are currently estimated manually by experts: a team gathers up-to-date information about a district, and when they cannot get the median housing price, they estimate it using complex rules.</p>

<p>This is costly and time-consuming, and their estimates are not great; in cases where they manage to find out the actual median housing price, they often realize that their estimates were off by more than 30%. This is why the company thinks that it would be useful to train a model to predict a district’s median housing price, given other data about that district. The census data looks like a great dataset to exploit for this purpose, since it includes the median housing prices of thousands of districts, as well as other data.</p>

<p>With all this information, you are now ready to start designing your system. First, determine what kind of training supervision the model will need: is it supervised, unsupervised, semi-supervised, self-supervised, or Reinforcement Learning? And is it a classification task, a regression task, or something else? Should you use batch learning or online learning techniques? Before you read on, pause and try to answer these questions for yourself.</p>

<p>Have you found the answers? Let’s see: it is clearly a typical supervised learning task, since<a data-type="indexterm" data-primary="labels" id="idm46324234128816"/> the model can be trained with <em>labeled</em> examples (each instance comes with the expected output, i.e., the district’s median housing price). It is also a typical regression task, since the model will be asked to predict a value. More specifically, this is<a data-type="indexterm" data-primary="regression problems" data-secondary="multiple regression problems" id="idm46324234127600"/><a data-type="indexterm" data-primary="multiple regression problems" id="idm46324234126608"/> a <em>multiple regression</em> problem, since the system will use multiple features to make a prediction (it will use the district’s population, the median income, etc.). It<a data-type="indexterm" data-primary="regression problems" data-secondary="univariate regression problems" id="idm46324234125216"/><a data-type="indexterm" data-primary="univariate regression problems" id="idm46324234124224"/> is also a <em>univariate regression</em> problem, since we are only trying to predict a single value for each district. If we were trying to predict multiple values per district, it<a data-type="indexterm" data-primary="regression problems" data-secondary="multivariate regression problems" id="idm46324234122832"/><a data-type="indexterm" data-primary="multivariate regression problems" id="idm46324234121840"/> would be a <em>multivariate regression</em> problem. Finally, there is no continuous flow of data coming into the system, there is no particular need to adjust to changing data rapidly, and the data is small enough to fit in memory, so plain batch learning should do just fine.</p>
<div data-type="tip"><h6>Tip</h6>
<p>If the data were huge, you could either split your batch learning work across multiple servers (using the MapReduce technique) or use an online learning technique.</p>
</div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Select a Performance Measure"><div class="sect2" id="select_a_performance_measure">
<h2>Select a Performance Measure</h2>

<p>Your<a data-type="indexterm" data-primary="example project" data-secondary="selecting performance measure" id="idm46324234117488"/><a data-type="indexterm" data-primary="metrics" data-secondary="RMSE" id="idm46324234116464"/><a data-type="indexterm" data-primary="Root Mean Square Error (RMSE)" id="idm46324234115520"/> next step is to select a performance measure. A typical performance measure for regression problems is the Root Mean Square Error (RMSE). It gives an idea of how much error the system typically makes in its predictions, with a higher weight given to large errors. <a data-type="xref" href="#rmse_equation">Equation 2-1</a> shows the mathematical formula to compute the RMSE.</p>
<div id="rmse_equation" data-type="equation"><h5><span class="label">Equation 2-1. </span>Root Mean Square Error (RMSE)</h5><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow>
    <mtext>RMSE</mtext>
    <mrow>
      <mo>(</mo>
      <mi mathvariant="bold">X</mi>
      <mo>,</mo>
      <mi>h</mi>
      <mo>)</mo>
    </mrow>
    <mo>=</mo>
    <msqrt>
      <mrow>
        <mfrac><mn>1</mn> <mi>m</mi></mfrac>
        <munderover><mo>∑</mo> <mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow> <mi>m</mi> </munderover>
        <msup><mfenced separators="" open="(" close=")"><mi>h</mi><mrow><mo>(</mo><msup><mi mathvariant="bold">x</mi> <mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow> </msup><mo>)</mo></mrow><mo>-</mo><msup><mi>y</mi> <mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow> </msup></mfenced> <mn>2</mn> </msup>
      </mrow>
    </msqrt>
  </mrow>
</math>
</div>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="notations">
<h5>Notations</h5>
<p>This<a data-type="indexterm" data-primary="Machine Learning (ML)" data-secondary="notations for" id="idm46324231413056"/> equation introduces several very common Machine Learning notations that I will use throughout this book:</p>

<ul>
<li>
<p><em>m</em> is the number of instances in the dataset you are measuring the RMSE on.</p>

<ul>
<li>
<p>For example, if you are evaluating the RMSE on a validation set of 2,000 districts, then <em>m</em> = 2,000.</p>
</li>
</ul>
</li>
<li>
<p><strong>x</strong><sup>(<em>i</em>)</sup> is a vector of all the feature values (excluding the label) of the <em>i</em><sup>th</sup> instance in the dataset, and <em>y</em><sup>(<em>i</em>)</sup> is its label (the desired output value for that instance).</p>

<ul>
<li>
<p>For example, if the first district in the dataset is located at longitude –118.29°, latitude 33.91°, and it has 1,416 inhabitants with a median income of $38,372, and the median house value is $156,400 (ignoring the other features for now), then:</p>
<div class="fifty-percent" data-type="equation">
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow>
    <msup><mi mathvariant="bold">x</mi> <mrow><mo>(</mo><mn>1</mn><mo>)</mo></mrow> </msup>
    <mo>=</mo>
    <mfenced open="(" close=")">
      <mtable>
        <mtr>
          <mtd>
            <mrow>
              <mo>-</mo>
              <mn>118.29</mn>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <mn>33.91</mn>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <mn>1,416</mn>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <mn>38,372</mn>
            </mrow>
          </mtd>
        </mtr>
      </mtable>
    </mfenced>
  </mrow>
</math>
</div>

<p>and:</p>
<div data-type="equation">
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow>
    <msup><mi>y</mi> <mrow><mo>(</mo><mn>1</mn><mo>)</mo></mrow> </msup>
    <mo>=</mo>
    <mn>156,400</mn>
  </mrow>
</math>
</div>
</li>
</ul>
</li>
<li>
<p><strong>X</strong> is a matrix containing all the feature values (excluding labels) of all instances in the dataset. There is one row per instance, and the <em>i</em><sup>th</sup> row is equal to the transpose of <strong>x</strong><sup>(<em>i</em>)</sup>, noted (<strong>x</strong><sup>(<em>i</em>)</sup>)<sup>⊺</sup>.⁠<sup><a data-type="noteref" id="idm46324231378576-marker" href="ch02.xhtml#idm46324231378576">3</a></sup></p>

<ul>
<li>
<p>For example, if the first district is as just described, then the matrix <strong>X</strong> looks like this:</p>
<div data-type="equation">
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow>
    <mi mathvariant="bold">X</mi>
    <mo>=</mo>
    <mfenced open="(" close=")">
      <mtable>
        <mtr>
          <mtd>
            <msup><mrow><mo>(</mo><msup><mi mathvariant="bold">x</mi> <mrow><mo>(</mo><mn>1</mn><mo>)</mo></mrow> </msup><mo>)</mo></mrow> <mo>⊺</mo> </msup>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <msup><mrow><mo>(</mo><msup><mi mathvariant="bold">x</mi> <mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow> </msup><mo>)</mo></mrow> <mo>⊺</mo> </msup>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mo>⋮</mo>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <msup><mrow><mo>(</mo><msup><mi mathvariant="bold">x</mi> <mrow><mo>(</mo><mn>1999</mn><mo>)</mo></mrow> </msup><mo>)</mo></mrow> <mo>⊺</mo> </msup>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <msup><mrow><mo>(</mo><msup><mi mathvariant="bold">x</mi> <mrow><mo>(</mo><mn>2000</mn><mo>)</mo></mrow> </msup><mo>)</mo></mrow> <mo>⊺</mo> </msup>
          </mtd>
        </mtr>
      </mtable>
    </mfenced>
    <mo>=</mo>
    <mfenced open="(" close=")">
      <mtable>
        <mtr>
          <mtd>
            <mrow>
              <mo>-</mo>
              <mn>118.29</mn>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <mn>33.91</mn>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <mn>1,416</mn>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <mn>38,372</mn>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mo>⋮</mo>
          </mtd>
          <mtd>
            <mo>⋮</mo>
          </mtd>
          <mtd>
            <mo>⋮</mo>
          </mtd>
          <mtd>
            <mo>⋮</mo>
          </mtd>
        </mtr>
      </mtable>
    </mfenced>
  </mrow>
</math>
</div>
</li>
</ul>
</li>
<li>
<p><em>h</em> is your system’s prediction function, also called a <em>hypothesis</em>. When your system is given an instance’s feature vector <strong>x</strong><sup>(<em>i</em>)</sup>, it outputs a predicted value <em>ŷ</em><sup>(<em>i</em>)</sup> = <em>h</em>(<strong>x</strong><sup>(<em>i</em>)</sup>) for that instance (<em>ŷ</em> is pronounced “y-hat”).</p>

<ul>
<li>
<p>For example, if your system predicts that the median housing price in the first district is $158,400, then <em>ŷ</em><sup>(1)</sup> = <em>h</em>(<strong>x</strong><sup>(1)</sup>) = 158,400. The prediction error for this district is <em>ŷ</em><sup>(1)</sup> – <em>y</em><sup>(1)</sup> = 2,000.</p>
</li>
</ul>
</li>
<li>
<p>RMSE(<strong>X</strong>,<em>h</em>) is the cost function measured on the set of examples using your hypothesis <em>h</em>.</p>
</li>
</ul>

<p>We use lowercase italic font for scalar values (such as <em>m</em> or <em>y</em><sup>(<em>i</em>)</sup>) and function names (such as <em>h</em>), lowercase bold font for vectors (such as <strong>x</strong><sup>(<em>i</em>)</sup>), and uppercase bold font for matrices (such as <strong>X</strong>).</p>
</div></aside>

<p>Even though the RMSE is generally the preferred performance measure for regression tasks, in some contexts you may prefer to use another function. For example, suppose that there are many outlier districts. In that case, you may consider<a data-type="indexterm" data-primary="mean absolute error (MAE)" id="idm46324231320880"/><a data-type="indexterm" data-primary="cost functions" data-secondary="mean absolute error (MAE)" id="idm46324231320208"/><a data-type="indexterm" data-primary="metrics" data-secondary="mean absolute error (MAE)" id="idm46324231319296"/> using the <em>mean absolute error</em> (MAE, also called the<a data-type="indexterm" data-primary="average absolute deviation" id="idm46324233962864"/> average absolute deviation; see <a data-type="xref" href="#mae_equation">Equation 2-2</a>):</p>
<div id="mae_equation" data-type="equation"><h5><span class="label">Equation 2-2. </span>Mean absolute error (MAE)</h5>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow>
    <mtext>MAE</mtext>
    <mrow>
      <mo>(</mo>
      <mi mathvariant="bold">X</mi>
      <mo>,</mo>
      <mi>h</mi>
      <mo>)</mo>
    </mrow>
    <mo>=</mo>
    <mfrac><mn>1</mn> <mi>m</mi></mfrac>
    <munderover><mo>∑</mo> <mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow> <mi>m</mi> </munderover>
    <mfenced separators="" open="|" close="|">
      <mi>h</mi>
      <mrow>
        <mo>(</mo>
        <msup><mi mathvariant="bold">x</mi> <mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow> </msup>
        <mo>)</mo>
      </mrow>
      <mo>-</mo>
      <msup><mi>y</mi> <mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow> </msup>
    </mfenced>
  </mrow>
</math>
</div>

<p>Both the RMSE and the MAE are ways to measure the distance between two vectors: the vector of predictions and the vector of target values. Various distance measures, or <em>norms</em>, are possible:</p>

<ul>
<li>
<p>Computing the root of a sum of squares (RMSE) corresponds<a data-type="indexterm" data-primary="Euclidean norm" id="idm46324233941552"/> to the <em>Euclidean norm</em>: this is the notion of distance you are familiar with. It is also called the ℓ<sub>2</sub> <em>norm</em>, noted ∥ · ∥<sub>2</sub> (or just ∥ · ∥).</p>
</li>
<li>
<p>Computing the sum of absolutes (MAE) corresponds to the ℓ<sub>1</sub> <em>norm</em>, noted ∥ · ∥<sub>1</sub>. This is sometimes<a data-type="indexterm" data-primary="Manhattan norm" id="idm46324233936528"/> called the <em>Manhattan norm</em> because it measures the distance between two points in a city if you can only travel along orthogonal city blocks.</p>
</li>
<li>
<p>More generally, the ℓ<sub><em>k</em></sub> <em>norm</em> of a vector <strong>v</strong> containing <em>n</em> elements is defined as ∥<strong>v</strong>∥<sub><em>k</em></sub> = (|<em>v</em><sub>0</sub>|<sup><em>k</em></sup> + |<em>v</em><sub>1</sub>|<sup><em>k</em></sup> + ... + |<em>v</em><sub><em>n</em></sub>|<sup><em>k</em></sup>)<sup>1/<em>k</em></sup>. ℓ<sub>0</sub> gives the number of nonzero elements in the vector, and ℓ<sub>∞</sub> gives the maximum absolute value in the vector.</p>
</li>
<li>
<p>The higher the norm index, the more it focuses on large values and neglects small ones. This is why the RMSE is more sensitive to outliers than the MAE. But when outliers are exponentially rare (like in a bell-shaped curve), the RMSE performs very well and is generally preferred.</p>
</li>
</ul>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Check the Assumptions"><div class="sect2" id="idm46324233924448">
<h2>Check the Assumptions</h2>

<p>Lastly, it<a data-type="indexterm" data-primary="example project" data-secondary="verifying assumptions" id="idm46324233923120"/> is good practice to list and verify the assumptions that have been made so far (by you or others); this can help you catch serious issues early on. For example, the district prices that your system outputs are going to be fed into a downstream Machine Learning system, and you assume that these prices are going to be used as such. But what if the downstream system converts the prices into categories (e.g., “cheap,” “medium,” or “expensive”) and then uses those categories instead of the prices themselves? In this case, getting the price perfectly right is not important at all; your system just needs to get the category right. If that’s so, then the problem should have been framed as a classification task, not a regression task. You don’t want to find this out after working on a regression system for months.</p>

<p>Fortunately, after talking with the team in charge of the downstream system, you are confident that they do indeed need the actual prices, not just categories. Great! You’re all set, the lights are green, and you can start coding now!</p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Get the Data"><div class="sect1" id="idm46324233921088">
<h1>Get the Data</h1>

<p>It’s<a data-type="indexterm" data-primary="example project" data-secondary="data downloading" id="EPdown02"/> time to get your hands dirty. Don’t hesitate to pick up your laptop and walk through the code examples. As I mentioned in the preface, all the code examples in this book are open source and available online at <a href="https://github.com/ageron/handson-ml3"><em class="hyperlink">https://github.com/ageron/handson-ml3</em></a>, as Jupyter notebooks, which are interactive documents containing text, images, and executable code snippets (Python in our case). In this book I will assume you are running these notebooks on Google Colab, a free service that lets you run any Jupyter notebook directly online, without having to install anything on your machine. But if you want to use another online platform (e.g., Kaggle kernels) or if you want to install everything locally on your own machine, please see the instructions on this project’s home page at the GitHub page (above).</p>








<section data-type="sect2" data-pdf-bookmark="Running the Code Examples Using Google Colab"><div class="sect2" id="idm46324233916928">
<h2>Running the Code Examples Using Google Colab</h2>

<p>First, open a web browser and visit <a href="https://homl.info/colab3"><em class="hyperlink">https://homl.info/colab3</em></a>: this will lead you to Google Colab, and it will display the list of Jupyter notebooks for this book (see <a data-type="xref" href="#google_colab_notebook_list">Figure 2-3</a>). You will find one notebook per chapter, plus a few extra notebooks, including an extra chapter on Support Vector Machines, and tutorials for NumPy, Matplotlib, Pandas, Linear Algebra and Differential Calculus.</p>

<figure><div id="google_colab_notebook_list" class="figure">
<img src="Images/mls3_0203.png" alt="mls3 0203" width="2254" height="1353"/>
<h6><span class="label">Figure 2-3. </span>List of notebooks in Google Colab</h6>
</div></figure>

<p>For example, if you click on <code>02_end_to_end_machine_learning_project.ipynb</code>, the notebook from <a data-type="xref" href="#project_chapter">Chapter 2</a> will open up in Google Colab (see <a data-type="xref" href="#notebook_in_colab">Figure 2-4</a>).</p>

<figure><div id="notebook_in_colab" class="figure">
<img src="Images/mls3_0204.png" alt="mls3 0204" width="1969" height="1415"/>
<h6><span class="label">Figure 2-4. </span>Your notebook in Google Colab</h6>
</div></figure>

<p>A Jupyter notebook is composed of a list of cells. Each cell contains either executable code or text. Try double-clicking on the first text cell (which contains the sentence “Welcome to Machine Learning Housing Corp.!”). This will open the cell for editing. Notice that Jupyter notebooks use Markdown syntax for formatting (e.g., <code>**bold**</code>, <code>*italics*</code>, <code># Title</code>, <code>[url](link text)</code>, and so on). Try modifying this text, then press <strong>Shift-Enter</strong> to see the result.</p>

<p>Next, create a new code cell by selecting Insert &gt; Code cell from the menu. Alternatively, you can click the <code>+ Code</code> button in the toolbar, or hover your mouse over the bottom of a cell until you see <code>+ Code</code> and <code>+ Text</code> appear, then click on <code>+ Code</code>. In the new code cell, type some Python code, such as <code>print("Hello World")</code> then press <strong>Shift-Enter</strong> to run this code (or click on the ▷ button on the left side of the cell).</p>

<p>If you are not logged in to your Google Account, you will be asked to login now (if you don’t already have a Google account, you will need to create one). Once you are logged in and you try to run the code, you will get a security warning telling you that this notebook was not authored by Google. Indeed, a malicious person could create a notebook that tries to trick you into entering your Google credentials so they can access your personal data. So before you run a notebook, always make sure you trust its author (or double-check what each code cell will do before running it). Now, assuming you trust me (or you plan to check every code cell), you can go ahead and click “Run anyway”.</p>

<p>Colab will then allocate a new <em>Runtime</em> for you: this is a free virtual machine located on Google’s servers, containing a bunch of tools and Python libraries, including everything we need for most chapters (in some chapters, we will need to run a command to install some additional libraries). This will take a few seconds. Next, Colab will automatically connect to this Runtime and use it to execute your new code cell. Importantly, the code runs on the Runtime, <em>not</em> on your machine. The code’s output will be displayed under the cell. Congrats, you’ve run some Python code on Colab!</p>
<div data-type="tip"><h6>Tip</h6>
<p>To insert a new code cell, you can also type <strong>Ctrl-m</strong> (or <strong>Cmd-m</strong> on macOS) followed by <strong>a</strong> (to insert <strong>a</strong>bove the active cell) or <strong>b</strong> (to insert <strong>b</strong>elow). There are many other keyboard shortcuts available: you can view and edit them by typing <strong>Ctrl-m</strong> (or <strong>Cmd-m</strong>) then <strong>h</strong>. If you choose to run the notebooks on Kaggle or on your own machine using JupyterLab or an IDE such as Visual Studio Code with the Jupyter extension, you will see some minor differences: Runtimes are called <em>Kernels</em>, the User Interface and keyboard shortcuts are slightly different, etc. But switching from one Jupyter environment to another is not too hard.</p>
</div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Saving Your Code Changes and Your Data"><div class="sect2" id="idm46324233916432">
<h2>Saving Your Code Changes and Your Data</h2>

<p>You can make changes to a Colab notebook, and they will persist for as long as you keep your browser tab open, but once you close it, the changes will be lost. To avoid this, make sure you save a copy of the notebook to your Google Drive by selecting File &gt; Save a copy in Drive. Alternatively, you can download the notebook to your computer by selecting File &gt; Download &gt; Download .ipynb. Either way, you can later visit <a href="https://colab.research.google.com/"><em class="hyperlink">https://colab.research.google.com/</em></a> and open the notebook again (either from Google Drive or by uploading it from your computer).</p>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>Google Colab is meant only for interactive use: you can play around in the notebooks and tweak the code as you like, but you cannot let the notebooks run unattended for a long period of time, or else the Runtime will be shutdown and all of its data will be lost.</p>
</div>

<p>If the notebook generates data that you care about, make sure you download this data before the Runtime shuts down. To do this, click on the Files icon (see step 1 in <a data-type="xref" href="#save_data_google_colab">Figure 2-5</a>), find the file you want to download, click on the vertical dots next to it (step 2), and click Download (step 3).</p>

<figure><div id="save_data_google_colab" class="figure">
<img src="Images/mls3_0205.png" alt="mls3 0205" width="1981" height="974"/>
<h6><span class="label">Figure 2-5. </span>Downloading a file from a Google Colab Runtime (steps 1 to 3), or mounting your Google Drive (circled icon)</h6>
</div></figure>

<p>Alternatively, you can mount your Google Drive on the Runtime, allowing the notebook to read and write files directly to Google Drive, as if it were a local directory. For this, click on the Files icon (step 1) then click on the Google Drive icon (circled in <a data-type="xref" href="#save_data_google_colab">Figure 2-5</a>) and follow the on-screen instructions. By default, your Google Drive will be mounted at <code>/content/drive/MyDrive</code>. If you want to backup a data file, simply copy it to this directory by running <code>!cp /content/my_great_model /content/drive/MyDrive</code>. Any command starting with a bang (<code>!</code>) is treated as a shell command, not as Python code: <code>cp</code> is the Linux shell command to copy a file from one path to another. Note that Colab Runtimes run on Linux (specifically, Ubuntu).</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="The Power and Danger of Interactivity"><div class="sect2" id="idm46324233881120">
<h2>The Power and Danger of Interactivity</h2>

<p>Jupyter notebooks are interactive, and that’s a great thing: you can run each cell one by one, stop at any point, insert a cell, play with the code, go back and run the same cell again, etc., and I highly encourage you to do so. If you just run the cells one by one without ever playing with them, you won’t learn as fast. However, this flexibility comes at a price: it’s very easy to run cells in the wrong order, or to forget to run a cell. If this happens, the subsequent code cells are likely to fail. For example, the very first code cell in each notebook contains setup code (such as imports), so make sure you run it first, or else nothing will work.</p>
<div data-type="tip"><h6>Tip</h6>
<p>If you ever run into a weird error, try restarting the Runtime (by selecting Runtime &gt; Restart runtime from the menu) and then run all the cells again from the beginning of the notebook: this will often solve the problem. If not, then it’s likely that one of the changes you made broke the notebook: just revert to the original notebook and try again. If it still fails, then please file an issue on GitHub.</p>
</div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Book Code vs Notebook Code"><div class="sect2" id="idm46324233878432">
<h2>Book Code vs Notebook Code</h2>

<p>You may sometimes notice some little differences between the code in this book and the code in the notebooks. This may happen for several reasons:</p>

<ul>
<li>
<p>A library may have changed slightly by the time you read these lines, or perhaps despite my best efforts I made an error in the book. Sadly, I cannot magically fix the code in your copy of this book (unless you are reading an electronic copy and you can download the latest version), but I <em>can</em> fix the notebooks: so if you run into an error after copying code from this book, please look for the fixed code in the notebooks: I will strive to keep them error-free and up-to-date with the latest library versions.</p>
</li>
<li>
<p>The notebooks contain some extra code to beautify the figures (adding labels, setting font size, etc.), and to save them in high resolution for this book. You can safely ignore this extra code if you want.</p>
</li>
</ul>

<p>I optimized the code for readability and simplicity: I made it as linear and flat as possible, defining very few functions or classes. The goal is to ensure that the code you are running is generally right in front of you, and not nested within several layers of abstractions that you have to search through. This also makes it easier for you to play with the code. For simplicity, there’s limited error handling, and I placed some of the least common imports right where they are needed (instead of placing them at the top of the file, as is recommended by the PEP 8 Python style guide). That said, your production code will not be very different: just a bit more modular, and with additional tests and error handling, that’s all.</p>

<p>OK! Once you’re comfortable with Colab, you’re ready to download the data.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Download the Data"><div class="sect2" id="download_the_data">
<h2>Download the Data</h2>

<p>In<a data-type="indexterm" data-primary="data" data-secondary="downloading" id="idm46324233871280"/> typical environments your data would be available in a relational database or some other common data store, and spread across multiple tables/documents/files. To access it, you would first need to get your credentials and access authorizations⁠<sup><a data-type="noteref" id="idm46324233869888-marker" href="ch02.xhtml#idm46324233869888">4</a></sup> and familiarize yourself with the data schema. In this project, however, things are much simpler: you will just download a single compressed file, <em>housing.tgz</em>, which contains a comma-separated values (CSV) file called <em>housing.csv</em> with all the data.</p>

<p>Rather than manually downloading and decompressing the data, it’s usually preferable to write a function that does it for you. This is useful in particular if the data changes regularly: you can write a small script that uses the function to fetch the latest data (or you can set up a scheduled job to do that automatically at regular intervals). Automating the process of fetching the data is also useful if you need to install the dataset on multiple machines.</p>

<p>Here is the function to fetch and load the data:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">pathlib</code> <code class="kn">import</code> <code class="n">Path</code>
<code class="kn">import</code> <code class="nn">pandas</code> <code class="kn">as</code> <code class="nn">pd</code>
<code class="kn">import</code> <code class="nn">tarfile</code>
<code class="kn">import</code> <code class="nn">urllib.request</code>

<code class="k">def</code> <code class="nf">load_housing_data</code><code class="p">():</code>
    <code class="n">tarball_path</code> <code class="o">=</code> <code class="n">Path</code><code class="p">(</code><code class="s2">"datasets/housing.tgz"</code><code class="p">)</code>
    <code class="k">if</code> <code class="ow">not</code> <code class="n">tarball_path</code><code class="o">.</code><code class="n">is_file</code><code class="p">():</code>
        <code class="n">Path</code><code class="p">(</code><code class="s2">"datasets"</code><code class="p">)</code><code class="o">.</code><code class="n">mkdir</code><code class="p">(</code><code class="n">parents</code><code class="o">=</code><code class="bp">True</code><code class="p">,</code> <code class="n">exist_ok</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>
        <code class="n">url</code> <code class="o">=</code> <code class="s2">"https://github.com/ageron/data/raw/main/housing.tgz"</code>
        <code class="n">urllib</code><code class="o">.</code><code class="n">request</code><code class="o">.</code><code class="n">urlretrieve</code><code class="p">(</code><code class="n">url</code><code class="p">,</code> <code class="n">tarball_path</code><code class="p">)</code>
        <code class="k">with</code> <code class="n">tarfile</code><code class="o">.</code><code class="n">open</code><code class="p">(</code><code class="n">tarball_path</code><code class="p">)</code> <code class="k">as</code> <code class="n">housing_tarball</code><code class="p">:</code>
            <code class="n">housing_tarball</code><code class="o">.</code><code class="n">extractall</code><code class="p">(</code><code class="n">path</code><code class="o">=</code><code class="s2">"datasets"</code><code class="p">)</code>
    <code class="k">return</code> <code class="n">pd</code><code class="o">.</code><code class="n">read_csv</code><code class="p">(</code><code class="n">Path</code><code class="p">(</code><code class="s2">"datasets/housing/housing.csv"</code><code class="p">))</code>

<code class="n">housing</code> <code class="o">=</code> <code class="n">load_housing_data</code><code class="p">()</code></pre>

<p>When <code>load_housing_data()</code> is called, it looks for the <em>datasets/housing.tgz</em> file, and if it does not find it, it creates the <em>datasets</em> directory inside the current directory (which is <em>/content</em> by default, in Colab), it downloads the <em>housing.tgz</em> file from the <em>ageron/data</em> GitHub repository, it extracts its content into the <em>datasets</em> directory, and this creates the <em>datasets</em>/<em>housing</em> directory with the <em>housing.csv</em> file inside it. Lastly, the function loads this CSV file into a Pandas DataFrame object containing all the data, and it returns it.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Take a Quick Look at the Data Structure"><div class="sect2" id="idm46324226292800">
<h2>Take a Quick Look at the Data Structure</h2>

<p>Let’s take a look at the top five rows of data using the DataFrame’s <code>head()</code> method (see <a data-type="xref" href="#housing_head_screenshot">Figure 2-6</a>).</p>

<figure><div id="housing_head_screenshot" class="figure">
<img src="Images/mls3_0206.png" alt="mls3 0206" width="2657" height="786"/>
<h6><span class="label">Figure 2-6. </span>Top five rows in the dataset</h6>
</div></figure>

<p>Each row represents one district. There are 10 attributes (they are not all shown in the screenshot): <code>longitude</code>, <code>latitude</code>, <code>housing_median_age</code>, <code>total_rooms</code>, <code>total_bedrooms</code>, <code>population</code>, <code>households</code>, <code>median_income</code>, <code>median_house_value</code>, and <code>ocean_proximity</code>.</p>

<p>The <code>info()</code> method is useful to get a quick description of the data, in particular the total number of rows, each attribute’s type, and the number of non-null values:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing</code><code class="o">.</code><code class="n">info</code><code class="p">()</code>
<code class="go">&lt;class 'pandas.core.frame.DataFrame'&gt;</code>
<code class="go">RangeIndex: 20640 entries, 0 to 20639</code>
<code class="go">Data columns (total 10 columns):</code>
<code class="go"> #   Column              Non-Null Count  Dtype</code>
<code class="go">---  ------              --------------  -----</code>
<code class="go"> 0   longitude           20640 non-null  float64</code>
<code class="go"> 1   latitude            20640 non-null  float64</code>
<code class="go"> 2   housing_median_age  20640 non-null  float64</code>
<code class="go"> 3   total_rooms         20640 non-null  float64</code>
<code class="go"> 4   total_bedrooms      20433 non-null  float64</code>
<code class="go"> 5   population          20640 non-null  float64</code>
<code class="go"> 6   households          20640 non-null  float64</code>
<code class="go"> 7   median_income       20640 non-null  float64</code>
<code class="go"> 8   median_house_value  20640 non-null  float64</code>
<code class="go"> 9   ocean_proximity     20640 non-null  object</code>
<code class="go">dtypes: float64(9), object(1)</code>
<code class="go">memory usage: 1.6+ MB</code></pre>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>In this book, when a code example contains a mix of code and outputs, as is the case here, it is formatted like in the Python interpreter, for better readability: the code lines are prefixed with <code>&gt;&gt;&gt;</code> (or <code>...</code> for indented blocks), and the outputs have no prefix.</p>
</div>

<p>There are 20,640 instances in the dataset, which means that it is fairly small by Machine Learning standards, but it’s perfect to get started. Notice that the <code>total_bedrooms</code> attribute has only 20,433 non-null values, meaning that 207 districts are missing this feature. We will need to take care of this later.</p>

<p>All attributes are numerical, except the <code>ocean_proximity</code> field. Its type is <code>object</code>, so it could hold any kind of Python object. But since you loaded this data from a CSV file, you know that it must be a text attribute. When you looked at the top five rows, you probably noticed that the values in the <code>ocean_proximity</code> column were repetitive, which means that it is probably a categorical attribute. You can find out what categories exist and how many districts belong to each category by using the <code>value_counts()</code> method:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing</code><code class="p">[</code><code class="s2">"ocean_proximity"</code><code class="p">]</code><code class="o">.</code><code class="n">value_counts</code><code class="p">()</code>
<code class="go">&lt;1H OCEAN     9136</code>
<code class="go">INLAND        6551</code>
<code class="go">NEAR OCEAN    2658</code>
<code class="go">NEAR BAY      2290</code>
<code class="go">ISLAND           5</code>
<code class="go">Name: ocean_proximity, dtype: int64</code></pre>

<p>Let’s look at the other fields. The <code>describe()</code> method shows a summary of the numerical attributes (<a data-type="xref" href="#housing_describe_screenshot">Figure 2-7</a>).</p>

<figure><div id="housing_describe_screenshot" class="figure">
<img src="Images/mls3_0207.png" alt="mls3 0207" width="2652" height="1060"/>
<h6><span class="label">Figure 2-7. </span>Summary of each numerical attribute</h6>
</div></figure>

<p>The <code>count</code>, <code>mean</code>, <code>min</code>, and <code>max</code> rows are self-explanatory. Note that the null values are ignored (so, for example, the <code>count</code> of <code>total_bedrooms</code> is 20,433, not 20,640). The <code>std</code> row shows the <em>standard deviation</em>, which measures how dispersed the values are.⁠<sup><a data-type="noteref" id="idm46324229784672-marker" href="ch02.xhtml#idm46324229784672">5</a></sup> The 25%, 50%, and 75% rows show the corresponding <em>percentiles</em>: a percentile indicates the value below which a given percentage of observations in a group of observations fall. For example, 25% of the districts have a <code>housing_median_age</code> lower than 18, while 50% are lower than 29 and 75% are lower than 37. These are often called the 25th percentile (or first <em>quartile</em>), the median, and the 75th percentile (or third <span class="keep-together">quartile</span>).</p>

<p>Another quick way to get a feel of the type of data you are dealing with is to plot a histogram for each numerical attribute. A histogram shows the number of instances (on the vertical axis) that have a given value range (on the horizontal axis). You can either plot this one attribute at a time, or you can call the <code>hist()</code> method on the whole dataset (as shown in the following code example), and it will plot a histogram for each numerical attribute (see <a data-type="xref" href="#attribute_histogram_plots">Figure 2-8</a>):</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">import</code> <code class="nn">matplotlib.pyplot</code> <code class="kn">as</code> <code class="nn">plt</code>

<code class="n">housing</code><code class="o">.</code><code class="n">hist</code><code class="p">(</code><code class="n">bins</code><code class="o">=</code><code class="mi">50</code><code class="p">,</code> <code class="n">figsize</code><code class="o">=</code><code class="p">(</code><code class="mi">12</code><code class="p">,</code> <code class="mi">8</code><code class="p">))</code>
<code class="n">plt</code><code class="o">.</code><code class="n">show</code><code class="p">()</code></pre>

<figure><div id="attribute_histogram_plots" class="figure">
<img src="Images/mls3_0208.png" alt="mls3 0208" width="3497" height="2300"/>
<h6><span class="label">Figure 2-8. </span>A histogram for each numerical attribute</h6>
</div></figure>

<p>There are a few things you might notice in these histograms:</p>
<ol>
<li>
<p>First, the median income attribute does not look like it is expressed in US dollars (USD). After checking with the team that collected the data, you are told that the data has been scaled and capped at 15 (actually, 15.0001) for higher median incomes, and at 0.5 (actually, 0.4999) for lower median incomes. The numbers represent roughly tens of thousands of dollars (e.g., 3 actually means about $30,000). Working with preprocessed attributes is common in Machine Learning, and it is not necessarily a problem, but you should try to understand how the data was computed.</p>
</li>
<li>
<p>The housing median age and the median house value were also capped. The latter may be a serious problem since it is your target attribute (your labels). Your Machine Learning algorithms may learn that prices never go beyond that limit. You need to check with your client team (the team that will use your system’s output) to see if this is a problem or not. If they tell you that they need precise predictions even beyond $500,000, then you have two options:</p>
<ol>
<li>
<p>Collect proper labels for the districts whose labels were capped.</p>
</li>
<li>
<p>Remove those districts from the training set (and also from the test set, since your system should not be evaluated poorly if it predicts values beyond $500,000).</p>
</li>

</ol>
</li>
<li>
<p>These attributes have very different scales. We will discuss this later in this chapter, when we explore feature scaling.</p>
</li>
<li>
<p>Finally, many<a data-type="indexterm" data-primary="skewed distribution" id="idm46324230864544"/> histograms are <em>skewed right</em>: they extend much farther to the right of the median than to the left. This may make it a bit harder for some Machine Learning algorithms to detect patterns. We will try transforming these attributes later on to have more symmetrical and bell-shaped distributions.</p>
</li>

</ol>

<p>Hopefully you now have a better understanding of the kind of data you are dealing with.</p>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>Wait! Before you look at the data any further, you need to create a test set, put it aside, and never look at it.</p>
</div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Create a Test Set"><div class="sect2" id="create_a_test_set">
<h2>Create a Test Set</h2>

<p>It<a data-type="indexterm" data-primary="test sets" id="idm46324230859312"/><a data-type="indexterm" data-primary="data snooping bias" id="idm46324230858576"/> may sound strange to voluntarily set aside part of the data at this stage. After all, you have only taken a quick glance at the data, and surely you should learn a whole lot more about it before you decide what algorithms to use, right? This is true, but your brain is an amazing pattern detection system, which also means that it is highly prone to overfitting: if you look at the test set, you may stumble upon some seemingly interesting pattern in the test data that leads you to select a particular kind of Machine Learning model. When you estimate the generalization error using the test set, your estimate will be too optimistic, and you will launch a system that will not perform as well as expected. This is called <em>data snooping</em> bias.</p>

<p>Creating a test set is theoretically simple: pick some instances randomly, typically 20% of the dataset (or less if your dataset is very large), and set them aside:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">import</code> <code class="nn">numpy</code> <code class="kn">as</code> <code class="nn">np</code>

<code class="k">def</code> <code class="nf">shuffle_and_split_data</code><code class="p">(</code><code class="n">data</code><code class="p">,</code> <code class="n">test_ratio</code><code class="p">):</code>
    <code class="n">shuffled_indices</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">random</code><code class="o">.</code><code class="n">permutation</code><code class="p">(</code><code class="nb">len</code><code class="p">(</code><code class="n">data</code><code class="p">))</code>
    <code class="n">test_set_size</code> <code class="o">=</code> <code class="nb">int</code><code class="p">(</code><code class="nb">len</code><code class="p">(</code><code class="n">data</code><code class="p">)</code> <code class="o">*</code> <code class="n">test_ratio</code><code class="p">)</code>
    <code class="n">test_indices</code> <code class="o">=</code> <code class="n">shuffled_indices</code><code class="p">[:</code><code class="n">test_set_size</code><code class="p">]</code>
    <code class="n">train_indices</code> <code class="o">=</code> <code class="n">shuffled_indices</code><code class="p">[</code><code class="n">test_set_size</code><code class="p">:]</code>
    <code class="k">return</code> <code class="n">data</code><code class="o">.</code><code class="n">iloc</code><code class="p">[</code><code class="n">train_indices</code><code class="p">],</code> <code class="n">data</code><code class="o">.</code><code class="n">iloc</code><code class="p">[</code><code class="n">test_indices</code><code class="p">]</code></pre>

<p>You can then use this function like this:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">train_set</code><code class="p">,</code> <code class="n">test_set</code> <code class="o">=</code> <code class="n">shuffle_and_split_data</code><code class="p">(</code><code class="n">housing</code><code class="p">,</code> <code class="mf">0.2</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="nb">len</code><code class="p">(</code><code class="n">train_set</code><code class="p">)</code>
<code class="go">16512</code>
<code class="gp">&gt;&gt;&gt; </code><code class="nb">len</code><code class="p">(</code><code class="n">test_set</code><code class="p">)</code>
<code class="go">4128</code></pre>

<p>Well, this works, but it is not perfect: if you run the program again, it will generate a different test set! Over time, you (or your Machine Learning algorithms) will get to see the whole dataset, which is what you want to avoid.</p>

<p>One solution is to save the test set on the first run and then load it in subsequent runs. Another option is to set the random number generator’s seed (e.g., with <code>np.random.seed(42)</code>)⁠<sup><a data-type="noteref" id="idm46324216367296-marker" href="ch02.xhtml#idm46324216367296">6</a></sup> before calling <code>np.random.permutation()</code> so that it always generates the same shuffled indices.</p>

<p>But both these solutions will break the next time you fetch an updated dataset. To have a stable train/test split even after updating the dataset, a common solution is to use each instance’s identifier to decide whether or not it should go in the test set (assuming instances have a unique and immutable identifier). For example, you could compute a hash of each instance’s identifier and put that instance in the test set if the hash is lower than or equal to 20% of the maximum hash value. This ensures that the test set will remain consistent across multiple runs, even if you refresh the dataset. The new test set will contain 20% of the new instances, but it will not contain any instance that was previously in the training set.</p>

<p>Here is a possible implementation:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">zlib</code> <code class="kn">import</code> <code class="n">crc32</code>

<code class="k">def</code> <code class="nf">is_id_in_test_set</code><code class="p">(</code><code class="n">identifier</code><code class="p">,</code> <code class="n">test_ratio</code><code class="p">):</code>
    <code class="k">return</code> <code class="n">crc32</code><code class="p">(</code><code class="n">np</code><code class="o">.</code><code class="n">int64</code><code class="p">(</code><code class="n">identifier</code><code class="p">))</code> <code class="o">&lt;</code> <code class="n">test_ratio</code> <code class="o">*</code> <code class="mi">2</code><code class="o">**</code><code class="mi">32</code>

<code class="k">def</code> <code class="nf">split_data_with_id_hash</code><code class="p">(</code><code class="n">data</code><code class="p">,</code> <code class="n">test_ratio</code><code class="p">,</code> <code class="n">id_column</code><code class="p">):</code>
    <code class="n">ids</code> <code class="o">=</code> <code class="n">data</code><code class="p">[</code><code class="n">id_column</code><code class="p">]</code>
    <code class="n">in_test_set</code> <code class="o">=</code> <code class="n">ids</code><code class="o">.</code><code class="n">apply</code><code class="p">(</code><code class="k">lambda</code> <code class="n">id_</code><code class="p">:</code> <code class="n">is_id_in_test_set</code><code class="p">(</code><code class="n">id_</code><code class="p">,</code> <code class="n">test_ratio</code><code class="p">))</code>
    <code class="k">return</code> <code class="n">data</code><code class="o">.</code><code class="n">loc</code><code class="p">[</code><code class="o">~</code><code class="n">in_test_set</code><code class="p">],</code> <code class="n">data</code><code class="o">.</code><code class="n">loc</code><code class="p">[</code><code class="n">in_test_set</code><code class="p">]</code></pre>

<p>Unfortunately, the housing dataset does not have an identifier column. The simplest solution is to use the row index as the ID:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing_with_id</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">reset_index</code><code class="p">()</code>  <code class="c1"># adds an `index` column</code>
<code class="n">train_set</code><code class="p">,</code> <code class="n">test_set</code> <code class="o">=</code> <code class="n">split_data_with_id_hash</code><code class="p">(</code><code class="n">housing_with_id</code><code class="p">,</code> <code class="mf">0.2</code><code class="p">,</code> <code class="s2">"index"</code><code class="p">)</code></pre>

<p>If you use the row index as a unique identifier, you need to make sure that new data gets appended to the end of the dataset and that no row ever gets deleted. If this is not possible, then you can try to use the most stable features to build a unique identifier. For example, a district’s latitude and longitude are guaranteed to be stable for a few million years, so you could combine them into an ID like so:⁠<sup><a data-type="noteref" id="idm46324216244192-marker" href="ch02.xhtml#idm46324216244192">7</a></sup></p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing_with_id</code><code class="p">[</code><code class="s2">"id"</code><code class="p">]</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"longitude"</code><code class="p">]</code> <code class="o">*</code> <code class="mi">1000</code> <code class="o">+</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"latitude"</code><code class="p">]</code>
<code class="n">train_set</code><code class="p">,</code> <code class="n">test_set</code> <code class="o">=</code> <code class="n">split_data_with_id_hash</code><code class="p">(</code><code class="n">housing_with_id</code><code class="p">,</code> <code class="mf">0.2</code><code class="p">,</code> <code class="s2">"id"</code><code class="p">)</code></pre>

<p>Scikit-Learn<a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="splitting datasets into subsets" id="idm46324216161168"/> provides a few functions to split datasets into multiple subsets in various ways. The simplest function is <code>train_test_split()</code>, which does pretty much the same thing as the function <code>shuffle_and_split_data()</code> we defined earlier, with a couple of additional features. First, there is a <code>random_state</code> parameter that allows you to set the random generator seed. Second, you can pass it multiple datasets with an identical number of rows, and it will split them on the same indices (this is very useful, for example, if you have a separate DataFrame for labels):</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.model_selection</code> <code class="kn">import</code> <code class="n">train_test_split</code>

<code class="n">train_set</code><code class="p">,</code> <code class="n">test_set</code> <code class="o">=</code> <code class="n">train_test_split</code><code class="p">(</code><code class="n">housing</code><code class="p">,</code> <code class="n">test_size</code><code class="o">=</code><code class="mf">0.2</code><code class="p">,</code> <code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">)</code></pre>

<p>So far we have considered purely random sampling methods. This is generally fine if your dataset is large enough (especially relative to the number of attributes), but if it is not, you run the risk of introducing a significant sampling bias. When a survey company decides to call 1,000 people to ask them a few questions, they don’t just pick 1,000 people randomly in a phone book. They try to ensure that these 1,000 people are representative of the whole population, with regards to the questions they want to ask. For example, the US population is 51.1% females and 48.9% males, so a well-conducted survey in the US would try to maintain this ratio in the sample: 511 female and 489 male (at least if we believe that the answers may vary across genders). This<a data-type="indexterm" data-primary="stratified sampling" id="idm46324216142976"/> is called <em>stratified sampling</em>: the population is divided into homogeneous subgroups called <em>strata</em>, and the right number of instances are sampled from each stratum to guarantee that the test set is representative of the overall population. If the people running the survey used purely random sampling, there would be about 10.7% chance of sampling a skewed test set with less than 48.5% female or more than 53.5% female. Either way, the survey results would likely be quite biased.</p>

<p>Suppose you chatted with experts who told you that the median income is a very important attribute to predict median housing prices. You may want to ensure that the test set is representative of the various categories of incomes in the whole dataset. Since the median income is a continuous numerical attribute, you first need to create an income category attribute. Let’s look at the median income histogram more closely (back in <a data-type="xref" href="#attribute_histogram_plots">Figure 2-8</a>): most median income values are clustered around 1.5 to 6 (i.e., $15,000–$60,000), but some median incomes go far beyond 6. It is important to have a sufficient number of instances in your dataset for each stratum, or else the estimate of a stratum’s importance may be biased. This means that you should not have too many strata, and each stratum should be large enough. The following code uses the <code>pd.cut()</code> function to create an income category attribute with five categories (labeled from 1 to 5): category 1 ranges from 0 to 1.5 (i.e., less than $15,000), category 2 from 1.5 to 3, and so on:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing</code><code class="p">[</code><code class="s2">"income_cat"</code><code class="p">]</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">cut</code><code class="p">(</code><code class="n">housing</code><code class="p">[</code><code class="s2">"median_income"</code><code class="p">],</code>
                               <code class="n">bins</code><code class="o">=</code><code class="p">[</code><code class="mf">0.</code><code class="p">,</code> <code class="mf">1.5</code><code class="p">,</code> <code class="mf">3.0</code><code class="p">,</code> <code class="mf">4.5</code><code class="p">,</code> <code class="mf">6.</code><code class="p">,</code> <code class="n">np</code><code class="o">.</code><code class="n">inf</code><code class="p">],</code>
                               <code class="n">labels</code><code class="o">=</code><code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="p">])</code></pre>

<p>These income categories are represented in <a data-type="xref" href="#housing_income_cat_bar_plot">Figure 2-9</a>:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing</code><code class="p">[</code><code class="s2">"income_cat"</code><code class="p">]</code><code class="o">.</code><code class="n">value_counts</code><code class="p">()</code><code class="o">.</code><code class="n">sort_index</code><code class="p">()</code><code class="o">.</code><code class="n">plot</code><code class="o">.</code><code class="n">bar</code><code class="p">(</code><code class="n">rot</code><code class="o">=</code><code class="mi">0</code><code class="p">,</code> <code class="n">grid</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">xlabel</code><code class="p">(</code><code class="s2">"Income category"</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">ylabel</code><code class="p">(</code><code class="s2">"Number of districts"</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">show</code><code class="p">()</code></pre>

<figure class="smallerseventy"><div id="housing_income_cat_bar_plot" class="figure">
<img src="Images/mls3_0209.png" alt="mls3 0209" width="1676" height="1073"/>
<h6><span class="label">Figure 2-9. </span>Histogram of income categories</h6>
</div></figure>

<p>Now<a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="stratified sampling using" id="idm46324215981120"/> you are ready to do stratified sampling based on the income category. Scikit-Learn provides a number of splitter classes in the <code>sklearn.model_selection</code> package, which implement various strategies to split your dataset into a train set and a test set. Each splitter has a <code>split()</code> method which returns an iterator over different train/test splits of the same data. To be precise, the <code>split()</code> method yields the train and test <em>indices</em>, not the data itself. Having multiple splits can be useful if you want to better estimate the performance of your model, as we will see when we discuss cross-validation later in this chapter. For example, the following code generates 10 different stratified splits of the same dataset:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.model_selection</code> <code class="kn">import</code> <code class="n">StratifiedShuffleSplit</code>

<code class="n">splitter</code> <code class="o">=</code> <code class="n">StratifiedShuffleSplit</code><code class="p">(</code><code class="n">n_splits</code><code class="o">=</code><code class="mi">10</code><code class="p">,</code> <code class="n">test_size</code><code class="o">=</code><code class="mf">0.2</code><code class="p">,</code> <code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">)</code>
<code class="n">strat_splits</code> <code class="o">=</code> <code class="p">[]</code>
<code class="k">for</code> <code class="n">train_index</code><code class="p">,</code> <code class="n">test_index</code> <code class="ow">in</code> <code class="n">splitter</code><code class="o">.</code><code class="n">split</code><code class="p">(</code><code class="n">housing</code><code class="p">,</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"income_cat"</code><code class="p">]):</code>
    <code class="n">strat_train_set_n</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">loc</code><code class="p">[</code><code class="n">train_index</code><code class="p">]</code>
    <code class="n">strat_test_set_n</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">loc</code><code class="p">[</code><code class="n">test_index</code><code class="p">]</code>
    <code class="n">strat_splits</code><code class="o">.</code><code class="n">append</code><code class="p">([</code><code class="n">strat_train_set_n</code><code class="p">,</code> <code class="n">strat_test_set_n</code><code class="p">])</code></pre>

<p>For now, we can just use the first split:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">strat_train_set</code><code class="p">,</code> <code class="n">strat_test_set</code> <code class="o">=</code> <code class="n">strat_splits</code><code class="p">[</code><code class="mi">0</code><code class="p">]</code></pre>

<p>Since stratified sampling is fairly common, there’s a shorter way to get a single split using the <code>train_test_split()</code> function with the <code>stratify</code> argument:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">strat_train_set</code><code class="p">,</code> <code class="n">strat_test_set</code> <code class="o">=</code> <code class="n">train_test_split</code><code class="p">(</code>
    <code class="n">housing</code><code class="p">,</code> <code class="n">test_size</code><code class="o">=</code><code class="mf">0.2</code><code class="p">,</code> <code class="n">stratify</code><code class="o">=</code><code class="n">housing</code><code class="p">[</code><code class="s2">"income_cat"</code><code class="p">],</code> <code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">)</code></pre>

<p>Let’s see if this worked as expected. You can start by looking at the income category proportions in the test set:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">strat_test_set</code><code class="p">[</code><code class="s2">"income_cat"</code><code class="p">]</code><code class="o">.</code><code class="n">value_counts</code><code class="p">()</code> <code class="o">/</code> <code class="nb">len</code><code class="p">(</code><code class="n">strat_test_set</code><code class="p">)</code>
<code class="go">3    0.350533</code>
<code class="go">2    0.318798</code>
<code class="go">4    0.176357</code>
<code class="go">5    0.114341</code>
<code class="go">1    0.039971</code>
<code class="go">Name: income_cat, dtype: float64</code></pre>

<p>With similar code you can measure the income category proportions in the full dataset. <a data-type="xref" href="#compare_sampling_errors_screenshot">Figure 2-10</a> compares the income category proportions in the overall dataset, in the test set generated with stratified sampling, and in a test set generated using purely random sampling. As you can see, the test set generated using stratified sampling has income category proportions almost identical to those in the full dataset, whereas the test set generated using purely random sampling is skewed.</p>

<figure class="smallerseventy"><div id="compare_sampling_errors_screenshot" class="figure">
<img src="Images/mls3_0210.png" alt="mls3 0210" width="2247" height="745"/>
<h6><span class="label">Figure 2-10. </span>Sampling bias comparison of stratified versus purely random sampling</h6>
</div></figure>

<p>Now we won’t use the <code>income_cat</code> column anymore so we might as well drop it, reverting the data back to its original state:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">for</code> <code class="n">set_</code> <code class="ow">in</code> <code class="p">(</code><code class="n">strat_train_set</code><code class="p">,</code> <code class="n">strat_test_set</code><code class="p">):</code>
    <code class="n">set_</code><code class="o">.</code><code class="n">drop</code><code class="p">(</code><code class="s2">"income_cat"</code><code class="p">,</code> <code class="n">axis</code><code class="o">=</code><code class="mi">1</code><code class="p">,</code> <code class="n">inplace</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code></pre>

<p>We spent quite a bit of time on test set generation for a good reason: this is an often neglected but critical part of a Machine Learning project. Moreover, many of these ideas will be useful later when we discuss cross-validation. Now it’s time to move on to the next stage: exploring the data.<a data-type="indexterm" data-primary="" data-startref="EPdown02" id="idm46324215666704"/></p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Discover and Visualize the Data to Gain Insights"><div class="sect1" id="idm46324230860416">
<h1>Discover and Visualize the Data to Gain Insights</h1>

<p>So<a data-type="indexterm" data-primary="example project" data-secondary="data visualization" id="EPvisual02"/><a data-type="indexterm" data-primary="data visualization" data-secondary="test, training, and exploration sets" id="idm46324215663568"/><a data-type="indexterm" data-primary="exploration sets" id="idm46324215693184"/> far you have only taken a quick glance at the data to get a general understanding of the kind of data you are manipulating. Now the goal is to go into a little more depth.</p>

<p>First, make sure you have put the test set aside and you are only exploring the training set. Also, if the training set is very large, you may want to sample an exploration set, to make manipulations easy and fast during the exploration phase. In our case, the training set is quite small, so we can just work directly on the full set. Since you’re going to experiment with various transformations of the training set, you should make a copy of the original so you can revert to it afterwards:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing</code> <code class="o">=</code> <code class="n">strat_train_set</code><code class="o">.</code><code class="n">copy</code><code class="p">()</code></pre>








<section data-type="sect2" data-pdf-bookmark="Visualizing Geographical Data"><div class="sect2" id="idm46324215682448">
<h2>Visualizing Geographical Data</h2>

<p>Since<a data-type="indexterm" data-primary="data visualization" data-secondary="geographical data" id="idm46324215688208"/><a data-type="indexterm" data-primary="data" data-secondary="geographical data" id="idm46324215687296"/> there is geographical information (latitude and longitude), it is a good idea to create a scatterplot of all districts to visualize the data (<a data-type="xref" href="#bad_visualization_plot">Figure 2-11</a>):</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing</code><code class="o">.</code><code class="n">plot</code><code class="p">(</code><code class="n">kind</code><code class="o">=</code><code class="s2">"scatter"</code><code class="p">,</code> <code class="n">x</code><code class="o">=</code><code class="s2">"longitude"</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="s2">"latitude"</code><code class="p">,</code> <code class="n">grid</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">show</code><code class="p">()</code></pre>

<figure class="smallerseventy"><div id="bad_visualization_plot" class="figure">
<img src="Images/mls3_0211.png" alt="mls3 0211" width="1702" height="1109"/>
<h6><span class="label">Figure 2-11. </span>A geographical scatterplot of the data</h6>
</div></figure>

<p>This looks like California all right, but other than that it is hard to see any particular pattern. Setting the <code>alpha</code> option to <code>0.2</code> makes it much easier to visualize the places where there is a high density of data points (<a data-type="xref" href="#better_visualization_plot">Figure 2-12</a>):</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing</code><code class="o">.</code><code class="n">plot</code><code class="p">(</code><code class="n">kind</code><code class="o">=</code><code class="s2">"scatter"</code><code class="p">,</code> <code class="n">x</code><code class="o">=</code><code class="s2">"longitude"</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="s2">"latitude"</code><code class="p">,</code> <code class="n">grid</code><code class="o">=</code><code class="bp">True</code><code class="p">,</code> <code class="n">alpha</code><code class="o">=</code><code class="mf">0.2</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">show</code><code class="p">()</code></pre>

<figure class="smallerseventy"><div id="better_visualization_plot" class="figure">
<img src="Images/mls3_0212.png" alt="mls3 0212" width="1702" height="1109"/>
<h6><span class="label">Figure 2-12. </span>A better visualization that highlights high-density areas</h6>
</div></figure>

<p>Now that’s much better: you can clearly see the high-density areas, namely the Bay Area and around Los Angeles and San Diego, plus a long line of fairly high density in the Central Valley, in particular around Sacramento and Fresno.</p>

<p>Our brains are very good at spotting patterns in pictures, but you may need to play around with visualization parameters to make the patterns stand out.</p>

<p>Now let’s look at the housing prices (<a data-type="xref" href="#housing_prices_scatterplot">Figure 2-13</a>). The radius of each circle represents the district’s population (option <code>s</code>), and the color represents the price (option <code>c</code>). We will use a predefined color map (option <code>cmap</code>) called <code>jet</code>, which ranges from blue (low values) to red (high prices):⁠<sup><a data-type="noteref" id="idm46324215545664-marker" href="ch02.xhtml#idm46324215545664">8</a></sup></p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing</code><code class="o">.</code><code class="n">plot</code><code class="p">(</code><code class="n">kind</code><code class="o">=</code><code class="s2">"scatter"</code><code class="p">,</code> <code class="n">x</code><code class="o">=</code><code class="s2">"longitude"</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="s2">"latitude"</code><code class="p">,</code> <code class="n">grid</code><code class="o">=</code><code class="bp">True</code><code class="p">,</code>
             <code class="n">s</code><code class="o">=</code><code class="n">housing</code><code class="p">[</code><code class="s2">"population"</code><code class="p">]</code> <code class="o">/</code> <code class="mi">100</code><code class="p">,</code> <code class="n">label</code><code class="o">=</code><code class="s2">"population"</code><code class="p">,</code>
             <code class="n">c</code><code class="o">=</code><code class="s2">"median_house_value"</code><code class="p">,</code> <code class="n">cmap</code><code class="o">=</code><code class="s2">"jet"</code><code class="p">,</code> <code class="n">colorbar</code><code class="o">=</code><code class="bp">True</code><code class="p">,</code>
             <code class="n">legend</code><code class="o">=</code><code class="bp">True</code><code class="p">,</code> <code class="n">sharex</code><code class="o">=</code><code class="bp">False</code><code class="p">,</code> <code class="n">figsize</code><code class="o">=</code><code class="p">(</code><code class="mi">10</code><code class="p">,</code> <code class="mi">7</code><code class="p">))</code>
<code class="n">plt</code><code class="o">.</code><code class="n">show</code><code class="p">()</code></pre>

<figure><div id="housing_prices_scatterplot" class="figure">
<img src="Images/mls3_0213.png" alt="mls3 0213" width="2852" height="2006"/>
<h6><span class="label">Figure 2-13. </span>California housing prices: red is expensive, blue is cheap, larger circles indicate areas with a larger population</h6>
</div></figure>

<p>This image tells you that the housing prices are very much related to the location (e.g., close to the ocean) and to the population density, as you probably knew already. A clustering algorithm should be useful for detecting the main cluster and for adding new features that measure the proximity to the cluster centers. The ocean proximity attribute may be useful as well, although in Northern California the housing prices in coastal districts are not too high, so it is not a simple rule.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Looking for Correlations"><div class="sect2" id="idm46324215689056">
<h2>Looking for Correlations</h2>

<p>Since<a data-type="indexterm" data-primary="data visualization" data-secondary="computing correlations" id="idm46324215488192"/><a data-type="indexterm" data-primary="Pearson’s r" id="idm46324215487184"/><a data-type="indexterm" data-primary="standard correlation coefficient" id="idm46324215486512"/><a data-type="indexterm" data-primary="correlation coefficient" id="idm46324215485872"/> the dataset is not too large, you can easily compute the <em>standard correlation coefficient</em> (also called <em>Pearson’s r</em>) between every pair of attributes using the <code>corr()</code> method:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">corr_matrix</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">corr</code><code class="p">()</code></pre>

<p>Now let’s look at how much each attribute correlates with the median house value:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">corr_matrix</code><code class="p">[</code><code class="s2">"median_house_value"</code><code class="p">]</code><code class="o">.</code><code class="n">sort_values</code><code class="p">(</code><code class="n">ascending</code><code class="o">=</code><code class="kc">False</code><code class="p">)</code>
<code class="go">median_house_value    1.000000</code>
<code class="go">median_income         0.688380</code>
<code class="go">total_rooms           0.137455</code>
<code class="go">housing_median_age    0.102175</code>
<code class="go">households            0.071426</code>
<code class="go">total_bedrooms        0.054635</code>
<code class="go">population           -0.020153</code>
<code class="go">longitude            -0.050859</code>
<code class="go">latitude             -0.139584</code>
<code class="go">Name: median_house_value, dtype: float64</code></pre>

<p>The correlation coefficient ranges from –1 to 1. When it is close to 1, it means that there is a strong positive correlation; for example, the median house value tends to go up when the median income goes up. When the coefficient is close to –1, it means that there is a strong negative correlation; you can see a small negative correlation between the latitude and the median house value (i.e., prices have a slight tendency to go down when you go north). Finally, coefficients close to 0 mean that there is no linear correlation.</p>

<p>Another way to check for correlation between attributes is to use the Pandas <span class="keep-together"><code>scatter_matrix()</code></span> function, which plots every numerical attribute against every other numerical attribute. Since there are now 11 numerical attributes, you would get 11<sup>2</sup> = 121 plots, which would not fit on a page—so let’s just focus on a few promising attributes that seem most correlated with the median housing value (<a data-type="xref" href="#scatter_matrix_plot">Figure 2-14</a>):</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">pandas.plotting</code> <code class="kn">import</code> <code class="n">scatter_matrix</code>

<code class="n">attributes</code> <code class="o">=</code> <code class="p">[</code><code class="s2">"median_house_value"</code><code class="p">,</code> <code class="s2">"median_income"</code><code class="p">,</code> <code class="s2">"total_rooms"</code><code class="p">,</code>
              <code class="s2">"housing_median_age"</code><code class="p">]</code>
<code class="n">scatter_matrix</code><code class="p">(</code><code class="n">housing</code><code class="p">[</code><code class="n">attributes</code><code class="p">],</code> <code class="n">figsize</code><code class="o">=</code><code class="p">(</code><code class="mi">12</code><code class="p">,</code> <code class="mi">8</code><code class="p">))</code>
<code class="n">plt</code><code class="o">.</code><code class="n">show</code><code class="p">()</code></pre>

<figure><div id="scatter_matrix_plot" class="figure">
<img src="Images/mls3_0214.png" alt="mls3 0214" width="3508" height="2354"/>
<h6><span class="label">Figure 2-14. </span>This scatter matrix plots every numerical attribute against every other numerical attribute, plus a histogram of each numerical attribute’s values on the main diagonal (top left to bottom right)</h6>
</div></figure>

<p>The main diagonal would be full of straight lines if Pandas plotted each variable against itself, which would not be very useful. So instead Pandas displays a histogram of each attribute (other options are available; see Pandas’ documentation for more details).</p>

<p>Looking at the correlation scatterplots, it seems like the most promising attribute to predict the median house value is the median income, so let’s zoom in on their scatterplot (<a data-type="xref" href="#income_vs_house_value_scatterplot">Figure 2-15</a>):</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing</code><code class="o">.</code><code class="n">plot</code><code class="p">(</code><code class="n">kind</code><code class="o">=</code><code class="s2">"scatter"</code><code class="p">,</code> <code class="n">x</code><code class="o">=</code><code class="s2">"median_income"</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="s2">"median_house_value"</code><code class="p">,</code>
             <code class="n">alpha</code><code class="o">=</code><code class="mf">0.1</code><code class="p">,</code> <code class="n">grid</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">show</code><code class="p">()</code></pre>

<figure class="smallereighty"><div id="income_vs_house_value_scatterplot" class="figure">
<img src="Images/mls3_0215.png" alt="mls3 0215" width="1708" height="1110"/>
<h6><span class="label">Figure 2-15. </span>Median income versus median house value</h6>
</div></figure>

<p>This plot reveals a few things. First, the correlation is indeed quite strong; you can clearly see the upward trend, and the points are not too dispersed. Second, the price cap that we noticed earlier is clearly visible as a horizontal line at $500,000. But this plot reveals other less obvious straight lines: a horizontal line around $450,000, another around $350,000, perhaps one around $280,000, and a few more below that. You may want to try removing the corresponding districts to prevent your algorithms from learning to reproduce these data quirks.</p>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>The correlation coefficient only measures linear correlations (“as <em>x</em> goes up, <em>y</em> generally goes up/down”). It may completely miss out on nonlinear relationships (e.g., “as <em>x</em> approaches 0, <em>y</em> generally goes up”). <a data-type="xref" href="#correlation_coefficient_plots">Figure 2-16</a> shows a variety of datasets along with their correlation coefficient. Note how all the plots of the bottom row have a correlation coefficient equal to 0, despite the fact that their axes are clearly <em>not</em> independent: these are examples of nonlinear relationships. Also, the second row shows examples where the correlation coefficient is equal to 1 or –1; notice that this has nothing to do with the slope. For example, your height in inches has a correlation coefficient of 1 with your height in feet or in nanometers.</p>
</div>

<figure><div id="correlation_coefficient_plots" class="figure">
<img src="Images/mls3_0216.png" alt="mls3 0216" width="2409" height="1049"/>
<h6><span class="label">Figure 2-16. </span>Standard correlation coefficient of various datasets (source: Wikipedia; public domain image)</h6>
</div></figure>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Experimenting with Attribute Combinations"><div class="sect2" id="idm46324215196288">
<h2>Experimenting with Attribute Combinations</h2>

<p>Hopefully<a data-type="indexterm" data-primary="data visualization" data-secondary="attribute combinations" id="idm46324215194912"/> the previous sections gave you an idea of a few ways you can explore the data and gain insights. You identified a few data quirks that you may want to clean up before feeding the data to a Machine Learning algorithm, and you found interesting correlations between attributes, in particular with the target attribute. You also noticed that some attributes have a skewed-right distribution, so you may want to transform them (e.g., by computing their logarithm or square root). Of course, your mileage will vary considerably with each project, but the general ideas are similar.</p>

<p>One last thing you may want to do before preparing the data for Machine Learning algorithms is to try out various attribute combinations. For example, the total number of rooms in a district is not very useful if you don’t know how many households there are. What you really want is the number of rooms per household. Similarly, the total number of bedrooms by itself is not very useful: you probably want to compare it to the number of rooms. And the population per household also seems like an interesting attribute combination to look at. Let’s create these new attributes:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing</code><code class="p">[</code><code class="s2">"rooms_per_house"</code><code class="p">]</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"total_rooms"</code><code class="p">]</code> <code class="o">/</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"households"</code><code class="p">]</code>
<code class="n">housing</code><code class="p">[</code><code class="s2">"bedrooms_ratio"</code><code class="p">]</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"total_bedrooms"</code><code class="p">]</code> <code class="o">/</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"total_rooms"</code><code class="p">]</code>
<code class="n">housing</code><code class="p">[</code><code class="s2">"people_per_house"</code><code class="p">]</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"population"</code><code class="p">]</code> <code class="o">/</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"households"</code><code class="p">]</code></pre>

<p>And now let’s look at the correlation matrix again:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">corr_matrix</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">corr</code><code class="p">()</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">corr_matrix</code><code class="p">[</code><code class="s2">"median_house_value"</code><code class="p">]</code><code class="o">.</code><code class="n">sort_values</code><code class="p">(</code><code class="n">ascending</code><code class="o">=</code><code class="kc">False</code><code class="p">)</code>
<code class="go">median_house_value    1.000000</code>
<code class="go">median_income         0.688380</code>
<code class="go">rooms_per_house       0.143663</code>
<code class="go">total_rooms           0.137455</code>
<code class="go">housing_median_age    0.102175</code>
<code class="go">households            0.071426</code>
<code class="go">total_bedrooms        0.054635</code>
<code class="go">population           -0.020153</code>
<code class="go">people_per_house     -0.038224</code>
<code class="go">longitude            -0.050859</code>
<code class="go">latitude             -0.139584</code>
<code class="go">bedrooms_ratio       -0.256397</code>
<code class="go">Name: median_house_value, dtype: float64</code></pre>

<p>Hey, not bad! The new <code>bedrooms_ratio</code> attribute is much more correlated with the median house value than the total number of rooms or bedrooms. Apparently houses with a lower bedroom/room ratio tend to be more expensive. The number of rooms per household is also more informative than the total number of rooms in a district—obviously the larger the houses, the more expensive they are.</p>

<p>This round of exploration does not have to be absolutely thorough; the point is to start off on the right foot and quickly gain insights that will help you get a first reasonably good prototype. But this is an iterative process: once you get a prototype up and running, you can analyze its output to gain more insights and come back to this exploration step.<a data-type="indexterm" data-primary="" data-startref="EPvisual02" id="idm46324215071264"/></p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Prepare the Data for Machine Learning Algorithms"><div class="sect1" id="idm46324215070224">
<h1>Prepare the Data for Machine Learning Algorithms</h1>

<p>It’s<a data-type="indexterm" data-primary="example project" data-secondary="data preparation" id="EPdataprep02"/><a data-type="indexterm" data-primary="data preparation" data-secondary="benefits of functions for" id="idm46324215067248"/> time to prepare the data for your Machine Learning algorithms. Instead of doing this manually, you should write functions for this purpose, for several good reasons:</p>

<ul>
<li>
<p>This will allow you to reproduce these transformations easily on any dataset (e.g., the next time you get a fresh dataset).</p>
</li>
<li>
<p>You will gradually build a library of transformation functions that you can reuse in future projects.</p>
</li>
<li>
<p>You can use these functions in your live system to transform the new data before feeding it to your algorithms.</p>
</li>
<li>
<p>This will make it possible for you to easily try various transformations and see which combination of transformations works best.</p>
</li>
</ul>

<p>But first let’s revert to a clean training set (by copying <code>strat_train_set</code> once again). Let’s also separate the predictors and the labels, since we don’t necessarily want to apply the same transformations to the predictors and the target values (note that <code>drop()</code> creates a copy of the data and does not affect <code>strat_train_set</code>):</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing</code> <code class="o">=</code> <code class="n">strat_train_set</code><code class="o">.</code><code class="n">drop</code><code class="p">(</code><code class="s2">"median_house_value"</code><code class="p">,</code> <code class="n">axis</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code>
<code class="n">housing_labels</code> <code class="o">=</code> <code class="n">strat_train_set</code><code class="p">[</code><code class="s2">"median_house_value"</code><code class="p">]</code><code class="o">.</code><code class="n">copy</code><code class="p">()</code></pre>








<section data-type="sect2" data-pdf-bookmark="Data Cleaning"><div class="sect2" id="idm46324215029168">
<h2>Data Cleaning</h2>

<p>Most<a data-type="indexterm" data-primary="data preparation" data-secondary="data cleaning" id="idm46324215038416"/> Machine Learning algorithms cannot work with missing features, so let’s create a few functions to take care of them. We saw earlier that the <code>total_bedrooms</code> attribute has some missing values, so let’s fix this. You have three options:</p>
<ol>
<li>
<p>Get rid of the corresponding districts.</p>
</li>
<li>
<p>Get rid of the whole attribute.</p>
</li>
<li>
<p>Set the missing values to some value (zero, the mean, the median, etc.). This is called <em>imputation</em>.</p>
</li>

</ol>

<p>You can accomplish these easily using DataFrame’s <code>dropna()</code>, <code>drop()</code>, and <code>fillna()</code> methods:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing</code><code class="o">.</code><code class="n">dropna</code><code class="p">(</code><code class="n">subset</code><code class="o">=</code><code class="p">[</code><code class="s2">"total_bedrooms"</code><code class="p">],</code> <code class="n">inplace</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>  <code class="c1"># option 1</code>

<code class="n">housing</code><code class="o">.</code><code class="n">drop</code><code class="p">(</code><code class="s2">"total_bedrooms"</code><code class="p">,</code> <code class="n">axis</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code>  <code class="c1"># option 2</code>

<code class="n">median</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[</code><code class="s2">"total_bedrooms"</code><code class="p">]</code><code class="o">.</code><code class="n">median</code><code class="p">()</code>  <code class="c1"># option 3</code>
<code class="n">housing</code><code class="p">[</code><code class="s2">"total_bedrooms"</code><code class="p">]</code><code class="o">.</code><code class="n">fillna</code><code class="p">(</code><code class="n">median</code><code class="p">,</code> <code class="n">inplace</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code></pre>

<p>Let’s go for option 3 since it is the least destructive, but instead of the code above, we will use a handy Scikit-Learn class <a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="missing value handling" id="idm46324214963952"/>: <code>SimpleImputer</code>. The benefit is that it will store the median value of each feature: this will make it possible to impute missing values not only on the training set, but also on the validation set, the test set, and any new data fed to the model. Here is how to use it. First, you need to create a <code>SimpleImputer</code> instance, specifying that you want to replace each attribute’s missing values with the median of that attribute:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.impute</code> <code class="kn">import</code> <code class="n">SimpleImputer</code>

<code class="n">imputer</code> <code class="o">=</code> <code class="n">SimpleImputer</code><code class="p">(</code><code class="n">strategy</code><code class="o">=</code><code class="s2">"median"</code><code class="p">)</code></pre>

<p>Since the median can only be computed on numerical attributes, you need to create a copy of the data with only the numerical attributes (this will exclude the text attribute <code>ocean_proximity</code>):</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing_num</code> <code class="o">=</code> <code class="n">housing</code><code class="o">.</code><code class="n">select_dtypes</code><code class="p">(</code><code class="n">include</code><code class="o">=</code><code class="p">[</code><code class="n">np</code><code class="o">.</code><code class="n">number</code><code class="p">])</code></pre>

<p>Now you can fit the <code>imputer</code> instance to the training data using the <code>fit()</code> method:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">imputer</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing_num</code><code class="p">)</code></pre>

<p>The <code>imputer</code> has simply computed the median of each attribute and stored the result in its <code>statistics_</code> instance variable. Only the <code>total_bedrooms</code> attribute had missing values, but we cannot be sure that there won’t be any missing values in new data after the system goes live, so it is safer to apply the <code>imputer</code> to all the numerical attributes:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">imputer</code><code class="o">.</code><code class="n">statistics_</code>
<code class="go">array([-118.51 , 34.26 , 29. , 2125. , 434. , 1167. , 408. , 3.5385])</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_num</code><code class="o">.</code><code class="n">median</code><code class="p">()</code><code class="o">.</code><code class="n">values</code>
<code class="go">array([-118.51 , 34.26 , 29. , 2125. , 434. , 1167. , 408. , 3.5385])</code></pre>

<p>Now you can use this “trained” <code>imputer</code> to transform the training set by replacing missing values with the learned medians:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">X</code> <code class="o">=</code> <code class="n">imputer</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">housing_num</code><code class="p">)</code></pre>

<p>Missing values can also be replaced with the mean value (<code>strategy="mean"</code>), or with the most frequent value (<code>strategy="most_frequent"</code>), or with a constant value (<code>strategy="constant", fill_value=</code>…). The last two strategies support non-numerical data.</p>
<div data-type="tip"><h6>Tip</h6>
<p>There are also more powerful imputers available in the <code>sklearn.impute</code> package (both for numerical features only):</p>

<ul>
<li>
<p><code>KNNImputer</code> replaces each missing value with the mean of the <em>k</em> nearest neighbors’ values for that feature. The distance is based on all the available features.</p>
</li>
<li>
<p><code>IterativeImputer</code> trains a regression model per feature to predict the missing values based on all the other available features. It then trains the model again on the updated data, and repeats the process several times, improving the models and the replacement values at each iteration.</p>
</li>
</ul>
</div>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="scikit_learn_design">
<h5>Scikit-Learn Design</h5>
<p>Scikit-Learn’s API<a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="design principles" id="idm46324214743296"/> is remarkably well designed. These are the <a href="https://homl.info/11">main design principles</a>:⁠<sup><a data-type="noteref" id="idm46324214741504-marker" href="ch02.xhtml#idm46324214741504">9</a></sup></p>
<dl>
<dt>Consistency</dt>
<dd>
<p>All objects share a consistent and simple interface:</p>

<dl>
<dt>Estimators</dt>
<dd>
<p>Any<a contenteditable="false" data-type="indexterm" data-primary="estimators" id="idm46324214737040"/> object that can estimate some parameters based on a dataset is called an <em>estimator</em> (e.g., a <code>SimpleImputer</code> is an estimator). The estimation itself is performed by the <code>fit()</code> method, and it takes a dataset as a parameter, or two for supervised learning algorithms—the second dataset contains the labels. Any other parameter needed to guide the estimation process is considered a hyperparameter (such as a <code>SimpleImputer</code>’s <code>strategy</code>), and it must be set as an instance variable (generally via a constructor parameter).</p>
</dd>
<dt>Transformers</dt>
<dd>
<p>Some estimators<a contenteditable="false" data-type="indexterm" data-primary="transformations" data-secondary="purpose of" id="idm46324214732448"/> (such as a <code>SimpleImputer</code>) can also transform a dataset; these are called <em>transformers</em>. Once again, the API is simple: the transformation is <span class="keep-together">performed</span> by the <code>transform()</code> method with the dataset to transform as a parameter. It returns the transformed dataset. This transformation generally relies on the learned parameters, as is the case for a <code>SimpleImputer</code>. All transformers also have a convenience method called <code>fit_transform()</code> which is equivalent to calling <code>fit()</code> and then <code>transform()</code> (but sometimes <code>fit_transform()</code> is optimized and runs much faster).</p>
</dd>
<dt>Predictors</dt>
<dd>
<p>Finally, some<a contenteditable="false" data-type="indexterm" data-primary="predictors" id="idm46324214712592"/> estimators, given a dataset, are capable of making predictions; they are called <em>predictors</em>. For example, the <code>LinearRegression</code> model in the previous chapter was a predictor: given a country’s GDP per capita, it predicted life satisfaction. A predictor has a <code>predict()</code> method that takes a dataset of new instances and returns a dataset of corresponding predictions. It also has a <code>score()</code> method that measures the quality of the predictions, given a test set (and the corresponding labels, in the case of supervised learning algorithms).{wj}<sup><a data-type="noteref" id="idm46324214709504-marker" href="ch02.xhtml#idm46324214709504">10</a></sup></p>
</dd>
</dl>
</dd>
<dt>Inspection</dt>
<dd>
<p>All the estimator’s hyperparameters are accessible directly via public instance variables (e.g., <code>imputer.strategy</code>), and all the estimator’s learned parameters are accessible via public instance variables with an underscore suffix (e.g., <code>imputer.statistics_</code>).</p>
</dd>
<dt>Nonproliferation of classes</dt>
<dd>
<p>Datasets are represented as NumPy arrays or SciPy sparse matrices, instead of homemade classes. Hyperparameters are just regular Python strings or numbers.</p>
</dd>
<dt>Composition</dt>
<dd>
<p>Existing building blocks are reused as much as possible. For example, it is easy to create a <code>Pipeline</code> estimator from an arbitrary sequence of transformers followed by a final estimator, as we will see.</p>
</dd>
<dt>Sensible defaults</dt>
<dd>
<p>Scikit-Learn provides reasonable default values for most parameters, making it easy to quickly create a baseline working system.</p>
</dd>
</dl>
</div></aside>

<p>Scikit-Learn transformers output NumPy arrays (or sometimes SciPy sparse matrices) even when they are fed Pandas DataFrames as input.⁠<sup><a data-type="noteref" id="idm46324214701024-marker" href="ch02.xhtml#idm46324214701024">11</a></sup> So the output of <code>imputer.transform(housing_num)</code> is a NumPy array: <code>X</code> has neither column names nor index. Luckily, it’s not too hard to wrap <code>X</code> in a DataFrame and recover the column names and index from <code>housing_num</code>:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing_tr</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">DataFrame</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">columns</code><code class="o">=</code><code class="n">housing_num</code><code class="o">.</code><code class="n">columns</code><code class="p">,</code>
                          <code class="n">index</code><code class="o">=</code><code class="n">housing_num</code><code class="o">.</code><code class="n">index</code><code class="p">)</code></pre>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Handling Text and Categorical Attributes"><div class="sect2" id="idm46324214687632">
<h2>Handling Text and Categorical Attributes</h2>

<p>So<a data-type="indexterm" data-primary="data preparation" data-secondary="handling text and categorical attributes" id="idm46324214692656"/> far we have only dealt with numerical attributes, but now let’s look at text attributes. In this dataset, there is just one: the <code>ocean_proximity</code> attribute. Let’s look at its value for the first few instances:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[[</code><code class="s2">"ocean_proximity"</code><code class="p">]]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat</code><code class="o">.</code><code class="n">head</code><code class="p">(</code><code class="mi">8</code><code class="p">)</code>
<code class="go">      ocean_proximity</code>
<code class="go">13096        NEAR BAY</code>
<code class="go">14973       &lt;1H OCEAN</code>
<code class="go">3785           INLAND</code>
<code class="go">14689          INLAND</code>
<code class="go">20507      NEAR OCEAN</code>
<code class="go">1286           INLAND</code>
<code class="go">18078       &lt;1H OCEAN</code>
<code class="go">4396         NEAR BAY</code></pre>

<p>It’s not arbitrary text: there are a limited number of possible values, each of which represents a category. So this attribute is a categorical attribute. Most Machine Learning algorithms prefer to work with numbers, so let’s convert these categories from text to numbers. For this, we can<a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="converting text to numbers" id="idm46324214625264"/> use Scikit-Learn’s <code>OrdinalEncoder</code> class:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.preprocessing</code> <code class="kn">import</code> <code class="n">OrdinalEncoder</code>

<code class="n">ordinal_encoder</code> <code class="o">=</code> <code class="n">OrdinalEncoder</code><code class="p">()</code>
<code class="n">housing_cat_encoded</code> <code class="o">=</code> <code class="n">ordinal_encoder</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing_cat</code><code class="p">)</code></pre>

<p>Here’s what the first few encoded values in <code>housing_cat_encoded</code> look like:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat_encoded</code><code class="p">[:</code><code class="mi">8</code><code class="p">]</code>
<code class="go">array([[3.],</code>
<code class="go">       [0.],</code>
<code class="go">       [1.],</code>
<code class="go">       [1.],</code>
<code class="go">       [4.],</code>
<code class="go">       [1.],</code>
<code class="go">       [0.],</code>
<code class="go">       [3.]])</code></pre>

<p>You can get the list of categories using the <code>categories_</code> instance variable. It is a list containing a 1D array of categories for each categorical attribute (in this case, a list containing a single array since there is just one categorical attribute):</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">ordinal_encoder</code><code class="o">.</code><code class="n">categories_</code>
<code class="go">[array(['&lt;1H OCEAN', 'INLAND', 'ISLAND', 'NEAR BAY', 'NEAR OCEAN'],</code>
<code class="go">       dtype=object)]</code></pre>

<p>One issue with this representation is that ML algorithms will assume that two nearby values are more similar than two distant values. This may be fine in some cases (e.g., for ordered categories such as “bad,” “average,” “good,” and “excellent”), but it is obviously not the case for the <code>ocean_proximity</code> column (for example, categories 0 and 4 are clearly more similar than categories 0 and 1). To fix this issue, a common solution is to create one binary attribute per category: one attribute equal to 1 when the category is “&lt;1H OCEAN” (and 0 otherwise), another attribute equal to 1 when the category is “INLAND” (and 0 otherwise), and so on. This<a data-type="indexterm" data-primary="one-hot encoding" id="idm46324214566464"/> is called <em>one-hot encoding</em>, because only one attribute will be equal to 1 (hot), while the others will be 0 (cold). The new attributes are sometimes called<a data-type="indexterm" data-primary="dummy attributes" id="idm46324214565344"/> <em>dummy</em> attributes. Scikit-Learn<a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="one-hot vectors" id="idm46324214564128"/> provides a <code>OneHotEncoder</code> class to convert categorical values into one-hot vectors:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.preprocessing</code> <code class="kn">import</code> <code class="n">OneHotEncoder</code>

<code class="n">cat_encoder</code> <code class="o">=</code> <code class="n">OneHotEncoder</code><code class="p">()</code>
<code class="n">housing_cat_1hot</code> <code class="o">=</code> <code class="n">cat_encoder</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing_cat</code><code class="p">)</code></pre>

<p>By default, the output of a <code>OneHotEncoder</code> is a <a data-type="indexterm" data-primary="sparse matrix" id="idm46324214472064"/>SciPy <em>sparse matrix</em>, instead of a NumPy array:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat_1hot</code>
<code class="go">&lt;16512x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;'</code>
<code class="go"> with 16512 stored elements in Compressed Sparse Row format&gt;</code></pre>

<p>A sparse matrix is a very efficient representation for matrices that contain mostly zeroes. Indeed, internally it only stores the non-zero values and their positions. When a categorical attribute has hundreds or thousands of categories, then one-hot-encoding it results in a very large matrix full of zeros except for a single 1 per row. In this case, a sparse matrix is exactly what we need: it will save plenty of memory and speed up computations. You can use a sparse matrix mostly like a normal 2D array,⁠<sup><a data-type="noteref" id="idm46324214454592-marker" href="ch02.xhtml#idm46324214454592">12</a></sup> but<a data-type="indexterm" data-primary="NumPy" data-secondary="dense arrays" id="idm46324214453968"/> if you want to convert it to a (dense) NumPy array, just call the <code>toarray()</code> method:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_cat_1hot</code><code class="o">.</code><code class="n">toarray</code><code class="p">()</code>
<code class="go">array([[0., 0., 0., 1., 0.],</code>
<code class="go">       [1., 0., 0., 0., 0.],</code>
<code class="go">       [0., 1., 0., 0., 0.],</code>
<code class="go">       ...,</code>
<code class="go">       [0., 0., 0., 0., 1.],</code>
<code class="go">       [1., 0., 0., 0., 0.],</code>
<code class="go">       [0., 0., 0., 0., 1.]])</code></pre>

<p>Alternatively, you can set <code>sparse=False</code> when creating the <code>OneHotEncoder</code>, in which case the <code>transform()</code> method will return a regular (dense) NumPy array directly.</p>

<p>As with the <code>OrdinalEncoder</code>, you can get the list of categories using the encoder’s <code>categories_</code> instance variable:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">cat_encoder</code><code class="o">.</code><code class="n">categories_</code>
<code class="go">[array(['&lt;1H OCEAN', 'INLAND', 'ISLAND', 'NEAR BAY', 'NEAR OCEAN'],</code>
<code class="go">       dtype=object)]</code></pre>

<p>Pandas has a function called <code>get_dummies()</code> which also converts each categorical feature into a one-hot-representation, with one binary feature per category:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">df_test</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">DataFrame</code><code class="p">({</code><code class="s2">"ocean_proximity"</code><code class="p">:</code> <code class="p">[</code><code class="s2">"INLAND"</code><code class="p">,</code> <code class="s2">"NEAR BAY"</code><code class="p">]})</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">pd</code><code class="o">.</code><code class="n">get_dummies</code><code class="p">(</code><code class="n">df_test</code><code class="p">)</code>
<code class="go">   ocean_proximity_INLAND  ocean_proximity_NEAR BAY</code>
<code class="go">0                       1                         0</code>
<code class="go">1                       0                         1</code></pre>

<p>It looks nice and simple, so why not use it instead of <code>OneHotEncoder</code>? Well, the advantage of <code>OneHotEncoder</code> is that it remembers which categories it was trained on. This is very important because once your model is in production, it should be fed exactly the same features as during training: no more, no less. Watch what our trained <code>cat_encoder</code> outputs when we make it transform the same <code>df_test</code> (using <code>transform()</code>, not <code>fit_transform()</code>):</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">cat_encoder</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">df_test</code><code class="p">)</code>
<code class="go">array([[0., 1., 0., 0., 0.],</code>
<code class="go">       [0., 0., 0., 1., 0.]])</code></pre>

<p>See the difference? <code>get_dummies()</code> saw only two categories, so it output two columns, whereas <code>OneHotEncoder</code> output one column per learned category, in the right order. Moreover, if you feed <code>get_dummies()</code> a DataFrame containing an unknown category (e.g., <code>"&lt;2H OCEAN"</code>), it will happily generate a column for it:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">df_test_unknown</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">DataFrame</code><code class="p">({</code><code class="s2">"ocean_proximity"</code><code class="p">:</code> <code class="p">[</code><code class="s2">"&lt;2H OCEAN"</code><code class="p">,</code> <code class="s2">"ISLAND"</code><code class="p">]})</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">pd</code><code class="o">.</code><code class="n">get_dummies</code><code class="p">(</code><code class="n">df_test_unknown</code><code class="p">)</code>
<code class="go">   ocean_proximity_&lt;2H OCEAN  ocean_proximity_ISLAND</code>
<code class="go">0                          1                       0</code>
<code class="go">1                          0                       1</code></pre>

<p>But <code>OneHotEncoder</code> is smarter: it will detect the unknown category and raise an exception. If you prefer, you can set the <code>handle_unknown</code> hyperparameter to <code>"ignore"</code>, in which case it will just represent the unknown category with zeros:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">cat_encoder</code><code class="o">.</code><code class="n">handle_unknown</code> <code class="o">=</code> <code class="s2">"ignore"</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">cat_encoder</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">df_test_unknown</code><code class="p">)</code>
<code class="go">array([[0., 0., 0., 0., 0.],</code>
<code class="go">       [0., 0., 1., 0., 0.]])</code></pre>

<p>When you fit any Scikit-Learn estimator using a DataFrame, the estimator stores the column names in the <code>feature_names_in_</code> attribute. Scikit-Learn then ensures that any DataFrame fed to this estimator after that (e.g., to <code>transform()</code> or <code>predict()</code>) has the same column names. Transformers also provide a <code>get_feature_names_out()</code> method which you can use to build a DataFrame around the transformer’s output:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">cat_encoder</code><code class="o">.</code><code class="n">feature_names_in_</code>
<code class="go">array(['ocean_proximity'], dtype=object)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">cat_encoder</code><code class="o">.</code><code class="n">get_feature_names_out</code><code class="p">()</code>
<code class="go">array(['ocean_proximity_&lt;1H OCEAN', 'ocean_proximity_INLAND',</code>
<code class="go">       'ocean_proximity_ISLAND', 'ocean_proximity_NEAR BAY',</code>
<code class="go">       'ocean_proximity_NEAR OCEAN'], dtype=object)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">df_output</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">DataFrame</code><code class="p">(</code><code class="n">cat_encoder</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">df_test_unknown</code><code class="p">),</code>
<code class="gp">... </code>                         <code class="n">columns</code><code class="o">=</code><code class="n">cat_encoder</code><code class="o">.</code><code class="n">get_feature_names_out</code><code class="p">(),</code>
<code class="gp">... </code>                         <code class="n">index</code><code class="o">=</code><code class="n">df_test_unknown</code><code class="o">.</code><code class="n">index</code><code class="p">)</code>
<code class="gp">...</code></pre>
<div data-type="tip"><h6>Tip</h6>
<p>If a categorical attribute has a large number of possible categories (e.g., country code, profession, species), then one-hot encoding will result in a large number of input features. This may slow down training and degrade performance. If this happens, you may want to replace the categorical input with useful numerical features related to the categories: for example, you could replace the <code>ocean_proximity</code> feature with the distance to the ocean (similarly, a country code could be replaced with the country’s population and GDP per capita). Alternatively, you can use one of the encoders provided by the category_encoders package on <a href="https://github.com/scikit-learn-contrib"><em class="hyperlink">https://github.com/scikit-learn-contrib</em></a>. Or when dealing with neural networks, you can replace each category with a learnable, low-dimensional vector<a data-type="indexterm" data-primary="embedding" id="idm46324214101040"/> called an <em>embedding</em>. This<a data-type="indexterm" data-primary="representation learning" id="idm46324214099856"/> is an example of <em>representation learning</em> (see Chapters 13 and 17 for more details).</p>
</div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Feature Scaling and Transformation"><div class="sect2" id="idm46324214693568">
<h2>Feature Scaling and Transformation</h2>

<p>One<a data-type="indexterm" data-primary="data preparation" data-secondary="feature scaling" id="idm46324214096736"/><a data-type="indexterm" data-primary="feature scaling" id="idm46324214095888"/> of the most important transformations you need to apply to your data is <em>feature scaling</em>. With few exceptions, Machine Learning algorithms don’t perform well when the input numerical attributes have very different scales. This is the case for the housing data: the total number of rooms ranges from about 6 to 39,320, while the median incomes only range from 0 to 15.</p>

<p>There<a data-type="indexterm" data-primary="min-max scaling" id="idm46324214094384"/><a data-type="indexterm" data-primary="standardization" id="idm46324214093776"/> are two common ways to get all attributes to have the same scale: <em>min-max scaling</em> and <em>standardization</em>.</p>

<p>Min-max scaling<a data-type="indexterm" data-primary="normalization" id="idm46324214091888"/> (many people call this <em>normalization</em>) is the simplest: for each attribute, the values are shifted and rescaled so that they end up ranging from 0 to 1. This is performed by subtracting the min value and dividing by the difference between the min and the max. Scikit-Learn provides a transformer called <code>MinMaxScaler</code> for this. It has a <code>feature_range</code> hyperparameter that lets you change the range if, for some reason, you don’t want 0–1 (e.g., neural networks work best with zero-mean inputs, so a range of –1 to 1 is preferable). It’s quite easy to use:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.preprocessing</code> <code class="kn">import</code> <code class="n">MinMaxScaler</code>

<code class="n">min_max_scaler</code> <code class="o">=</code> <code class="n">MinMaxScaler</code><code class="p">(</code><code class="n">feature_range</code><code class="o">=</code><code class="p">(</code><code class="o">-</code><code class="mi">1</code><code class="p">,</code> <code class="mi">1</code><code class="p">))</code>
<code class="n">housing_num_min_max_scaled</code> <code class="o">=</code> <code class="n">min_max_scaler</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing_num</code><code class="p">)</code></pre>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>As with all estimators, it is important to fit the scalers to the training data only: never use <code>fit()</code> or <code>fit_transform()</code> for anything else than the training set. Once you have a trained scaler, you can then use it to <code>transform()</code> any other set, including the validation set, the test set, and new data. Note that while the training set values will always be scaled to the specified range, if new data contains outliers, these may end up scaled outside the range. If you want to avoid this, just set the <code>clip</code> hyperparameter to <code>True</code>.</p>
</div>

<p>Standardization is different: first it subtracts the mean value (so standardized values have a zero mean), then it divides the result by the standard deviation (so standardized values have a standard deviation equal to 1). Unlike min-max scaling, standardization does not bound values to a specific range. However, standardization is much less affected by outliers. For example, suppose a district has a median income equal to 100 (by mistake), instead of the usual 0–15. Min-max scaling to the 0–1 range would map this outlier down to 1 and it would crush all the other values down to 0–0.15, whereas standardization would not be much affected. Scikit-Learn provides a transformer called <code>StandardScaler</code> for <span class="keep-together">standardization</span>:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.preprocessing</code> <code class="kn">import</code> <code class="n">StandardScaler</code>

<code class="n">std_scaler</code> <code class="o">=</code> <code class="n">StandardScaler</code><code class="p">()</code>
<code class="n">housing_num_std_scaled</code> <code class="o">=</code> <code class="n">std_scaler</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing_num</code><code class="p">)</code></pre>
<div data-type="tip"><h6>Tip</h6>
<p>If you want to scale a sparse matrix without converting it to a dense matrix first, you can use a <code>StandardScaler</code> with its <code>with_mean</code> hyperparameter set to <code>False</code>: it will only divide the data by the standard deviation, without subtracting the mean (as this would break sparsity).</p>
</div>

<p>When a feature’s distribution has a <em>heavy tail</em> (i.e., when values far from the mean are not exponentially rare), both min-max scaling and standardization will squash most values into a small range. Machine Learning models generally don’t like this at all, as we will see in <a data-type="xref" href="ch04.xhtml#linear_models_chapter">Chapter 4</a>. So <em>before</em> you scale the feature, you should first transform it to shrink the heavy tail, and if possible to make the distribution roughly symmetrical. For example, a common way to do this for positive features with a heavy tail to the right is to replace the feature with its square root (or raise the feature to a power between 0 and 1). If the feature has a really long and heavy tail, such as a <em>power law distribution</em>, then replacing the feature with its logarithm may help. For example, the <code>population</code> feature roughly follows a power law: districts with 10,000 inhabitants are only 10 times less frequent than districts with 1,000 inhabitants, not exponentially less frequent. <a data-type="xref" href="#long_tail_plot">Figure 2-17</a> shows how much better this feature looks when you compute its log: it’s very close to a Gaussian distribution (i.e., bell-shaped).</p>

<figure class="smallerseventy"><div id="long_tail_plot" class="figure">
<img src="Images/mls3_0217.png" alt="mls3 0217" width="2304" height="809"/>
<h6><span class="label">Figure 2-17. </span>Transforming a feature to make it closer to a Gaussian distribution</h6>
</div></figure>

<p>Another approach to handle heavy tailed features consists in <em>bucketizing</em> the feature. This means chopping its distribution into roughly equal size buckets, and replacing each feature value with the index of the bucket it belongs to, much like we did to create the <code>income_cat</code> feature (although we only used it for stratified sampling). For example, you could replace each value with its percentile. Bucketizing with equal-sized buckets results in a feature with an almost uniform distribution, so there’s no need for further scaling, or you can just divide by the number of buckets to force the values to the 0–1 range.</p>

<p>When a feature has a multimodal distribution (i.e., with two or more clear peaks, called <em>modes</em>), such as the <code>housing_median_age</code> feature, it can also be helpful to bucketize it, but this time treating the bucket ids as categories, rather than as numerical values. This means that the bucket indices must be encoded, for example using a <code>OneHotEncoder</code> (so you usually don’t want to use too many buckets). This approach will allow the regression model to more easily learn different rules for different ranges of this feature value. For example, perhaps houses built around 35 years ago have a peculiar style that fell out of fashion, and therefore they’re cheaper than their age alone would suggest.</p>

<p>Another approach for transforming multimodal distributions is to add a feature for each of the modes (at least the main ones), representing the similarity between the housing median age and that particular mode. The similarity measure is typically computed using a <em>Radial Basis Function</em> (RBF): this is any function which depends only on the distance between the input value and a fixed point. The most commonly used RBF is the Gaussian RBF whose output value decays exponentially as the input value moves away from the fixed point. For example, the Gaussian RBF similarity between the housing age <em>x</em> and 35 is given by the equation exp(-ݛx_ - 35)²). The hyperparameter ݛgamma) determines how quickly the similarity measure decays as <em>x</em> moves away from 35. Using Scikit-Learn’s <code>rbf_kernel()</code> function, we can create a new Gaussian RBF feature measuring the similarity between the housing median age and 35:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.metrics.pairwise</code> <code class="kn">import</code> <code class="n">rbf_kernel</code>

<code class="n">age_simil_35</code> <code class="o">=</code> <code class="n">rbf_kernel</code><code class="p">(</code><code class="n">housing</code><code class="p">[[</code><code class="s2">"housing_median_age"</code><code class="p">]],</code> <code class="p">[[</code><code class="mi">35</code><code class="p">]],</code> <code class="n">gamma</code><code class="o">=</code><code class="mf">0.1</code><code class="p">)</code></pre>

<p><a data-type="xref" href="#age_similarity_plot">Figure 2-18</a> shows this new feature as a function of the housing median age (solid line). It also shows what the feature would look like if we used a smaller <code>gamma</code> value. As the chart shows, the new age similarity feature peaks at 35, right around the spike in the housing median age distribution: if this particular age group is well correlated with lower prices, there’s a good chance that this new feature will help.</p>

<figure><div id="age_similarity_plot" class="figure">
<img src="Images/mls3_0218.png" alt="mls3 0218" width="1706" height="1109"/>
<h6><span class="label">Figure 2-18. </span>Gaussian RBF feature measuring the similarity between the housing median age and 35</h6>
</div></figure>

<p>So far we’ve only looked at the input features, but the target values may also need to be transformed. For example, if the target distribution has a heavy tail, you may choose to replace the target with its logarithm. But if you do, the regression model will now predict the <em>log</em> of the median house value, not the median house value itself. So you will need to compute the exponential of the model’s prediction if you want the predicted median house value.</p>

<p>Luckily, most of Scikit-Learn’s transformers have an <code>inverse_transform()</code> method, making it easy to compute the inverse of their transformations. For example, the following code example shows how to scale the labels using a <code>StandardScaler</code> (just like we did for inputs), then train a simple linear regression model on the resulting scaled labels, and use it to make predictions on some new data, which we transform back to the original scale using the trained scaler’s <code>inverse_transform()</code> method. Note that we convert the labels from a Pandas Series to a DataFrame, since the <code>StandardScaler</code> expects 2D inputs. Also, in this example we just train the model on a single raw input feature (median income), for simplicity.</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.linear_model</code> <code class="kn">import</code> <code class="n">LinearRegression</code>

<code class="n">target_scaler</code> <code class="o">=</code> <code class="n">StandardScaler</code><code class="p">()</code>
<code class="n">scaled_labels</code> <code class="o">=</code> <code class="n">target_scaler</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing_labels</code><code class="o">.</code><code class="n">to_frame</code><code class="p">())</code>

<code class="n">model</code> <code class="o">=</code> <code class="n">LinearRegression</code><code class="p">()</code>
<code class="n">model</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing</code><code class="p">[[</code><code class="s2">"median_income"</code><code class="p">]],</code> <code class="n">scaled_labels</code><code class="p">)</code>
<code class="n">some_new_data</code> <code class="o">=</code> <code class="n">housing</code><code class="p">[[</code><code class="s2">"median_income"</code><code class="p">]]</code><code class="o">.</code><code class="n">iloc</code><code class="p">[:</code><code class="mi">5</code><code class="p">]</code>  <code class="c1"># pretend this is new data</code>

<code class="n">scaled_predictions</code> <code class="o">=</code> <code class="n">model</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">some_new_data</code><code class="p">)</code>
<code class="n">predictions</code> <code class="o">=</code> <code class="n">target_scaler</code><code class="o">.</code><code class="n">inverse_transform</code><code class="p">(</code><code class="n">scaled_predictions</code><code class="p">)</code></pre>

<p>This works fine, but there’s a simpler way: we can use a <code>TransformedTargetRegressor</code>. We just need to construct it, giving it the regression model and the label transformer, then fit it on the training set, using the original unscaled labels. It will automatically use the transformer to scale the labels, and train the regression model on the resulting scaled labels, just like we did above. Then when we make a prediction, it will call the regression model’s <code>predict()</code> method and use the scaler’s <code>inverse_transform()</code> method to produce the predictions:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.compose</code> <code class="kn">import</code> <code class="n">TransformedTargetRegressor</code>

<code class="n">model</code> <code class="o">=</code> <code class="n">TransformedTargetRegressor</code><code class="p">(</code><code class="n">LinearRegression</code><code class="p">(),</code>
                                   <code class="n">transformer</code><code class="o">=</code><code class="n">StandardScaler</code><code class="p">())</code>
<code class="n">model</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing</code><code class="p">[[</code><code class="s2">"median_income"</code><code class="p">]],</code> <code class="n">housing_labels</code><code class="p">)</code>
<code class="n">predictions</code> <code class="o">=</code> <code class="n">model</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">some_new_data</code><code class="p">)</code></pre>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Custom Transformers"><div class="sect2" id="idm46324213812784">
<h2>Custom Transformers</h2>

<p>Although Scikit-Learn provides<a data-type="indexterm" data-primary="transformations" data-secondary="custom" id="idm46324213794800"/><a data-type="indexterm" data-primary="data preparation" data-secondary="custom transformers" id="idm46324213793824"/> many useful transformers, you will need to write your own for tasks such as custom transformations, cleanup operations, or combining specific attributes.</p>

<p>For transformations that don’t require any training, you can just write a function that takes a NumPy array as input, and outputs the transformed array. For example, as we discussed in the previous section, it’s often a good idea to transform features with heavy-tailed distributions by replacing them with their logarithm (assuming the feature is positive and the tail is on the right). Let’s create a log-transformer, and apply it to the population feature:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.preprocessing</code> <code class="kn">import</code> <code class="n">FunctionTransformer</code>

<code class="n">log_transformer</code> <code class="o">=</code> <code class="n">FunctionTransformer</code><code class="p">(</code><code class="n">np</code><code class="o">.</code><code class="n">log</code><code class="p">,</code> <code class="n">inverse_func</code><code class="o">=</code><code class="n">np</code><code class="o">.</code><code class="n">exp</code><code class="p">)</code>
<code class="n">log_pop</code> <code class="o">=</code> <code class="n">log_transformer</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">housing</code><code class="p">[[</code><code class="s2">"population"</code><code class="p">]])</code></pre>

<p>The <code>inverse_func</code> argument is optional. It lets you specify an inverse transform function, for example if you plan to use your transformer in a <code>TransformedTargetRegressor</code>.</p>

<p>Your transformation function can take hyperparameters as additional arguments. For example, here’s how to create a transformer that computes the same Gaussian RBF similarity measure as earlier:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">rbf_transformer</code> <code class="o">=</code> <code class="n">FunctionTransformer</code><code class="p">(</code><code class="n">rbf_kernel</code><code class="p">,</code>
                                      <code class="n">kw_args</code><code class="o">=</code><code class="nb">dict</code><code class="p">(</code><code class="n">Y</code><code class="o">=</code><code class="p">[[</code><code class="mf">35.</code><code class="p">]],</code> <code class="n">gamma</code><code class="o">=</code><code class="mf">0.1</code><code class="p">))</code>
<code class="n">age_simil_35</code> <code class="o">=</code> <code class="n">rbf_transformer</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">housing</code><code class="p">[[</code><code class="s2">"housing_median_age"</code><code class="p">]])</code></pre>

<p>Note that there’s no inverse function for the RBF kernel, since there are always two values at a given distance from a fixed point (except at distance 0). Also note that <code>rbf_kernel()</code> does not treat the features separately. If you pass it an array with 2 features, it will measure the 2D distance (Euclidean) to measure similarity. For example, here’s how to add a feature that will measure the geographic similarity between each district and San Francisco:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">sf_coords</code> <code class="o">=</code> <code class="mf">37.7749</code><code class="p">,</code> <code class="o">-</code><code class="mf">122.41</code>
<code class="n">sf_transformer</code> <code class="o">=</code> <code class="n">FunctionTransformer</code><code class="p">(</code><code class="n">rbf_kernel</code><code class="p">,</code>
                                     <code class="n">kw_args</code><code class="o">=</code><code class="nb">dict</code><code class="p">(</code><code class="n">Y</code><code class="o">=</code><code class="p">[</code><code class="n">sf_coords</code><code class="p">],</code> <code class="n">gamma</code><code class="o">=</code><code class="mf">0.1</code><code class="p">))</code>
<code class="n">sf_simil</code> <code class="o">=</code> <code class="n">sf_transformer</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">housing</code><code class="p">[[</code><code class="s2">"latitude"</code><code class="p">,</code> <code class="s2">"longitude"</code><code class="p">]])</code></pre>

<p>Custom transformers are also useful to combine features. For example, here’s a <code>FunctionTransformer</code> that computes the ratio between the input features 0 and 1:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">ratio_transformer</code> <code class="o">=</code> <code class="n">FunctionTransformer</code><code class="p">(</code><code class="k">lambda</code> <code class="n">X</code><code class="p">:</code> <code class="n">X</code><code class="p">[:,</code> <code class="p">[</code><code class="mi">0</code><code class="p">]]</code> <code class="o">/</code> <code class="n">X</code><code class="p">[:,</code> <code class="p">[</code><code class="mi">1</code><code class="p">]])</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">ratio_transformer</code><code class="o">.</code><code class="n">transform</code><code class="p">(</code><code class="n">np</code><code class="o">.</code><code class="n">array</code><code class="p">([[</code><code class="mf">1.</code><code class="p">,</code> <code class="mf">2.</code><code class="p">],</code> <code class="p">[</code><code class="mf">3.</code><code class="p">,</code> <code class="mf">4.</code><code class="p">]]))</code>
<code class="go">array([[0.5 ],</code>
<code class="go">       [0.75]])</code></pre>

<p><code>FunctionTransformer</code> is very handy, but what if you would like your transformer to be trainable, learning some parameters in the <code>fit()</code> method and using them later in the <code>transform()</code> method? For this, you need to write a custom class. Scikit-Learn relies on<a data-type="indexterm" data-primary="duck typing" id="idm46324213540096"/> duck typing, so this class does not have to inherit from any particular base class: all it needs is three methods: <code>fit()</code> (which must return <code>self</code>), <code>transform()</code>, and <code>fit_transform()</code>.</p>

<p>You can get <code>fit_transform()</code> for free by simply adding <code>TransformerMixin</code> as a base class: the default implementation will just call <code>fit()</code> then <code>transform()</code>. If you add <code>BaseEstimator</code> as a base class (and avoid using <code>*args</code> and <code>**kargs</code> in your constructor), you will also get two extra methods: <code>get_params()</code> and <code>set_params()</code>. These will be useful for automatic hyperparameter tuning.</p>

<p>For example, here’s a custom transformer that acts much like the <code>StandardScaler</code>:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.base</code> <code class="kn">import</code> <code class="n">BaseEstimator</code><code class="p">,</code> <code class="n">TransformerMixin</code>
<code class="kn">from</code> <code class="nn">sklearn.utils.validation</code> <code class="kn">import</code> <code class="n">check_array</code><code class="p">,</code> <code class="n">check_is_fitted</code>

<code class="k">class</code> <code class="nc">StandardScalerClone</code><code class="p">(</code><code class="n">BaseEstimator</code><code class="p">,</code> <code class="n">TransformerMixin</code><code class="p">):</code>
    <code class="k">def</code> <code class="fm">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">with_mean</code><code class="o">=</code><code class="bp">True</code><code class="p">):</code>  <code class="c1"># no *args or **kwargs!</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">with_mean</code> <code class="o">=</code> <code class="n">with_mean</code>

    <code class="k">def</code> <code class="nf">fit</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">X</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>  <code class="c1"># y is required even though we don't use it</code>
        <code class="n">X</code> <code class="o">=</code> <code class="n">check_array</code><code class="p">(</code><code class="n">X</code><code class="p">)</code>  <code class="c1"># checks that X is an array with finite float values</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">mean_</code> <code class="o">=</code> <code class="n">X</code><code class="o">.</code><code class="n">mean</code><code class="p">(</code><code class="n">axis</code><code class="o">=</code><code class="mi">0</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">scale_</code> <code class="o">=</code> <code class="n">X</code><code class="o">.</code><code class="n">std</code><code class="p">(</code><code class="n">axis</code><code class="o">=</code><code class="mi">0</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">n_features_in_</code> <code class="o">=</code> <code class="n">X</code><code class="o">.</code><code class="n">shape</code><code class="p">[</code><code class="mi">1</code><code class="p">]</code>  <code class="c1"># every estimator stores this in fit()</code>
        <code class="k">return</code> <code class="bp">self</code>  <code class="c1"># always return self!</code>

    <code class="k">def</code> <code class="nf">transform</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">X</code><code class="p">):</code>
        <code class="n">check_is_fitted</code><code class="p">(</code><code class="bp">self</code><code class="p">)</code>  <code class="c1"># looks for learned attributes (with trailing _)</code>
        <code class="n">X</code> <code class="o">=</code> <code class="n">check_array</code><code class="p">(</code><code class="n">X</code><code class="p">)</code>
        <code class="k">assert</code> <code class="bp">self</code><code class="o">.</code><code class="n">n_features_in_</code> <code class="o">==</code> <code class="n">X</code><code class="o">.</code><code class="n">shape</code><code class="p">[</code><code class="mi">1</code><code class="p">]</code>
        <code class="k">if</code> <code class="bp">self</code><code class="o">.</code><code class="n">with_mean</code><code class="p">:</code>
            <code class="n">X</code> <code class="o">=</code> <code class="n">X</code> <code class="o">-</code> <code class="bp">self</code><code class="o">.</code><code class="n">mean_</code>
        <code class="k">return</code> <code class="n">X</code> <code class="o">/</code> <code class="bp">self</code><code class="o">.</code><code class="n">scale_</code></pre>

<p>Here are a few things to note:</p>

<ul>
<li>
<p>The <code>sklearn.utils.validation</code> package contains several functions we can use to validate the inputs. For simplicity, we will skip such tests in the rest of this book, but production code should have them.</p>
</li>
<li>
<p>Scikit-Learn pipelines require the <code>fit()</code> method to have two arguments <code>X</code> and <code>y</code>, which is why we need the <code>y=None</code> argument even though we don’t use <code>y</code>.</p>
</li>
<li>
<p>All Scikit-Learn estimators set <code>n_features_in_</code> in the <code>fit()</code> method, and they ensure that the data passed to <code>transform()</code> or <code>predict()</code> has this number of features.</p>
</li>
<li>
<p>The <code>fit()</code> method must return <code>self</code>.</p>
</li>
<li>
<p>This implementation is not 100% complete: all estimators should set <code>feature_names_in_</code> in the <code>fit()</code> method when they are passed a DataFrame. Moreover, all transformers should provide a <code>get_feature_names_out()</code> method, as well as an <code>inverse_transform()</code> method when their transformation can be reversed. See the last exercise at the end of this chapter for more details.</p>
</li>
</ul>
<div data-type="tip"><h6>Tip</h6>
<p>You can check whether your custom estimator respects Scikit-Learn’s API by passing an instance to <code>check_estimator()</code> from the <code>sklearn.utils.estimator_checks</code> package. For the full API, check out <a href="https://scikit-learn.org/stable/developers/"><em class="hyperlink">https://scikit-learn.org/stable/developers/</em></a>.</p>
</div>

<p>A custom transformer can (and often does) use other estimators in its implementation. For example, below we see a custom transformer that uses a <code>KMeans</code> clusterer in the <code>fit()</code> method to identify the main clusters in the training data, and then uses <code>rbf_kernel()</code> in the <code>transform()</code> method to measure how similar each sample is to each cluster center:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.cluster</code> <code class="kn">import</code> <code class="n">KMeans</code>

<code class="k">class</code> <code class="nc">ClusterSimilarity</code><code class="p">(</code><code class="n">BaseEstimator</code><code class="p">,</code> <code class="n">TransformerMixin</code><code class="p">):</code>
    <code class="k">def</code> <code class="fm">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">n_clusters</code><code class="o">=</code><code class="mi">10</code><code class="p">,</code> <code class="n">gamma</code><code class="o">=</code><code class="mf">1.0</code><code class="p">,</code> <code class="n">random_state</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">n_clusters</code> <code class="o">=</code> <code class="n">n_clusters</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">gamma</code> <code class="o">=</code> <code class="n">gamma</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">random_state</code> <code class="o">=</code> <code class="n">random_state</code>

    <code class="k">def</code> <code class="nf">fit</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">X</code><code class="p">,</code> <code class="n">y</code><code class="o">=</code><code class="bp">None</code><code class="p">,</code> <code class="n">sample_weight</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">kmeans_</code> <code class="o">=</code> <code class="n">KMeans</code><code class="p">(</code><code class="bp">self</code><code class="o">.</code><code class="n">n_clusters</code><code class="p">,</code> <code class="n">random_state</code><code class="o">=</code><code class="bp">self</code><code class="o">.</code><code class="n">random_state</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">kmeans_</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">sample_weight</code><code class="o">=</code><code class="n">sample_weight</code><code class="p">)</code>
        <code class="k">return</code> <code class="bp">self</code>  <code class="c1"># always return self!</code>

    <code class="k">def</code> <code class="nf">transform</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">X</code><code class="p">):</code>
        <code class="k">return</code> <code class="n">rbf_kernel</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="bp">self</code><code class="o">.</code><code class="n">kmeans_</code><code class="o">.</code><code class="n">cluster_centers_</code><code class="p">,</code> <code class="n">gamma</code><code class="o">=</code><code class="bp">self</code><code class="o">.</code><code class="n">gamma</code><code class="p">)</code>

    <code class="k">def</code> <code class="nf">get_feature_names_out</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">names</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>
        <code class="k">return</code> <code class="p">[</code><code class="n">f</code><code class="s2">"Cluster {i} similarity"</code> <code class="k">for</code> <code class="n">i</code> <code class="ow">in</code> <code class="nb">range</code><code class="p">(</code><code class="bp">self</code><code class="o">.</code><code class="n">n_clusters</code><code class="p">)]</code></pre>

<p>As we will see in <a data-type="xref" href="ch09.xhtml#unsupervised_learning_chapter">Chapter 9</a>, K-Means is a clustering algorithm that locates clusters in the data. How many it searches for is controlled by the <code>n_clusters</code> hyperparameter. After training, the cluster centers are available via the <code>cluster_centers_</code> attribute. The <code>fit()</code> method of <code>KMeans</code> supports an optional argument <code>sample_weight</code> which lets the user specify the relative weights of the samples. K-Means is a stochastic algorithm, meaning that it relies on randomness to locate the clusters, so if you want reproducible results, you must set the <code>random_state</code> parameter. As you can see, despite the complexity of the task, the code is fairly straightforward. Now let’s use this custom transformer:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">cluster_simil</code> <code class="o">=</code> <code class="n">ClusterSimilarity</code><code class="p">(</code><code class="n">n_clusters</code><code class="o">=</code><code class="mi">10</code><code class="p">,</code> <code class="n">gamma</code><code class="o">=</code><code class="mf">1.</code><code class="p">,</code> <code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">)</code>
<code class="n">similarities</code> <code class="o">=</code> <code class="n">cluster_simil</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing</code><code class="p">[[</code><code class="s2">"latitude"</code><code class="p">,</code> <code class="s2">"longitude"</code><code class="p">]],</code>
                                           <code class="n">sample_weight</code><code class="o">=</code><code class="n">housing_labels</code><code class="p">)</code></pre>

<p>This code creates a <code>ClusterSimilarity</code> transformer, setting the number of clusters to 10 clusters. Then it calls <code>fit_transform()</code> with the latitude and longitude of every district in the training set, weighting each district by its median house value. The transformer uses K-Means to locate the clusters, then measures the Gaussian RBF similarity between each district and all 10 cluster centers. The result is a matrix with one row per district, and one column per cluster. Let’s look at the first 3 rows, rounding to 2 decimals:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">similarities</code><code class="p">[:</code><code class="mi">3</code><code class="p">]</code><code class="o">.</code><code class="n">round</code><code class="p">(</code><code class="mi">2</code><code class="p">)</code>
<code class="go">array([[0.  , 0.14, 0.  , 0.  , 0.  , 0.08, 0.  , 0.99, 0.  , 0.6 ],</code>
<code class="go">       [0.63, 0.  , 0.99, 0.  , 0.  , 0.  , 0.04, 0.  , 0.11, 0.  ],</code>
<code class="go">       [0.  , 0.29, 0.  , 0.  , 0.01, 0.44, 0.  , 0.7 , 0.  , 0.3 ]])</code></pre>

<p><a data-type="xref" href="#district_cluster_plot">Figure 2-19</a> shows the 10 cluster centers found by K-Means. The districts are colored according to their geographic similarity to their closest cluster center. As you can see, most clusters are located in highly populated and expensive areas.</p>

<figure class="smallerseventy"><div id="district_cluster_plot" class="figure">
<img src="Images/mls3_0219.png" alt="mls3 0219" width="2752" height="2009"/>
<h6><span class="label">Figure 2-19. </span>Gaussian RBF similarity to the nearest cluster center</h6>
</div></figure>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Transformation Pipelines"><div class="sect2" id="idm46324213795456">
<h2>Transformation Pipelines</h2>

<p>As<a data-type="indexterm" data-primary="data preparation" data-secondary="transformation pipelines" id="idm46324213013488"/><a data-type="indexterm" data-primary="transformations" data-secondary="transformation pipelines" id="idm46324213012512"/><a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="transformation sequences" id="idm46324213011600"/> you can see, there are many data transformation steps that need to be executed in the right order. Fortunately, Scikit-Learn provides the <code>Pipeline</code> class to help with such sequences of transformations. Here is a small pipeline for numerical attributes, which will first impute then scale the input features:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.pipeline</code> <code class="kn">import</code> <code class="n">Pipeline</code>

<code class="n">num_pipeline</code> <code class="o">=</code> <code class="n">Pipeline</code><code class="p">([</code>
    <code class="p">(</code><code class="s2">"impute"</code><code class="p">,</code> <code class="n">SimpleImputer</code><code class="p">(</code><code class="n">strategy</code><code class="o">=</code><code class="s2">"median"</code><code class="p">)),</code>
    <code class="p">(</code><code class="s2">"standardize"</code><code class="p">,</code> <code class="n">StandardScaler</code><code class="p">()),</code>
<code class="p">])</code></pre>

<p>The <code>Pipeline</code> constructor takes a list of name/estimator pairs (2-tuples) defining a sequence of steps. The names can be anything you like, as long as they are unique and don’t contain double underscores, <code>__</code>. They will be useful later when we discuss hyperparameter tuning. The estimators must all be transformers (i.e., they must have a <code>fit_transform()</code> method), except for the last one, which can be anything: a transformer, a predictor, or any other type of estimator.</p>
<div data-type="tip"><h6>Tip</h6>
<p>In a Jupyter notebook, if you <code>import sklearn</code> and run <code>sklearn.set_config(display="diagram")</code>, all Scikit-Learn estimators will be rendered as interactive diagrams. This is particularly useful to visual pipelines. To visualize <code>num_pipeline</code>, run a cell with <code>num_pipeline</code> as the last line. Clicking on an estimator will show more details.</p>
</div>

<p>If you don’t want to bother naming the transformers, you can use the <code>make_pipeline()</code> function instead: it just takes a list of transformers as positional arguments, and it creates a <code>Pipeline</code> using the names of the transformers’ classes, in lower case and without underscores (e.g., “simpleimputer”). In case multiple transformers have the same name, an index is appended to their names (e.g., “foo-1”, “foo-2”, etc.).</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.pipeline</code> <code class="kn">import</code> <code class="n">make_pipeline</code>

<code class="n">num_pipeline</code> <code class="o">=</code> <code class="n">make_pipeline</code><code class="p">(</code><code class="n">SimpleImputer</code><code class="p">(</code><code class="n">strategy</code><code class="o">=</code><code class="s2">"median"</code><code class="p">),</code> <code class="n">StandardScaler</code><code class="p">())</code></pre>

<p>When you call the pipeline’s <code>fit()</code> method, it calls <code>fit_transform()</code> sequentially on all transformers, passing the output of each call as the parameter to the next call until it reaches the final estimator, for which it just calls the <code>fit()</code> method.</p>

<p>The pipeline exposes the same methods as the final estimator. In this example, the last estimator is a <code>StandardScaler</code> which is a transformer so the pipeline also acts like a transformer. If you call the pipeline’s <code>transform()</code> method, it will sequentially apply all the transformations to the data. If the last estimator were a predictor instead of a transformer, then the pipeline would have a <code>predict()</code> method rather than a <code>transform()</code> method. Calling it would sequentially apply all the transformations to the data and pass the result to the predictor’s <code>predict()</code> method.</p>

<p>Let’s call the pipeline’s <code>fit_transform()</code> method and look at the output’s first two rows, rounded to 2 decimals:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_num_prepared</code> <code class="o">=</code> <code class="n">num_pipeline</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing_num</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_num_prepared</code><code class="p">[:</code><code class="mi">2</code><code class="p">]</code><code class="o">.</code><code class="n">round</code><code class="p">(</code><code class="mi">2</code><code class="p">)</code>
<code class="go">array([[-1.42,  1.01,  1.86,  0.31,  1.37,  0.14,  1.39, -0.94],</code>
<code class="go">       [ 0.6 , -0.7 ,  0.91, -0.31, -0.44, -0.69, -0.37,  1.17]])</code></pre>

<p>As we saw earlier, we can recover a nice DataFrame using the pipeline’s <code>get_feature_names_out()</code> method:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">df_housing_num_prepared</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">DataFrame</code><code class="p">(</code>
    <code class="n">housing_num_prepared</code><code class="p">,</code> <code class="n">columns</code><code class="o">=</code><code class="n">num_pipeline</code><code class="o">.</code><code class="n">get_feature_names_out</code><code class="p">(),</code>
    <code class="n">index</code><code class="o">=</code><code class="n">housing_num</code><code class="o">.</code><code class="n">index</code><code class="p">)</code></pre>

<p>Pipelines support indexing, for example <code>pipeline[1]</code> returns the second estimator in the pipeline, and <code>pipeline[:-1]</code> returns a <code>Pipeline</code> object containing all but the last estimator. You can also access the estimators via the <code>steps</code> attribute, which is a list of name/estimator pairs, or via the <code>name_steps</code> dictionary attribute which maps the names to the estimators. For example <code>num_pipeline["simpleimputer"]</code> returns the estimator named <code>"simpleimputer"</code>.</p>

<p>So far, we have handled the categorical columns and the numerical columns separately. It would be more convenient to have a single transformer capable of handling all columns, applying the appropriate transformations to each column. For this, you can use a <code>ColumnTransformer</code>. For example, the following <code>ColumnTransformer</code> will apply <code>num_pipeline</code> (the one we just defined) to the numerical attributes, and <code>cat_pipeline</code> to the categorical attribute:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.compose</code> <code class="kn">import</code> <code class="n">ColumnTransformer</code>

<code class="n">num_attribs</code> <code class="o">=</code> <code class="p">[</code><code class="s2">"longitude"</code><code class="p">,</code> <code class="s2">"latitude"</code><code class="p">,</code> <code class="s2">"housing_median_age"</code><code class="p">,</code> <code class="s2">"total_rooms"</code><code class="p">,</code>
               <code class="s2">"total_bedrooms"</code><code class="p">,</code> <code class="s2">"population"</code><code class="p">,</code> <code class="s2">"households"</code><code class="p">,</code> <code class="s2">"median_income"</code><code class="p">]</code>
<code class="n">cat_attribs</code> <code class="o">=</code> <code class="p">[</code><code class="s2">"ocean_proximity"</code><code class="p">]</code>

<code class="n">cat_pipeline</code> <code class="o">=</code> <code class="n">make_pipeline</code><code class="p">(</code>
    <code class="n">SimpleImputer</code><code class="p">(</code><code class="n">strategy</code><code class="o">=</code><code class="s2">"most_frequent"</code><code class="p">),</code>
    <code class="n">OneHotEncoder</code><code class="p">(</code><code class="n">handle_unknown</code><code class="o">=</code><code class="s2">"ignore"</code><code class="p">))</code>

<code class="n">preprocessing</code> <code class="o">=</code> <code class="n">ColumnTransformer</code><code class="p">([</code>
    <code class="p">(</code><code class="s2">"num"</code><code class="p">,</code> <code class="n">num_pipeline</code><code class="p">,</code> <code class="n">num_attribs</code><code class="p">),</code>
    <code class="p">(</code><code class="s2">"cat"</code><code class="p">,</code> <code class="n">cat_pipeline</code><code class="p">,</code> <code class="n">cat_attribs</code><code class="p">),</code>
<code class="p">])</code></pre>

<p>First we import the <code>ColumnTransformer</code> class, next we define the list of numerical and categorical column names, we construct a simple pipeline for categorical attributes, and lastly we construct a <code>ColumnTransformer</code>. Its constructor requires a list of triplets (3-tuples), each containing a name (which must be unique and not contain double underscores), a transformer, and a list of names (or indices) of columns that the transformer should be applied to.</p>
<div data-type="tip"><h6>Tip</h6>
<p>Instead of using a transformer, you can specify the string <code>"drop"</code> if you want the columns to be dropped, or you can specify <code>"passthrough"</code> if you want the columns to be left untouched. By default, the remaining columns (i.e., the ones that were not listed) will be dropped, but you can set the <code>remainder</code> hyperparameter to any transformer (or to <code>"passthrough"</code>) if you want these columns to be handled differently.</p>
</div>

<p>Since listing all the column names is not very convenient, Scikit-Learn provides a <code>make_column_selector()</code> function that returns a selector function you can use to automatically select all the features of a given type, such as numerical or categorical. This selector function can be passed to the <code>ColumnTransformer</code> instead of column names or indices. Moreover, if you don’t care about naming the transformers, you can use <code>make_column_transformer()</code> which chooses the names for you, just like <code>make_pipeline()</code> does. For example, the following code creates the same <code>ColumnTransformer</code> as above, except the transformers are automatically named <code>"pipeline-1"</code> and <code>"pipeline-2"</code> instead of <code>"num"</code> and <code>"cat"</code>:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.compose</code> <code class="kn">import</code> <code class="n">make_column_selector</code><code class="p">,</code> <code class="n">make_column_transformer</code>

<code class="n">preprocessing</code> <code class="o">=</code> <code class="n">make_column_transformer</code><code class="p">(</code>
    <code class="p">(</code><code class="n">num_pipeline</code><code class="p">,</code> <code class="n">make_column_selector</code><code class="p">(</code><code class="n">dtype_include</code><code class="o">=</code><code class="n">np</code><code class="o">.</code><code class="n">number</code><code class="p">)),</code>
    <code class="p">(</code><code class="n">cat_pipeline</code><code class="p">,</code> <code class="n">make_column_selector</code><code class="p">(</code><code class="n">dtype_include</code><code class="o">=</code><code class="n">np</code><code class="o">.</code><code class="n">object</code><code class="p">)),</code>
<code class="p">)</code></pre>

<p>Now we’re ready to apply this <code>ColumnTransformer</code> to the housing data:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">housing_prepared</code> <code class="o">=</code> <code class="n">preprocessing</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing</code><code class="p">)</code></pre>

<p>Great! We have a preprocessing pipeline that takes the entire training data and applies each transformer to the appropriate columns, then concatenates the transformed columns horizontally (transformers must never change the number of rows). Once again this returns a NumPy array, but you can get the column names using <code>preprocessing.get_feature_names_out()</code> and wrap the data in a nice DataFrame as we did before.</p>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>The <code>OneHotEncoder</code> returns a sparse matrix, while the <code>num_pipeline</code> returns a dense matrix. When there is such a mix of sparse and dense matrices, the <code>ColumnTransformer</code> estimates the density of the final matrix (i.e., the ratio of nonzero cells), and it returns a sparse matrix if the density is lower than a given threshold (by default, <code>sparse_threshold=0.3</code>). In this example, it returns a dense matrix.</p>
</div>

<p>Your project’s going really well, you’re almost ready to train some models! You now want to create a single pipeline that will perform all the transformations you’ve experimented with up to now. Let’s recap what the pipeline will do and why:</p>

<ul>
<li>
<p>Missing values in numerical features will be imputed by replacing them with the median, as most ML algorithms don’t expect missing values. As for the categorical feature, any missing values will be replaced by the most frequent category.</p>
</li>
<li>
<p>The categorical feature will be one-hot encoded, as most ML algorithms only accept numerical inputs.</p>
</li>
<li>
<p>A few ratio features will be computed and added: <code>bedrooms_ratio</code>, <code>rooms_per_house</code> and <code>people_per_house</code>. Hopefully these will better correlate with the median housing value, and thereby help the ML models.</p>
</li>
<li>
<p>A few cluster similarity features will also be added. These will likely be more useful to the model than latitude and longitude.</p>
</li>
<li>
<p>Features with a long tail will be replaced by their logarithm, as most models prefer features with roughly uniform or Gaussian distributions.</p>
</li>
<li>
<p>All numerical features will be standardized, as most ML algorithms prefer when all features have roughly the same scale.</p>
</li>
</ul>

<p>The code that builds the pipeline to do all of this has no secret for you by now:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">def</code> <code class="nf">column_ratio</code><code class="p">(</code><code class="n">X</code><code class="p">):</code>
    <code class="k">return</code> <code class="n">X</code><code class="p">[:,</code> <code class="p">[</code><code class="mi">0</code><code class="p">]]</code> <code class="o">/</code> <code class="n">X</code><code class="p">[:,</code> <code class="p">[</code><code class="mi">1</code><code class="p">]]</code>

<code class="k">def</code> <code class="nf">ratio_pipeline</code><code class="p">(</code><code class="n">name</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>
    <code class="k">return</code> <code class="n">make_pipeline</code><code class="p">(</code>
        <code class="n">SimpleImputer</code><code class="p">(</code><code class="n">strategy</code><code class="o">=</code><code class="s2">"median"</code><code class="p">),</code>
        <code class="n">FunctionTransformer</code><code class="p">(</code><code class="n">column_ratio</code><code class="p">,</code>
                            <code class="n">feature_names_out</code><code class="o">=</code><code class="k">lambda</code> <code class="n">input_features</code><code class="p">:</code> <code class="p">[</code><code class="n">name</code><code class="p">]),</code>
        <code class="n">StandardScaler</code><code class="p">())</code>

<code class="n">log_pipeline</code> <code class="o">=</code> <code class="n">make_pipeline</code><code class="p">(</code><code class="n">SimpleImputer</code><code class="p">(</code><code class="n">strategy</code><code class="o">=</code><code class="s2">"median"</code><code class="p">),</code>
                             <code class="n">FunctionTransformer</code><code class="p">(</code><code class="n">np</code><code class="o">.</code><code class="n">log</code><code class="p">),</code>
                             <code class="n">StandardScaler</code><code class="p">())</code>
<code class="n">cluster_simil</code> <code class="o">=</code> <code class="n">ClusterSimilarity</code><code class="p">(</code><code class="n">n_clusters</code><code class="o">=</code><code class="mi">10</code><code class="p">,</code> <code class="n">gamma</code><code class="o">=</code><code class="mf">1.</code><code class="p">,</code> <code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">)</code>
<code class="n">default_num_pipeline</code> <code class="o">=</code> <code class="n">make_pipeline</code><code class="p">(</code><code class="n">SimpleImputer</code><code class="p">(</code><code class="n">strategy</code><code class="o">=</code><code class="s2">"median"</code><code class="p">),</code>
                                     <code class="n">StandardScaler</code><code class="p">())</code>
<code class="n">preprocessing</code> <code class="o">=</code> <code class="n">ColumnTransformer</code><code class="p">([</code>
        <code class="p">(</code><code class="s2">"bedrooms_ratio"</code><code class="p">,</code> <code class="n">ratio_pipeline</code><code class="p">(</code><code class="s2">"bedrooms_ratio"</code><code class="p">),</code>
                           <code class="p">[</code><code class="s2">"total_bedrooms"</code><code class="p">,</code> <code class="s2">"total_rooms"</code><code class="p">]),</code>
        <code class="p">(</code><code class="s2">"rooms_per_house"</code><code class="p">,</code> <code class="n">ratio_pipeline</code><code class="p">(</code><code class="s2">"rooms_per_house"</code><code class="p">),</code>
                            <code class="p">[</code><code class="s2">"total_rooms"</code><code class="p">,</code> <code class="s2">"households"</code><code class="p">]),</code>
        <code class="p">(</code><code class="s2">"people_per_house"</code><code class="p">,</code> <code class="n">ratio_pipeline</code><code class="p">(</code><code class="s2">"people_per_house"</code><code class="p">),</code>
                             <code class="p">[</code><code class="s2">"population"</code><code class="p">,</code> <code class="s2">"households"</code><code class="p">]),</code>
        <code class="p">(</code><code class="s2">"log"</code><code class="p">,</code> <code class="n">log_pipeline</code><code class="p">,</code> <code class="p">[</code><code class="s2">"total_bedrooms"</code><code class="p">,</code> <code class="s2">"total_rooms"</code><code class="p">,</code>
                               <code class="s2">"population"</code><code class="p">,</code> <code class="s2">"households"</code><code class="p">,</code> <code class="s2">"median_income"</code><code class="p">]),</code>
        <code class="p">(</code><code class="s2">"geo"</code><code class="p">,</code> <code class="n">cluster_simil</code><code class="p">,</code> <code class="p">[</code><code class="s2">"latitude"</code><code class="p">,</code> <code class="s2">"longitude"</code><code class="p">]),</code>
        <code class="p">(</code><code class="s2">"cat"</code><code class="p">,</code> <code class="n">cat_pipeline</code><code class="p">,</code> <code class="n">make_column_selector</code><code class="p">(</code><code class="n">dtype_include</code><code class="o">=</code><code class="n">np</code><code class="o">.</code><code class="n">object</code><code class="p">)),</code>
    <code class="p">],</code>
    <code class="n">remainder</code><code class="o">=</code><code class="n">default_num_pipeline</code><code class="p">)</code>  <code class="c1"># one column remaining: housing_median_age</code></pre>

<p>If you run this column transformer, it performs all the transformations and outputs a NumPy array with 24 features:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_prepared</code> <code class="o">=</code> <code class="n">preprocessing</code><code class="o">.</code><code class="n">fit_transform</code><code class="p">(</code><code class="n">housing</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_prepared</code><code class="o">.</code><code class="n">shape</code>
<code class="go">(16512, 24)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">preprocessing</code><code class="o">.</code><code class="n">get_feature_names_out</code><code class="p">()</code>
<code class="go">array(['bedrooms_ratio__bedrooms_ratio',</code>
<code class="go">       'rooms_per_house__rooms_per_house',</code>
<code class="go">       'people_per_house__people_per_house', 'log__total_bedrooms',</code>
<code class="go">       'log__total_rooms', 'log__population', 'log__households',</code>
<code class="go">       'log__median_income', 'geo__Cluster 0 similarity', [...],</code>
<code class="go">       'geo__Cluster 9 similarity', 'cat__ocean_proximity_&lt;1H OCEAN',</code>
<code class="go">       'cat__ocean_proximity_INLAND', 'cat__ocean_proximity_ISLAND',</code>
<code class="go">       'cat__ocean_proximity_NEAR BAY', 'cat__ocean_proximity_NEAR OCEAN',</code>
<code class="go">       'remainder__housing_median_age'], dtype=object)</code></pre>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Select and Train a Model"><div class="sect1" id="idm46324212422064">
<h1>Select and Train a Model</h1>

<p>At last! You<a data-type="indexterm" data-primary="example project" data-secondary="model selection and training" id="idm46324213014176"/><a data-type="indexterm" data-primary="model selection" id="idm46324212299312"/><a data-type="indexterm" data-primary="training models" data-secondary="example project" id="idm46324212298640"/><a data-type="indexterm" data-primary="models" data-secondary="training" id="idm46324212297696"/> framed the problem, you got the data and explored it, you sampled a training set and a test set, and you wrote a preprocessing pipeline to automatically clean up and prepare your data for Machine Learning algorithms. You are now ready to select and train a Machine Learning model.</p>








<section data-type="sect2" data-pdf-bookmark="Training and Evaluating on the Training Set"><div class="sect2" id="idm46324212296496">
<h2>Training and Evaluating on the Training Set</h2>

<p>The good news is that thanks to all these previous steps, things are now going to be easy! You decide to train a very basic Linear Regression model to get started:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.linear_model</code> <code class="kn">import</code> <code class="n">LinearRegression</code>

<code class="n">lin_reg</code> <code class="o">=</code> <code class="n">make_pipeline</code><code class="p">(</code><code class="n">preprocessing</code><code class="p">,</code> <code class="n">LinearRegression</code><code class="p">())</code>
<code class="n">lin_reg</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">)</code></pre>

<p>Done! You now have a working Linear Regression model. Let’s try it out on the training set, looking at the first 5 predictions and comparing them to the labels:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_predictions</code> <code class="o">=</code> <code class="n">lin_reg</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">housing</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_predictions</code><code class="p">[:</code><code class="mi">5</code><code class="p">]</code><code class="o">.</code><code class="n">round</code><code class="p">(</code><code class="o">-</code><code class="mi">2</code><code class="p">)</code>  <code class="c1"># -2 = rounded to the nearest hundred</code>
<code class="go">array([243700., 372400., 128800.,  94400., 328300.])</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">housing_labels</code><code class="o">.</code><code class="n">iloc</code><code class="p">[:</code><code class="mi">5</code><code class="p">]</code><code class="o">.</code><code class="n">values</code>
<code class="go">array([458300., 483800., 101700.,  96100., 361800.])</code></pre>

<p>Well, it works, but not always: the first prediction is way off (by over $200,000!), while the other predictions are better: two are off by about 25%, and two are off by less than 10%. Remember that you chose to use the RMSE as your performance measure, so you want to measure this regression model’s RMSE on the whole training set using<a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="mean_squared_error function" id="idm46324212182880"/> Scikit-Learn’s <code>mean_squared_error()</code> function, with the <code>squared</code> argument set to <code>False</code>:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">from</code> <code class="nn">sklearn.metrics</code> <code class="kn">import</code> <code class="n">mean_squared_error</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">lin_rmse</code> <code class="o">=</code> <code class="n">mean_squared_error</code><code class="p">(</code><code class="n">housing_labels</code><code class="p">,</code> <code class="n">housing_predictions</code><code class="p">,</code>
<code class="gp">... </code>                              <code class="n">squared</code><code class="o">=</code><code class="kc">False</code><code class="p">)</code>
<code class="gp">...</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">lin_rmse</code>
<code class="go">68687.89176589991</code></pre>

<p>This is better than nothing, but clearly not a great score: most districts’ <code>median_housing_values</code> range between $120,000 and $265,000, so a typical prediction error of $68,628 is really not very satisfying. This is an example of a model underfitting the training data. When this happens it can mean that the features do not provide enough <span class="keep-together">information</span> to make good predictions, or that the model is not powerful enough. As we saw in the previous chapter, the main ways to fix underfitting are to select a more powerful model, to feed the training algorithm with better features, or to reduce the constraints on the model. This model is not regularized, which rules out the last option. You could try to add more features, but first you want to try a more complex model to see how it does.</p>

<p>So you decide to try a <code>DecisionTreeRegressor</code>, as this is a fairly powerful model capable of finding complex nonlinear relationships in the data (Decision Trees are presented in more detail in <a data-type="xref" href="ch06.xhtml#trees_chapter">Chapter 6</a>):</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.tree</code> <code class="kn">import</code> <code class="n">DecisionTreeRegressor</code>

<code class="n">tree_reg</code> <code class="o">=</code> <code class="n">make_pipeline</code><code class="p">(</code><code class="n">preprocessing</code><code class="p">,</code> <code class="n">DecisionTreeRegressor</code><code class="p">(</code><code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">))</code>
<code class="n">tree_reg</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">)</code></pre>

<p>Now that the model is trained, you evaluate it on the training set:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">housing_predictions</code> <code class="o">=</code> <code class="n">tree_reg</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">housing</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tree_rmse</code> <code class="o">=</code> <code class="n">mean_squared_error</code><code class="p">(</code><code class="n">housing_labels</code><code class="p">,</code> <code class="n">housing_predictions</code><code class="p">,</code>
<code class="gp">... </code>                              <code class="n">squared</code><code class="o">=</code><code class="kc">False</code><code class="p">)</code>
<code class="gp">...</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tree_rmse</code>
<code class="go">0.0</code></pre>

<p>Wait, what!? No error at all? Could this model really be absolutely perfect? Of course, it is much more likely that the model has badly overfit the data. How can you be sure? As we saw earlier, you don’t want to touch the test set until you are ready to launch a model you are confident about, so you need to use part of the training set for training and part of it for model validation.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Better Evaluation Using Cross-Validation"><div class="sect2" id="idm46324212295904">
<h2>Better Evaluation Using Cross-Validation</h2>

<p>One<a data-type="indexterm" data-primary="Decision Trees" data-secondary="evaluating" id="idm46324211998720"/><a data-type="indexterm" data-primary="cross-validation" id="idm46324211997712"/> way to evaluate the Decision Tree model would be to use the <code>train_test_split()</code> function to split the training set into a smaller training set and a validation set, then train your models against the smaller training set and evaluate them against the validation set. It’s a bit of work, but nothing too difficult, and it would work fairly well.</p>

<p>A<a data-type="indexterm" data-primary="K-fold cross-validation" id="idm46324211996112"/><a data-type="indexterm" data-primary="folds" id="idm46324211995376"/><a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="K-fold cross-validation feature" id="idm46324211994704"/> great alternative is to use Scikit-Learn’s <em>K-fold cross-validation</em> feature. The following code randomly splits the training set into 10 non-overlapping subsets called <em>folds</em>, then it trains and evaluates the Decision Tree model 10 times, picking a different fold for evaluation every time and using the other 9 folds for training. The result is an array containing the 10 evaluation scores:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.model_selection</code> <code class="kn">import</code> <code class="n">cross_val_score</code>

<code class="n">tree_rmses</code> <code class="o">=</code> <code class="o">-</code><code class="n">cross_val_score</code><code class="p">(</code><code class="n">tree_reg</code><code class="p">,</code> <code class="n">housing</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">,</code>
                              <code class="n">scoring</code><code class="o">=</code><code class="s2">"neg_root_mean_squared_error"</code><code class="p">,</code> <code class="n">cv</code><code class="o">=</code><code class="mi">10</code><code class="p">)</code></pre>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>Scikit-Learn’s cross-validation features expect a utility function (greater is better) rather than a cost function (lower is better), so the scoring function is actually the opposite of the RMSE. It’s a negative value, which is why we need to switch the sign of the output to get the RMSE scores.</p>
</div>

<p>Let’s look at the results:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">pd</code><code class="o">.</code><code class="n">Series</code><code class="p">(</code><code class="n">tree_rmses</code><code class="p">)</code><code class="o">.</code><code class="n">describe</code><code class="p">()</code>
<code class="go">count       10.000000</code>
<code class="go">mean     66868.027288</code>
<code class="go">std       2060.966425</code>
<code class="go">min      63649.536493</code>
<code class="go">25%      65338.078316</code>
<code class="go">50%      66801.953094</code>
<code class="go">75%      68229.934454</code>
<code class="go">max      70094.778246</code>
<code class="go">dtype: float64</code></pre>

<p>Now the Decision Tree doesn’t look as good as it did earlier. In fact, it seems to perform almost as poorly as the Linear Regression model! Notice that cross-validation allows you to get not only an estimate of the performance of your model, but also a measure of how precise this estimate is (i.e., its standard deviation). The Decision Tree has an RMSE of about 66,868, with a standard deviation of about 2,061. You would not have this information if you just used one validation set. But cross-validation comes at the cost of training the model several times, so it is not always feasible.</p>

<p>If you compute the same metric for the Linear Regression model, you will find that the mean RMSE is 69,858 and the standard deviation is 4,182. So the Decision Tree model seems to perform very slightly better than the linear model, but only marginally better due to severe overfitting. We know there’s an overfitting problem because the training error is low (actually zero) while the validation error is high.</p>

<p>Let’s try one last model now: the <code>RandomForestRegressor</code>. As we will see in <a data-type="xref" href="ch07.xhtml#ensembles_chapter">Chapter 7</a>, Random Forests work by training many Decision Trees on random subsets of the features, then averaging out their predictions. Such models composed of many other models are called <em>ensembles</em>: they are capable of boosting the performance of the underlying model (in this case, Decision Trees). The code is much the same as earlier:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.ensemble</code> <code class="kn">import</code> <code class="n">RandomForestRegressor</code>

<code class="n">forest_reg</code> <code class="o">=</code> <code class="n">make_pipeline</code><code class="p">(</code><code class="n">preprocessing</code><code class="p">,</code>
                           <code class="n">RandomForestRegressor</code><code class="p">(</code><code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">))</code>
<code class="n">forest_rmses</code> <code class="o">=</code> <code class="o">-</code><code class="n">cross_val_score</code><code class="p">(</code><code class="n">forest_reg</code><code class="p">,</code> <code class="n">housing</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">,</code>
                                <code class="n">scoring</code><code class="o">=</code><code class="s2">"neg_root_mean_squared_error"</code><code class="p">,</code> <code class="n">cv</code><code class="o">=</code><code class="mi">10</code><code class="p">)</code></pre>

<p>Let’s look at these scores:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">pd</code><code class="o">.</code><code class="n">Series</code><code class="p">(</code><code class="n">forest_rmses</code><code class="p">)</code><code class="o">.</code><code class="n">describe</code><code class="p">()</code>
<code class="go">count       10.000000</code>
<code class="go">mean     47019.561281</code>
<code class="go">std       1033.957120</code>
<code class="go">min      45458.112527</code>
<code class="go">25%      46464.031184</code>
<code class="go">50%      46967.596354</code>
<code class="go">75%      47325.694987</code>
<code class="go">max      49243.765795</code>
<code class="go">dtype: float64</code></pre>

<p>Wow, this is much better: Random Forests really look very promising for this task! However, if you train a <code>RandomForest</code> and measure the RMSE on the training set, you will find about 17,474: that’s much lower, meaning that there’s still quite a lot of overfitting going on. Possible solutions are to simplify the model, constrain it (i.e., regularize it), or get a lot more training data. Before you dive much deeper into Random Forests, however, you should try out many other models from various categories of Machine Learning algorithms (e.g., several Support Vector Machines with different kernels, and possibly a neural network), without spending too much time tweaking the hyperparameters. The goal is to shortlist a few (two to five) promising models.</p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Fine-Tune Your Model"><div class="sect1" id="idm46324211808704">
<h1>Fine-Tune Your Model</h1>

<p>Let’s assume<a data-type="indexterm" data-primary="example project" data-secondary="model fine-tuning" id="EPfine02"/><a data-type="indexterm" data-primary="models" data-secondary="fine-tuning" id="Mfine02"/><a data-type="indexterm" data-primary="hyperparameters" data-secondary="hyperparameter tuning" id="idm46324211802592"/> that you now have a shortlist of promising models. You now need to fine-tune them. Let’s look at a few ways you can do that.</p>








<section data-type="sect2" data-pdf-bookmark="Grid Search"><div class="sect2" id="idm46324211801392">
<h2>Grid Search</h2>

<p>One option would be to fiddle with the hyperparameters manually, until you find a great combination of hyperparameter values. This would be very tedious work, and you may not have time to explore many combinations.</p>

<p>Instead,<a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="GridSearchCV" id="idm46324211799280"/> you can use Scikit-Learn’s <code>GridSearchCV</code> class to search for you. All you need to do is tell it which hyperparameters you want it to experiment with and what values to try out, and it will use cross-validation to evaluate all the possible combinations of hyperparameter values. For example, the following code searches for the best combination of hyperparameter values for the <code>RandomForestRegressor</code>:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.model_selection</code> <code class="kn">import</code> <code class="n">GridSearchCV</code>

<code class="n">full_pipeline</code> <code class="o">=</code> <code class="n">Pipeline</code><code class="p">([</code>
    <code class="p">(</code><code class="s2">"preprocessing"</code><code class="p">,</code> <code class="n">preprocessing</code><code class="p">),</code>
    <code class="p">(</code><code class="s2">"random_forest"</code><code class="p">,</code> <code class="n">RandomForestRegressor</code><code class="p">(</code><code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">)),</code>
<code class="p">])</code>
<code class="n">param_grid</code> <code class="o">=</code> <code class="p">[</code>
    <code class="p">{</code><code class="s1">'preprocessing__geo__n_clusters'</code><code class="p">:</code> <code class="p">[</code><code class="mi">5</code><code class="p">,</code> <code class="mi">8</code><code class="p">,</code> <code class="mi">10</code><code class="p">],</code>
     <code class="s1">'random_forest__max_features'</code><code class="p">:</code> <code class="p">[</code><code class="mi">4</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">8</code><code class="p">]},</code>
    <code class="p">{</code><code class="s1">'preprocessing__geo__n_clusters'</code><code class="p">:</code> <code class="p">[</code><code class="mi">10</code><code class="p">,</code> <code class="mi">15</code><code class="p">],</code>
     <code class="s1">'random_forest__max_features'</code><code class="p">:</code> <code class="p">[</code><code class="mi">6</code><code class="p">,</code> <code class="mi">8</code><code class="p">,</code> <code class="mi">10</code><code class="p">]},</code>
<code class="p">]</code>
<code class="n">grid_search</code> <code class="o">=</code> <code class="n">GridSearchCV</code><code class="p">(</code><code class="n">full_pipeline</code><code class="p">,</code> <code class="n">param_grid</code><code class="p">,</code> <code class="n">cv</code><code class="o">=</code><code class="mi">3</code><code class="p">,</code>
                           <code class="n">scoring</code><code class="o">=</code><code class="s1">'neg_root_mean_squared_error'</code><code class="p">)</code>
<code class="n">grid_search</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">)</code></pre>

<p>Notice that you can refer to any hyperparameter of any estimator in a pipeline, even if this estimator is nested deep inside several pipelines and column transformers. For example, when Scikit-Learn sees <code>"preprocessing__geo__n_clusters"</code>, it splits this string at the double underscores, then it looks for an estimator named <code>"preprocessing"</code> inside the pipeline and finds the preprocessing <code>ColumnTransformer</code>. Then it looks for a transformer named <code>"geo"</code> inside this <code>ColumnTransformer</code> and finds the <code>ClusterSimilarity</code> transformer we used on the latitude and longitude attributes. The it finds this transformer’s <code>n_clusters</code> hyperparameter. Similarly, <code>random_forest__max_features</code> refers to the <code>max_features</code> hyperparameter of the estimator named “random_forest”, which is of course the <code>RandomForest</code> model (the <code>max_features</code> hyperparameter will be explained in <a data-type="xref" href="ch07.xhtml#ensembles_chapter">Chapter 7</a>).</p>
<div data-type="tip"><h6>Tip</h6>
<p>Wrapping preprocessing steps in a Scikit-Learn pipeline allows you to tune the preprocessing hyperparameters along with the model hyperparameters. This is a good thing since they often interact. For example, perhaps increasing <code>n_clusters</code> requires increasing <code>max_features</code> as well. If fitting the pipeline transformers is computationally expensive, you can set the pipeline’s <code>memory</code> hyperparameter to the path of a caching directory: when you first fit the pipeline, Scikit-Learn will save the fitted transformers to this directory. If you then fit the pipeline again with the same hyperparameters, Scikit-Learn will just load the cached transformers.</p>
</div>

<p>There are two dictionaries in this <code>param_grid</code>, so <code>GridSearchCV</code> will first evaluate all 3 × 3 = 9 combinations of <code>n_clusters</code> and <code>max_features</code> hyperparameter values specified in the first <code>dict</code>, then it will try all 2 × 3 = 6 combinations of hyperparameter values in the second <code>dict</code>. So in total the grid search will explore 9 + 6 = 15 combinations of hyperparameter values, and it will train the pipeline 3 times per combination, since we are using three-fold cross validation. So there will be a grand total of 15 × 3 = 45 rounds of training! It may take a while, but when it is done you can get the best combination of parameters like this:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">grid_search</code><code class="o">.</code><code class="n">best_params_</code>
<code class="go">{'preprocessing__geo__n_clusters': 15, 'random_forest__max_features': 6}</code></pre>

<p>In this example, the best model is obtained by setting <code>n_clusters</code> to 15 and <code>max_features</code> to 8.</p>
<div data-type="tip"><h6>Tip</h6>
<p>Since 15 is the maximum value that was evaluated for <code>n_clusters</code>, you should probably try searching again with higher values; the score may continue to improve.</p>
</div>

<p>The best estimator is available using <code>grid_search.best_estimator_</code>. If <code>GridSearchCV</code> is initialized with <code>refit=True</code> (which is the default), then once it finds the best estimator using cross-validation, it retrains it on the whole training set. This is usually a good idea, since feeding it more data will likely improve its <span class="keep-together">performance</span>.</p>

<p>The evaluation scores are available using <code>grid_search.cv_results_</code>. This is a dictionary, but if you wrap it in a DataFrame, you get a nice list of all the test scores for each combination of hyperparameters and for each cross-validation split, as well as the mean test score across all splits.</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">cv_res</code> <code class="o">=</code> <code class="n">pd</code><code class="o">.</code><code class="n">DataFrame</code><code class="p">(</code><code class="n">grid_search</code><code class="o">.</code><code class="n">cv_results_</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">cv_res</code><code class="o">.</code><code class="n">sort_values</code><code class="p">(</code><code class="n">by</code><code class="o">=</code><code class="s2">"mean_test_score"</code><code class="p">,</code> <code class="n">ascending</code><code class="o">=</code><code class="kc">False</code><code class="p">,</code> <code class="n">inplace</code><code class="o">=</code><code class="kc">True</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="p">[</code><code class="o">...</code><code class="p">]</code>  <code class="c1"># change column names to fit on this page, and show rmse = -score</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">cv_res</code><code class="o">.</code><code class="n">head</code><code class="p">()</code>
<code class="go">   n_clusters max_features  split0  split1  split2  mean_test_rmse</code>
<code class="go">12         15            6   43460   43919   44748           44042</code>
<code class="go">13         15            8   44132   44075   45010           44406</code>
<code class="go">14         15           10   44374   44286   45316           44659</code>
<code class="go">7          10            6   44683   44655   45657           44999</code>
<code class="go">9          10            6   44683   44655   45657           44999</code></pre>

<p>The mean test RMSE score for the best model is 44,042, which is better than the score you got earlier using the default hyperparameter values (which was 47,019). Congratulations, you have successfully fine-tuned your best model!</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Randomized Search"><div class="sect2" id="idm46324211588160">
<h2>Randomized Search</h2>

<p>The grid search approach is fine when you are exploring relatively few combinations, like in the previous example, but <code>RandomizedSearchCV</code> is often preferable, especially when the hyperparameter search space is large. This class can be used in much the same way as the <code>GridSearchCV</code> class, but instead of trying out all possible combinations, it evaluates a fixed number of combinations, selecting a random value for each hyperparameter at every iteration. This may sound surprising, but this approach has several <span class="keep-together">benefits</span>:</p>

<ul>
<li>
<p>If some of your hyperparameters are continuous (or discrete but with many possible values), and you let randomized search run for, say, 1,000 iterations, then it will explore 1,000 different values for each of these hyperparameters, whereas grid search would only explore the few values you listed for each one.</p>
</li>
<li>
<p>Suppose a hyperparameter does not actually make much difference, but you don’t know it yet. If it has 10 possible values you add it to your grid search, then training will take 10 times longer. But if you add it to a random search, it will not make any difference.</p>
</li>
<li>
<p>Suppose there are 6 hyperparameters to explore, each with 10 possible values, then grid search offers no other choice than training the model a million times, whereas random search can always run for any number of iterations you choose.</p>
</li>
</ul>

<p>For each hyperparameter, you must provide either a list of possible values, or a probability distribution:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">from</code> <code class="nn">sklearn.model_selection</code> <code class="kn">import</code> <code class="n">RandomizedSearchCV</code>
<code class="kn">from</code> <code class="nn">scipy.stats</code> <code class="kn">import</code> <code class="n">randint</code>

<code class="n">param_distribs</code> <code class="o">=</code> <code class="p">{</code><code class="s1">'preprocessing__geo__n_clusters'</code><code class="p">:</code> <code class="n">randint</code><code class="p">(</code><code class="n">low</code><code class="o">=</code><code class="mi">3</code><code class="p">,</code> <code class="n">high</code><code class="o">=</code><code class="mi">50</code><code class="p">),</code>
                  <code class="s1">'random_forest__max_features'</code><code class="p">:</code> <code class="n">randint</code><code class="p">(</code><code class="n">low</code><code class="o">=</code><code class="mi">2</code><code class="p">,</code> <code class="n">high</code><code class="o">=</code><code class="mi">20</code><code class="p">)}</code>

<code class="n">rnd_search</code> <code class="o">=</code> <code class="n">RandomizedSearchCV</code><code class="p">(</code>
    <code class="n">full_pipeline</code><code class="p">,</code> <code class="n">param_distributions</code><code class="o">=</code><code class="n">param_distribs</code><code class="p">,</code> <code class="n">n_iter</code><code class="o">=</code><code class="mi">10</code><code class="p">,</code> <code class="n">cv</code><code class="o">=</code><code class="mi">3</code><code class="p">,</code>
    <code class="n">scoring</code><code class="o">=</code><code class="s1">'neg_root_mean_squared_error'</code><code class="p">,</code> <code class="n">random_state</code><code class="o">=</code><code class="mi">42</code><code class="p">)</code>

<code class="n">rnd_search</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">housing</code><code class="p">,</code> <code class="n">housing_labels</code><code class="p">)</code></pre>

<p>Scikit-Learn also has two other hyperparameter search classes: <code>HalvingRandomSearchCV</code> and <code>HalvingGridSearchCV</code>. Their goal is to use the computational resources more efficiently, either to train faster or to explore a larger hyperparameter space. Here’s how they work: in the first round, many hyperparameter combinations (called “candidates”) are generated using either the grid approach or the random approach. These candidates are then used to train models which are then evaluated using cross-validation, as usual. However, training uses limited resources which speeds up this first round considerably. By default, “limited resources” means that the models are trained on a small part of the training set. However, other limitations are possible, such as reducing the number of training iterations if the model has a hyperparameter to set it. Once every candidate has been evaluated, only the best ones go on to the second round, where they are allowed more resources to compete. After several rounds, the final candidates are evaluated using full resources. This may save you some time tuning hyperparameters.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Ensemble Methods"><div class="sect2" id="idm46324211545952">
<h2>Ensemble Methods</h2>

<p>Another way to fine-tune your system is to try to combine the models that perform best. The group (or “ensemble”) will often perform better than the best individual model—just like Random Forests perform better than the individual Decision Trees they rely on—especially if the individual models make very different types of errors. For example, you could train and fine-tune a k-Nearest Neighbors model, then create an ensemble model that just predicts the mean of the random forest prediction and the KNN’s prediction. We will cover this topic in more detail in <a data-type="xref" href="ch07.xhtml#ensembles_chapter">Chapter 7</a>.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Analyze the Best Models and Their Errors"><div class="sect2" id="idm46324211483984">
<h2>Analyze the Best Models and Their Errors</h2>

<p>You will often gain good insights on the problem by inspecting the best models. For example, the <code>RandomForestRegressor</code> can indicate the relative importance of each attribute for making accurate predictions:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">final_model</code> <code class="o">=</code> <code class="n">rnd_search</code><code class="o">.</code><code class="n">best_estimator_</code>  <code class="c1"># includes preprocessing</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">feature_importances</code> <code class="o">=</code> <code class="n">final_model</code><code class="p">[</code><code class="s2">"random_forest"</code><code class="p">]</code><code class="o">.</code><code class="n">feature_importances_</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">feature_importances</code><code class="o">.</code><code class="n">round</code><code class="p">(</code><code class="mi">2</code><code class="p">)</code>
<code class="go">array([0.07, 0.05, 0.05, 0.01, 0.01, 0.01, 0.01, 0.19, [...], 0.01])</code></pre>

<p>Let’s sort these importance scores in descending order and display them next to their corresponding attribute names:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="nb">sorted</code><code class="p">(</code><code class="nb">zip</code><code class="p">(</code><code class="n">feature_importances</code><code class="p">,</code>
<code class="gp">... </code>           <code class="n">final_model</code><code class="p">[</code><code class="s2">"preprocessing"</code><code class="p">]</code><code class="o">.</code><code class="n">get_feature_names_out</code><code class="p">()),</code>
<code class="gp">... </code>           <code class="n">reverse</code><code class="o">=</code><code class="kc">True</code><code class="p">)</code>
<code class="gp">...</code>
<code class="go">[(0.18694559869103852, 'log__median_income'),</code>
<code class="go"> (0.0748194905715524, 'cat__ocean_proximity_INLAND'),</code>
<code class="go"> (0.06926417748515576, 'bedrooms_ratio__bedrooms_ratio'),</code>
<code class="go"> (0.05446998753775219, 'rooms_per_house__rooms_per_house'),</code>
<code class="go"> (0.05262301809680712, 'people_per_house__people_per_house'),</code>
<code class="go"> (0.03819415873915732, 'geo__Cluster 0 similarity'),</code>
<code class="go"> [...]</code>
<code class="go"> (0.00015061247730531558, 'cat__ocean_proximity_NEAR BAY'),</code>
<code class="go"> (7.301686597099842e-05, 'cat__ocean_proximity_ISLAND')]</code></pre>

<p>With this information, you may want to try dropping some of the less useful features (e.g., apparently only one <code>ocean_proximity</code> category is really useful, so you could try dropping the others).</p>
<div data-type="tip"><h6>Tip</h6>
<p>The <code>sklearn.feature_selection.SelectFromModel</code> transformer can automatically drop the least useful features for you: when you fit it, it trains a model (typically a random forest), it looks at its <code>feature_importances_</code> attribute, and it selects the most useful features. Then when you call <code>transform()</code>, it just drops the other features.</p>
</div>

<p>You should also look at the specific errors that your system makes, then try to understand why it makes them and what could fix the problem: adding extra features or getting rid of uninformative ones, cleaning up outliers, etc.</p>

<p>Now is also a good time to ensure that your model not only works well on average, but also on all categories of districts, whether they’re rural or urban, rich or poor, North or South, minority or not, etc. This requires a bit of work creating subsets of your validation set for each category, but it’s important: if your model performs poorly on a whole category of districts, then it should probably not be deployed until the issue is solved, or at least it should not be used to make predictions for that category, as it may do more harm than good.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Evaluate Your System on the Test Set"><div class="sect2" id="idm46324211322800">
<h2>Evaluate Your System on the Test Set</h2>

<p>After tweaking your models for a while, you eventually have a system that performs sufficiently well. You are ready to evaluate the final model on the test set. There is nothing special about this process; just get the predictors and the labels from your test set, and run your <code>final_model</code> to transform the data and make predictions, then evaluate these predictions:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">X_test</code> <code class="o">=</code> <code class="n">strat_test_set</code><code class="o">.</code><code class="n">drop</code><code class="p">(</code><code class="s2">"median_house_value"</code><code class="p">,</code> <code class="n">axis</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code>
<code class="n">y_test</code> <code class="o">=</code> <code class="n">strat_test_set</code><code class="p">[</code><code class="s2">"median_house_value"</code><code class="p">]</code><code class="o">.</code><code class="n">copy</code><code class="p">()</code>

<code class="n">final_predictions</code> <code class="o">=</code> <code class="n">final_model</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">X_test</code><code class="p">)</code>

<code class="n">final_rmse</code> <code class="o">=</code> <code class="n">mean_squared_error</code><code class="p">(</code><code class="n">y_test</code><code class="p">,</code> <code class="n">final_predictions</code><code class="p">,</code> <code class="n">squared</code><code class="o">=</code><code class="bp">False</code><code class="p">)</code>
<code class="k">print</code><code class="p">(</code><code class="n">final_rmse</code><code class="p">)</code>  <code class="c1"># prints 41424.40026462184</code></pre>

<p>In some cases, such a point estimate of the generalization error will not be quite enough to convince you to launch: what if it is just 0.1% better than the model currently in production? You might want to have an idea of how precise this estimate is. For this, you can compute a 95% <em>confidence interval</em> for the generalization error using <code>scipy.stats.t.interval()</code>. We get a fairly large interval from 39,275 to 43,467, and our previous point estimate of 41,424 is roughly in the middle of it:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">from</code> <code class="nn">scipy</code> <code class="kn">import</code> <code class="n">stats</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">confidence</code> <code class="o">=</code> <code class="mf">0.95</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">squared_errors</code> <code class="o">=</code> <code class="p">(</code><code class="n">final_predictions</code> <code class="o">-</code> <code class="n">y_test</code><code class="p">)</code> <code class="o">**</code> <code class="mi">2</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">np</code><code class="o">.</code><code class="n">sqrt</code><code class="p">(</code><code class="n">stats</code><code class="o">.</code><code class="n">t</code><code class="o">.</code><code class="n">interval</code><code class="p">(</code><code class="n">confidence</code><code class="p">,</code> <code class="nb">len</code><code class="p">(</code><code class="n">squared_errors</code><code class="p">)</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code>
<code class="gp">... </code>                         <code class="n">loc</code><code class="o">=</code><code class="n">squared_errors</code><code class="o">.</code><code class="n">mean</code><code class="p">(),</code>
<code class="gp">... </code>                         <code class="n">scale</code><code class="o">=</code><code class="n">stats</code><code class="o">.</code><code class="n">sem</code><code class="p">(</code><code class="n">squared_errors</code><code class="p">)))</code>
<code class="gp">...</code>
<code class="go">array([39275.40861216, 43467.27680583])</code></pre>

<p>If you did a lot of hyperparameter tuning, the performance will usually be slightly worse than what you measured using cross-validation. That’s because your system ends up fine-tuned to perform well on the validation data and will likely not perform as well on unknown datasets. It is not the case in this example since the test RMSE is lower than the validation RMSE, but when it happens you must resist the temptation to tweak the hyperparameters to make the numbers look good on the test set; the improvements would be unlikely to generalize to new data.</p>

<p>Now comes the project prelaunch phase: you need to present your solution (highlighting what you have learned, what worked and what did not, what assumptions were made, and what your system’s limitations are), document everything, and create nice presentations with clear visualizations and easy-to-remember statements (e.g., “the median income is the number one predictor of housing prices”). In this California housing example, the final performance of the system is not much better than the experts’ price estimates which were often off by 30%, but it may still be a good idea to launch it, especially if this frees up some time for the experts so they can work on more interesting and productive tasks.<a data-type="indexterm" data-primary="" data-startref="Mfine02" id="idm46324211107792"/><a data-type="indexterm" data-primary="" data-startref="EPfine02" id="idm46324211106944"/></p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Launch, Monitor, and Maintain Your System"><div class="sect1" id="idm46324211105968">
<h1>Launch, Monitor, and Maintain Your System</h1>

<p>Perfect, you<a data-type="indexterm" data-primary="Scikit-Learn" data-secondary="launching, monitoring, and maintaining your system" id="idm46324211104400"/><a data-type="indexterm" data-primary="example project" data-secondary="launching, monitoring, and maintaining" id="idm46324211103552"/> got approval to launch! You now need to get your solution ready for production (e.g., polish the code, write documentation and tests, and so on). Then you can deploy your model to your production environment. The most basic way to do this is just to save the best model you trained, transfer the file to your production environment, and load it. To save the model, you can use the <code>joblib</code> library like this:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">import</code> <code class="nn">joblib</code>

<code class="n">joblib</code><code class="o">.</code><code class="n">dump</code><code class="p">(</code><code class="n">final_model</code><code class="p">,</code> <code class="s2">"my_california_housing_model.pkl"</code><code class="p">)</code></pre>
<div data-type="tip"><h6>Tip</h6>
<p>It’s often a good idea to save every model you experiment with so that you can come back easily to any model you want. You may also save the cross-validation scores and perhaps the actual predictions on the validation set. This will allow you to easily compare scores across model types, and compare the types of errors they make.</p>
</div>

<p>Once your model is transferred to production, you can load it and use it. For this you must first import any custom classes and functions the model relies on (which means transferring the code to production), then load the model using <code>joblib</code> and use it to make predictions:</p>

<pre data-type="programlisting" data-code-language="python"><code class="kn">import</code> <code class="nn">joblib</code>
<code class="p">[</code><code class="o">...</code><code class="p">]</code>  <code class="c1"># import KMeans, BaseEstimator, TransformerMixin, rbf_kernel, etc.</code>

<code class="k">def</code> <code class="nf">column_ratio</code><code class="p">(</code><code class="n">X</code><code class="p">):</code>
    <code class="k">return</code> <code class="n">X</code><code class="p">[:,</code> <code class="p">[</code><code class="mi">0</code><code class="p">]]</code> <code class="o">/</code> <code class="n">X</code><code class="p">[:,</code> <code class="p">[</code><code class="mi">1</code><code class="p">]]</code>

<code class="k">class</code> <code class="nc">ClusterSimilarity</code><code class="p">(</code><code class="n">BaseEstimator</code><code class="p">,</code> <code class="n">TransformerMixin</code><code class="p">):</code>
    <code class="p">[</code><code class="o">...</code><code class="p">]</code>

<code class="n">final_model_reloaded</code> <code class="o">=</code> <code class="n">joblib</code><code class="o">.</code><code class="n">load</code><code class="p">(</code><code class="s2">"my_california_housing_model.pkl"</code><code class="p">)</code>

<code class="n">new_data</code> <code class="o">=</code> <code class="p">[</code><code class="o">...</code><code class="p">]</code>  <code class="c1"># some new districts to make predictions for</code>
<code class="n">predictions</code> <code class="o">=</code> <code class="n">final_model_reloaded</code><code class="o">.</code><code class="n">predict</code><code class="p">(</code><code class="n">new_data</code><code class="p">)</code></pre>

<p>For example, perhaps the model will be used within a website: the user will type in some data about a new district and click the “Estimate Price” button. This will send a query containing the data to the web server, which will forward it to your web application, and finally your code will simply call the model’s <code>predict()</code> method (you want to load the model upon server startup, rather than every time the model is used). Alternatively, you can wrap the model within a dedicated web service that your web application can query through a REST API⁠<sup><a data-type="noteref" id="idm46324210984176-marker" href="ch02.xhtml#idm46324210984176">13</a></sup> (see <a data-type="xref" href="#webservice_model_diagram">Figure 2-20</a>). This makes it easier to upgrade your model to new versions without interrupting the main application. It also simplifies scaling, since you can start as many web services as needed and load-balance the requests coming from your web application across these web services. Moreover, it allows your web application to use any programming language, not just Python.</p>

<figure class="smallerseventy"><div id="webservice_model_diagram" class="figure">
<img src="Images/mls3_0220.png" alt="mls3 0220" width="1667" height="282"/>
<h6><span class="label">Figure 2-20. </span>A model deployed as a web service and used by a web application</h6>
</div></figure>

<p>Another popular strategy is to deploy your model to the cloud, for example on Google’s Vertex AI (formerly known as Google Cloud AI Platform and Google Cloud ML Engine): just save your model using <code>joblib</code> and upload it to Google Cloud Storage (GCS), then head over to Google Cloud AI Platform and create a new model version, pointing it to the GCS file. That’s it! This gives you a simple web service that takes care of load balancing and scaling for you. It takes JSON requests containing the input data (e.g., of a district) and returns JSON responses containing the predictions. You can then use this web service in your website (or whatever production environment you are using). As we will see in Chapter 19, deploying<a data-type="indexterm" data-primary="TensorFlow, model deployment at scale" data-secondary="deploying on AI platforms" id="idm46324210979808"/> TensorFlow models on Vertex AI is not much different from deploying Scikit-Learn models.</p>

<p>But deployment is not the end of the story. You also need to write monitoring code to check your system’s live performance at regular intervals and trigger alerts when it drops. It may drop very quickly, for example if a component breaks in your infrastructure, but be aware that it could also decay very slowly, which can easily go unnoticed for a long time. This is quite common because of model rot: if the model was trained with last year’s data, it may not be adapted to today’s data.</p>

<p>So you need to monitor your model’s live performance. But how do you that? Well, it depends. In some cases, the model’s performance can be inferred from downstream metrics. For example, if your model is part of a recommender system and it suggests products that the users may be interested in, then it’s easy to monitor the number of recommended products sold each day. If this number drops (compared to non-recommended products), then the prime suspect is the model. This may be because the data pipeline is broken, or perhaps the model needs to be retrained on fresh data (as we will discuss shortly).</p>

<p>However, you may also need human analysis to determine the model’s performance. For example, suppose you trained an image classification model (which we will see in <a data-type="xref" href="ch03.xhtml#classification_chapter">Chapter 3</a>) to detect several product defects on a production line. How can you get an alert if the model’s performance drops, before thousands of defective products get shipped to your clients? One solution is to send to human raters a sample of all the pictures that the model classified (especially pictures that the model wasn’t so sure about). Depending on the task, the raters may need to be experts, or they could be nonspecialists, such as workers on a crowdsourcing platform (e.g., Amazon Mechanical Turk). In some applications they could even be the users themselves, responding for example via surveys or repurposed captchas.⁠<sup><a data-type="noteref" id="idm46324210969744-marker" href="ch02.xhtml#idm46324210969744">14</a></sup></p>

<p>Either way, you need to put in place a monitoring system (with or without human raters to evaluate the live model), as well as all the relevant processes to define what to do in case of failures and how to prepare for them. Unfortunately, this can be a lot of work. In fact, it is often much more work than building and training a model.</p>

<p>If the data keeps evolving, you will need to update your datasets and retrain your model regularly. You should probably automate the whole process as much as possible. Here are a few things you can automate:</p>

<ul>
<li>
<p>Collect fresh data regularly and label it (e.g., using human raters).</p>
</li>
<li>
<p>Write a script to train the model and fine-tune the hyperparameters automatically. This script could run automatically, for example every day or every week, depending on your needs.</p>
</li>
<li>
<p>Write another script that will evaluate both the new model and the previous model on the updated test set, and deploy the model to production if the performance has not decreased (if it did, make sure you investigate why). The script should probably test the performance of your model on various subsets of the test set, such as poor or rich districts, rural or urban districts, etc.</p>
</li>
</ul>

<p>You should also make sure you evaluate the model’s input data quality. Sometimes performance will degrade slightly because of a poor-quality signal (e.g., a malfunctioning sensor sending random values, or another team’s output becoming stale), but it may take a while before your system’s performance degrades enough to trigger an alert. If you monitor your model’s inputs, you may catch this earlier. For example, you could trigger an alert if more and more inputs are missing a feature, or if its mean or standard deviation drifts too far from the training set, or a categorical feature starts containing new categories.</p>

<p>Finally, make sure you keep backups of every model you create and have the process and tools in place to roll back to a previous model quickly, in case the new model starts failing badly for some reason. Having backups also makes it possible to easily compare new models with previous ones. Similarly, you should keep backups of every version of your datasets so that you can roll back to a previous dataset if the new one ever gets corrupted (e.g., if the fresh data that gets added to it turns out to be full of outliers). Having backups of your datasets also allows you to evaluate any model against any previous dataset.</p>

<p>As you can see, Machine Learning involves quite a lot of infrastructure. Chapter 19 discusses some aspects of this, but it’s a very broad topic called <em>ML Operations</em> (ML Ops) which deserves its own book. So don’t be surprised if your first ML project takes a lot of effort and time to build and deploy to production. Fortunately, once all the infrastructure is in place, going from idea to production will be much faster.</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="Try It Out!"><div class="sect1" id="idm46324210963392">
<h1>Try It Out!</h1>

<p>Hopefully this chapter gave you a good idea of what a Machine Learning project looks like as well as showing you some of the tools you can use to train a great system. As you can see, much of the work is in the data preparation step: building monitoring tools, setting up human evaluation pipelines, and automating regular model training. The Machine Learning algorithms are important, of course, but it is probably preferable to be comfortable with the overall process and know three or four algorithms well rather than to spend all your time exploring advanced algorithms.</p>

<p>So, if you have not already done so, now is a good time to pick up a laptop, select a dataset that you are interested in, and try to go through the whole process from A to Z. A good place to start is on a competition website such as <a href="http://kaggle.com/"><em class="hyperlink">http://kaggle.com/</em></a>: you will have a dataset to play with, a clear goal, and people to share the experience with. Have fun!</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="Exercises"><div class="sect1" id="idm46324210960144">
<h1>Exercises</h1>

<p>The following exercises are based on this chapter’s housing dataset:</p>
<ol>
<li>
<p>Try a Support Vector Machine regressor (<code>sklearn.svm.SVR</code>) with various hyperparameters, such as <code>kernel="linear"</code> (with various values for the <code>C</code> hyperparameter) or <code>kernel="rbf"</code> (with various values for the <code>C</code> and <code>gamma</code> hyperparameters). Note that SVMs don’t scale well to large datasets, so you should probably train your model on just the first 5,000 instances of the training set and use only 3-fold cross-validation, or else it will take hours. Don’t worry about what the hyperparameters mean for now, we’ll discuss them in <a data-type="xref" href="ch05.xhtml#svm_chapter">Chapter 5</a>. How does the best <code>SVR</code> predictor perform?</p>
</li>
<li>
<p>Try replacing the <code>GridSearchCV</code> with a <code>RandomizedSearchCV</code>.</p>
</li>
<li>
<p>Try adding a <code>SelectFromModel</code> transformer in the preparation pipeline to select only the most important attributes.</p>
</li>
<li>
<p>Try creating a custom transformer that trains a k-Nearest Neighbors regressor (<code>sklearn.neighbors.KNeighborsRegressor</code>) in its <code>fit()</code> method, and outputs the model’s predictions in its <code>transform()</code> method. Then add this feature to the preprocessing pipeline, using latitude and longitude as the inputs to this transformer. This will add a feature in the model that corresponds to the housing median price of the nearest districts.</p>
</li>
<li>
<p>Automatically explore some preparation options using <code>GridSearchCV</code>.</p>
</li>
<li>
<p>Try to implement the <code>StandardScalerClone</code> class again from scratch, then add support for the <code>inverse_transform()</code> method: executing <code>scaler.inverse_transform(scaler.fit_transform(X))</code> should return an array very close to <code>X</code>. Then add support for feature names: set <code>feature_names_in_</code> in the <code>fit()</code> method if the input is a DataFrame. This attribute should be a NumPy array of column names. Lastly, implement the <code>get_feature_names_out()</code> method: it should have one optional <code>input_features=None</code> argument. If passed, the method should check that its length matches <code>n_features_in_</code>, and it should match <code>feature_names_in_</code> if it is defined, then <code>input_features</code> should be returned. If <code>input_features</code> is <code>None</code>, then the method should return <code>feature_names_in_</code> if it is defined or <code>np.array(["x0", "x1", ...])</code> with length <code>n_features_in_</code> otherwise.</p>
</li>

</ol>

<p>Solutions to these exercises are available at the end of this chapter’s notebook, at <a href="https://homl.info/colab3"><em class="hyperlink">https://homl.info/colab3</em></a>.</p>
</div></section>







<div data-type="footnotes"><p data-type="footnote" id="idm46324234155392"><sup><a href="ch02.xhtml#idm46324234155392-marker">1</a></sup> The original dataset appeared in R. Kelley Pace and Ronald Barry, “Sparse Spatial Autoregressions,” <em>Statistics &amp; Probability Letters</em> 33, no. 3 (1997): 291–297.</p><p data-type="footnote" id="idm46324234140080"><sup><a href="ch02.xhtml#idm46324234140080-marker">2</a></sup> A piece of information fed to a Machine Learning system is often called a <em>signal</em>, in reference to Claude Shannon’s information theory, which he developed at Bell Labs to improve telecommunications. His theory: you want a high signal-to-noise ratio.</p><p data-type="footnote" id="idm46324231378576"><sup><a href="ch02.xhtml#idm46324231378576-marker">3</a></sup> Recall that the transpose operator flips a column vector into a row vector (and vice versa).</p><p data-type="footnote" id="idm46324233869888"><sup><a href="ch02.xhtml#idm46324233869888-marker">4</a></sup> You might also need to check legal constraints, such as private fields that should never be copied to unsafe data stores.</p><p data-type="footnote" id="idm46324229784672"><sup><a href="ch02.xhtml#idm46324229784672-marker">5</a></sup> The standard deviation is generally denoted <em>σ</em> (the Greek letter sigma), and it is the square root of the <em>variance</em>, which is the average of the squared deviation from the mean. When a feature has a bell-shaped <em>normal distribution</em> (also called a <em>Gaussian distribution</em>), which is very common, the “68-95-99.7” rule applies: about 68% of the values fall within 1<em>σ</em> of the mean, 95% within 2<em>σ</em>, and 99.7% within 3<em>σ</em>.</p><p data-type="footnote" id="idm46324216367296"><sup><a href="ch02.xhtml#idm46324216367296-marker">6</a></sup> You will often see people set the random seed to 42. This number has no special property, other than to be the Answer to the Ultimate Question of Life, the Universe, and Everything.</p><p data-type="footnote" id="idm46324216244192"><sup><a href="ch02.xhtml#idm46324216244192-marker">7</a></sup> The location information is actually quite coarse, and as a result many districts will have the exact same ID, so they will end up in the same set (test or train). This introduces some unfortunate sampling bias.</p><p data-type="footnote" id="idm46324215545664"><sup><a href="ch02.xhtml#idm46324215545664-marker">8</a></sup> If you are reading this in grayscale, grab a red pen and scribble over most of the coastline from the Bay Area down to San Diego (as you might expect). You can add a patch of yellow around Sacramento as well.</p><p data-type="footnote" id="idm46324214741504"><sup><a href="ch02.xhtml#idm46324214741504-marker">9</a></sup> For more details on the design principles, see Lars Buitinck et al., “API Design for Machine Learning Software: Experiences from the Scikit-Learn Project” ,” arXiv preprint arXiv:1309.0238 (2013).</p><p data-type="footnote" id="idm46324214709504"><sup><a href="ch02.xhtml#idm46324214709504-marker">10</a></sup> Some predictors also provide methods to measure the confidence of their predictions.</p><p data-type="footnote" id="idm46324214701024"><sup><a href="ch02.xhtml#idm46324214701024-marker">11</a></sup> By the time you read these lines, it may be possible to make all transformers output Pandas DataFrames when they receive a DataFrame as input: Pandas in, Pandas out. There will be a global configuration option for this: <code>sklearn.set_config(pandas_in_out=True)</code>.</p><p data-type="footnote" id="idm46324214454592"><sup><a href="ch02.xhtml#idm46324214454592-marker">12</a></sup> See SciPy’s documentation for more details.</p><p data-type="footnote" id="idm46324210984176"><sup><a href="ch02.xhtml#idm46324210984176-marker">13</a></sup> In a nutshell, a REST (or RESTful) API is an HTTP-based API that follows some conventions, such as using standard HTTP verbs to read, update, create, or delete resources (GET, POST, PUT, and DELETE) and using JSON for the inputs and outputs.</p><p data-type="footnote" id="idm46324210969744"><sup><a href="ch02.xhtml#idm46324210969744-marker">14</a></sup> A captcha is a test to ensure a user is not a robot. These tests have often been used as a cheap way to label training data.</p></div></div></section></div></body>
</html>
<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 12. Custom Models and Training with TensorFlow"><div class="chapter" id="tensorflow_chapter">
<h1><span class="label">Chapter 12. </span>Custom Models and Training <span class="keep-together">with TensorFlow</span></h1>

<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46324186919632">
<h5>A Note for Early Release Readers</h5>
<p>With Early Release ebooks, you get books in their earliest form—the author’s raw and unedited content as they write—so you can take advantage of these technologies long before the official release of these titles.</p>

<p>This will be the 12th chapter of the final book. Notebooks are available on GitHub at <a href="https://github.com/ageron/handson-ml3"><em class="hyperlink">https://github.com/ageron/handson-ml3</em></a>. Datasets are available at <a href="https://github.com/ageron/data"><em class="hyperlink">https://github.com/ageron/data</em></a>.</p>

<p>If you have comments about how we might improve the content and/or examples in this book, or if you notice missing material within this chapter, please reach out to the editor at <a href="mailto:mcronin@oreilly.com">mcronin@oreilly.com</a>.</p>
</div></aside>

<p>Up until now, we’ve<a data-type="indexterm" data-primary="TensorFlow, custom models and training" data-secondary="about" id="idm46324186913616"/><a data-type="indexterm" data-primary="custom models" data-secondary="about" id="idm46324186912592"/><a data-type="indexterm" data-primary="models" data-see="also custom models" id="idm46324186911648"/> used only TensorFlow’s high-level API, Keras, but it already got us pretty far: we built various neural network architectures, including regression and classification nets, Wide &amp; Deep nets, and self-normalizing nets, using all sorts of techniques, such as Batch Normalization, dropout, and learning rate schedules. In fact, 95% of the use cases you will encounter will not require anything other than Keras (and tf.data; see Chapter 13). But now it’s time to dive deeper into TensorFlow and take a look at its lower-level <a href="https://homl.info/tf2api">Python API</a>. This will be useful when you need extra control to write custom loss functions, custom metrics, layers, models, initializers, regularizers, weight constraints, and more. You may even need to fully control the training loop itself, for example to apply special transformations or constraints to the gradients (beyond just clipping them) or to use multiple optimizers for different parts of the network. We will cover all these cases in this chapter, and we will also look at how you can boost your custom models and training algorithms using TensorFlow’s automatic graph generation feature. But first, let’s take a quick tour of TensorFlow.</p>






<section data-type="sect1" data-pdf-bookmark="A Quick Tour of TensorFlow"><div class="sect1" id="idm46324186909776">
<h1>A Quick Tour of TensorFlow</h1>

<p>As<a data-type="indexterm" data-primary="TensorFlow, basics of" data-secondary="benefits" id="idm46324186908144"/> you know, TensorFlow is a powerful library for numerical computation, particularly well suited and fine-tuned for large-scale Machine Learning (but you could use it for anything else that requires heavy computations). It was developed by the Google Brain team and it powers many of Google’s large-scale services, such as Google Cloud Speech, Google Photos, and Google Search. It was open sourced in November 2015, and it is now the most widely used Deep Learning library in the industry:<sup><a data-type="noteref" id="idm46324186907008-marker" href="ch12.xhtml#idm46324186907008">1</a></sup> countless projects use TensorFlow for all sorts of Machine Learning tasks, such as image classification, natural language processing, recommender systems, and time series forecasting.</p>

<p>So what does TensorFlow offer? Here’s a summary:</p>

<ul>
<li>
<p>Its<a data-type="indexterm" data-primary="TensorFlow, basics of" data-secondary="features" id="idm46324186904528"/> core is very similar to NumPy, but with GPU support.</p>
</li>
<li>
<p>It supports distributed computing (across multiple devices and servers).</p>
</li>
<li>
<p>It<a data-type="indexterm" data-primary="just-in-time (JIT) compiler" id="idm46324186901600"/> includes a kind of just-in-time (JIT) compiler that allows it to optimize computations for speed and memory usage. It<a data-type="indexterm" data-primary="computation graphs" id="idm46324186900592"/> works by extracting the <em>computation graph</em> from a Python function, then optimizing it (e.g., by pruning unused nodes), and finally running it efficiently (e.g., by automatically running independent operations in parallel).</p>
</li>
<li>
<p>Computation graphs can be exported to a portable format, so you can train a TensorFlow model in one environment (e.g., using Python on Linux) and run it in another (e.g., using Java on an Android device).</p>
</li>
<li>
<p>It implements reverse-mode autodiff (see <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a> and Appendix B) and provides some excellent optimizers, such as RMSProp and Nadam (see <a data-type="xref" href="ch11.xhtml#deep_chapter">Chapter 11</a>), so you can easily minimize all sorts of loss functions.</p>
</li>
</ul>

<p>TensorFlow offers many more features built on top of these core features: the most important is of course Keras,⁠<sup><a data-type="noteref" id="idm46324186894816-marker" href="ch12.xhtml#idm46324186894816">2</a></sup> but it also has data loading and preprocessing ops (<code>tf.data</code>, <code>tf.io</code>, etc.), image processing ops (<code>tf.image</code>), signal processing ops (<code>tf.signal</code>), and more (see <a data-type="xref" href="#tensorflow_api_diagram">Figure 12-1</a> for an overview of TensorFlow’s Python API).</p>
<div data-type="tip"><h6>Tip</h6>
<p>We will cover many of the packages and functions of the TensorFlow API, but it’s impossible to cover them all, so you should really take some time to browse through the API; you will find that it is quite rich and well documented.</p>
</div>

<figure><div id="tensorflow_api_diagram" class="figure">
<img src="Images/mls3_1201.png" alt="mls3 1201" width="2336" height="1611"/>
<h6><span class="label">Figure 12-1. </span>TensorFlow’s Python API</h6>
</div></figure>

<p>At the lowest level, each TensorFlow operation (<em>op</em> for short) is implemented using highly efficient C++ code.⁠<sup><a data-type="noteref" id="idm46324186887120-marker" href="ch12.xhtml#idm46324186887120">3</a></sup> Many operations have<a data-type="indexterm" data-primary="kernels" id="idm46324186886240"/> multiple implementations called <em>kernels</em>: each kernel is dedicated to a specific device type, such as CPUs, GPUs, or even<a data-type="indexterm" data-primary="TPUs (tensor processing units)" id="idm46324186885024"/> TPUs (<em>tensor processing units</em>). As you may know, GPUs can dramatically speed up computations by splitting them into many smaller chunks and running them in parallel across many GPU threads. TPUs are even faster: they are custom ASIC chips built specifically for Deep Learning operations⁠<sup><a data-type="noteref" id="idm46324186883808-marker" href="ch12.xhtml#idm46324186883808">4</a></sup> (we will discuss how to use TensorFlow with GPUs or TPUs in Chapter 19).</p>

<p>TensorFlow’s architecture<a data-type="indexterm" data-primary="TensorFlow, basics of" data-secondary="architecture" id="idm46324186881584"/> is shown in <a data-type="xref" href="#tensorflow_architecture_diagram">Figure 12-2</a>. Most of the time your code will use the high-level APIs (especially Keras and tf.data); but when you need more flexibility, you will use the lower-level Python API, handling tensors directly. Note that APIs for other languages are also available. In any case, TensorFlow’s execution engine will take care of running the operations efficiently, even across multiple devices and machines if you tell it to.</p>

<figure class="smallerseventy"><div id="tensorflow_architecture_diagram" class="figure">
<img src="Images/mls3_1202.png" alt="mls3 1202" width="1719" height="937"/>
<h6><span class="label">Figure 12-2. </span>TensorFlow’s architecture</h6>
</div></figure>

<p>TensorFlow<a data-type="indexterm" data-primary="TensorFlow Lite" id="idm46324186876560"/><a data-type="indexterm" data-primary="TensorFlow.js" id="idm46324186875824"/><a data-type="indexterm" data-primary="TensorFlow, basics of" data-secondary="operating system compatibility" id="idm46324186875152"/> runs not only on Windows, Linux, and macOS, but also on mobile devices (using <em>TensorFlow Lite</em>), including both iOS and Android (see Chapter 19). If you do not want to use the Python API, there are C++, Java, and Swift APIs. There is even a JavaScript implementation called <em>TensorFlow.js</em> that makes it possible to run your models directly in your browser.</p>

<p>There’s<a data-type="indexterm" data-primary="TensorFlow, basics of" data-secondary="library ecosystem" id="idm46324186872208"/> more to TensorFlow than the library. TensorFlow is at the center of an extensive ecosystem of libraries. First, there’s TensorBoard for visualization (see <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a>). Next, there’s <a href="https://tensorflow.org/tfx">TensorFlow Extended (TFX)</a>, which is a set of libraries built by Google to productionize TensorFlow projects: it includes tools for data validation, preprocessing, model analysis, and serving (with TF Serving; see Chapter 19). Google’s<a data-type="indexterm" data-primary="TensorFlow Hub" id="idm46324186869616"/> <em>TensorFlow Hub</em> provides a way to easily download and reuse pretrained neural networks. You can also get many neural network architectures, some of them pretrained, in TensorFlow’s <a href="https://github.com/tensorflow/models/">model garden</a>. Check out the <a href="https://www.tensorflow.org/resources">TensorFlow Resources</a> and <a href="https://github.com/jtoy/awesome-tensorflow"><em class="hyperlink">https://github.com/jtoy/awesome-tensorflow</em></a> for more TensorFlow-based projects. You will find hundreds of TensorFlow projects on GitHub, so it is often easy to find existing code for whatever you are trying to do.</p>
<div data-type="tip"><h6>Tip</h6>
<p>More<a data-type="indexterm" data-primary="Machine Learning (ML)" data-secondary="locating papers on" id="idm46324186864336"/> and more ML papers are released along with their implementations, and sometimes even with pretrained models. Check out <a href="https://paperswithcode.com/"><em class="hyperlink">https://paperswithcode.com/</em></a> to easily find them.</p>
</div>

<p>Last<a data-type="indexterm" data-primary="TensorFlow, basics of" data-secondary="community support" id="idm46324186861168"/><a data-type="indexterm" data-primary="TensorFlow, basics of" data-secondary="getting help" id="idm46324186860192"/> but not least, TensorFlow has a dedicated team of passionate and helpful developers, as well as a large community contributing to improving it. To ask technical questions, you should use <a href="http://stackoverflow.com/"><em class="hyperlink">http://stackoverflow.com/</em></a> and tag your question with <em>tensorflow</em> and <em>python</em>. You can file bugs and feature requests through  <a href="https://github.com/tensorflow/tensorflow">GitHub</a>. For general discussions, join the <a href="https://discuss.tensorflow.org/">TensorFlow Forum</a>.</p>

<p>OK, it’s time to start coding!</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="Using TensorFlow like NumPy"><div class="sect1" id="idm46324186909152">
<h1>Using TensorFlow like NumPy</h1>

<p>TensorFlow’s API<a data-type="indexterm" data-primary="NumPy" data-secondary="using TensorFlow like" id="NPtensor12"/> revolves<a data-type="indexterm" data-primary="tensors" id="idm46324186852128"/> around <em>tensors</em>, which flow from operation to operation—hence the name Tensor<em>Flow</em>. A tensor is very similar to a NumPy <code>ndarray</code>: it is usually a multidimensional array, but it can also hold a scalar (a simple value, such as <code>42</code>). These tensors will be important when we create custom cost functions, custom metrics, custom layers, and more, so let’s see how to create and manipulate them.</p>








<section data-type="sect2" data-pdf-bookmark="Tensors and Operations"><div class="sect2" id="idm46324186849280">
<h2>Tensors and Operations</h2>

<p>You<a data-type="indexterm" data-primary="TensorFlow, NumPy-like operations" data-secondary="tensors and operations" id="idm46324186847616"/> can create a tensor with <code>tf.constant()</code>. For example, here is a tensor representing a matrix with two rows and three columns of floats:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">import</code> <code class="nn">tensorflow</code> <code class="k">as</code> <code class="nn">tf</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">t</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">([[</code><code class="mf">1.</code><code class="p">,</code> <code class="mf">2.</code><code class="p">,</code> <code class="mf">3.</code><code class="p">],</code> <code class="p">[</code><code class="mf">4.</code><code class="p">,</code> <code class="mf">5.</code><code class="p">,</code> <code class="mf">6.</code><code class="p">]])</code>  <code class="c1"># matrix</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">t</code>
<code class="go">&lt;tf.Tensor: shape=(2, 3), dtype=float32, numpy=</code>
<code class="go">array([[1., 2., 3.],</code>
<code class="go">       [4., 5., 6.]], dtype=float32)&gt;</code></pre>

<p>Just like an <code>ndarray</code>, a <code>tf.Tensor</code> has a shape and a data type (<code>dtype</code>):</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">t</code><code class="o">.</code><code class="n">shape</code>
<code class="go">TensorShape([2, 3])</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">t</code><code class="o">.</code><code class="n">dtype</code>
<code class="go">tf.float32</code></pre>

<p>Indexing works much like in NumPy:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">t</code><code class="p">[:,</code> <code class="mi">1</code><code class="p">:]</code>
<code class="go">&lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=</code>
<code class="go">array([[2., 3.],</code>
<code class="go">       [5., 6.]], dtype=float32)&gt;</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">t</code><code class="p">[</code><code class="o">...</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="n">tf</code><code class="o">.</code><code class="n">newaxis</code><code class="p">]</code>
<code class="go">&lt;tf.Tensor: shape=(2, 1), dtype=float32, numpy=</code>
<code class="go">array([[2.],</code>
<code class="go">       [5.]], dtype=float32)&gt;</code></pre>

<p>Most importantly, all sorts of tensor operations are available:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">t</code> <code class="o">+</code> <code class="mi">10</code>
<code class="go">&lt;tf.Tensor: shape=(2, 3), dtype=float32, numpy=</code>
<code class="go">array([[11., 12., 13.],</code>
<code class="go">       [14., 15., 16.]], dtype=float32)&gt;</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tf</code><code class="o">.</code><code class="n">square</code><code class="p">(</code><code class="n">t</code><code class="p">)</code>
<code class="go">&lt;tf.Tensor: shape=(2, 3), dtype=float32, numpy=</code>
<code class="go">array([[ 1.,  4.,  9.],</code>
<code class="go">       [16., 25., 36.]], dtype=float32)&gt;</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">t</code> <code class="o">@</code> <code class="n">tf</code><code class="o">.</code><code class="n">transpose</code><code class="p">(</code><code class="n">t</code><code class="p">)</code>
<code class="go">&lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=</code>
<code class="go">array([[14., 32.],</code>
<code class="go">       [32., 77.]], dtype=float32)&gt;</code></pre>

<p>Note that writing <code>t + 10</code> is equivalent to calling <code>tf.add(t, 10)</code> (indeed, Python calls the magic method <code>t.__add__(10)</code>, which just calls <code>tf.add(t, 10)</code>). Other operators like <code>-</code> and <code>*</code> are also supported. The <code>@</code> operator was added in Python 3.5, for matrix multiplication: it is equivalent to calling the <code>tf.matmul()</code> function.</p>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>Many functions and classes have aliases. For example, <code>tf.add()</code> and <code>tf.math.add()</code> are the same function. This allows TensorFlow to have concise names for the most common operations⁠<sup><a data-type="noteref" id="idm46324186658256-marker" href="ch12.xhtml#idm46324186658256">5</a></sup> while preserving well-organized packages.</p>
</div>

<p>A tensor can also hold a scalar value. In this case, the shape is empty:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mi">42</code><code class="p">)</code>
<code class="go">&lt;tf.Tensor: shape=(), dtype=int32, numpy=42&gt;</code></pre>

<p>You will find all the basic math operations you need (<code>tf.add()</code>, <code>tf.multiply()</code>, <code>tf.square()</code>, <code>tf.exp()</code>, <code>tf.sqrt()</code>, etc.) and most operations that you can find in NumPy (e.g., <code>tf.reshape()</code>, <code>tf.squeeze()</code>, <code>tf.tile()</code>). Some functions have a different name than in NumPy; for instance, <code>tf.reduce_mean()</code>, <code>tf.reduce_sum()</code>, <code>tf.reduce_max()</code>, and <code>tf.math.log()</code> are the equivalent of <code>np.mean()</code>, <code>np.sum()</code>, <code>np.max()</code> and <code>np.log()</code>. When the name differs, there is usually a good reason for it. For example, in TensorFlow you must write <code>tf.transpose(t)</code>; you cannot just write <code>t.T</code> like in NumPy. The reason is that the <code>tf.transpose()</code> function does not do exactly the same thing as NumPy’s <code>T</code> attribute: in TensorFlow, a new tensor is created with its own copy of the transposed data, while in NumPy, <code>t.T</code> is just a transposed view on the same data. Similarly, the <code>tf.reduce_sum()</code> operation is named this way because its GPU kernel (i.e., GPU implementation) uses a reduce algorithm that does not guarantee the order in which the elements are added: because 32-bit floats have limited precision, the result may change ever so slightly every time you call this operation. The same is true of <code>tf.reduce_mean()</code> (but of course <code>tf.reduce_max()</code> is deterministic).</p>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>The<a data-type="indexterm" data-primary="Keras" data-secondary="low-level API" id="idm46324186605760"/> Keras API has its own low-level API, located in <code>tf.keras.backend</code>. This package is usually imported as <code>K</code>, for conciseness. It used to include functions like <code>K.square()</code>, <code>K.exp()</code>, and <code>K.sqrt()</code>: this was useful to write portable code back when Keras supported multiple backends, but now that Keras is TensorFlow-only, most of these functions are not needed anymore. Instead, you should call TensorFlow’s low-level API directly (e.g., <code>tf.square()</code> instead of <code>K.square()</code>). Technically <code>K.square()</code> and its friends are still there for backward compatibility, but the documentation of the <code>tf.keras.backend</code> package only lists a handful of utility functions, such as <code>clear_session()</code> (discussed in <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a>).</p>
</div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Tensors and NumPy"><div class="sect2" id="idm46324186848784">
<h2>Tensors and NumPy</h2>

<p>Tensors<a data-type="indexterm" data-primary="TensorFlow, NumPy-like operations" data-secondary="tensors and NumPy" id="idm46324186597952"/> play nice with NumPy: you can create a tensor from a NumPy array, and vice versa. You can even apply TensorFlow operations to NumPy arrays and NumPy operations to tensors:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="kn">import</code> <code class="nn">numpy</code> <code class="k">as</code> <code class="nn">np</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">a</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">array</code><code class="p">([</code><code class="mf">2.</code><code class="p">,</code> <code class="mf">4.</code><code class="p">,</code> <code class="mf">5.</code><code class="p">])</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="n">a</code><code class="p">)</code>
<code class="go">&lt;tf.Tensor: id=111, shape=(3,), dtype=float64, numpy=array([2., 4., 5.])&gt;</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">t</code><code class="o">.</code><code class="n">numpy</code><code class="p">()</code>  <code class="c1"># or np.array(t)</code>
<code class="go">array([[1., 2., 3.],</code>
<code class="go">       [4., 5., 6.]], dtype=float32)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tf</code><code class="o">.</code><code class="n">square</code><code class="p">(</code><code class="n">a</code><code class="p">)</code>
<code class="go">&lt;tf.Tensor: id=116, shape=(3,), dtype=float64, numpy=array([4., 16., 25.])&gt;</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">np</code><code class="o">.</code><code class="n">square</code><code class="p">(</code><code class="n">t</code><code class="p">)</code>
<code class="go">array([[ 1.,  4.,  9.],</code>
<code class="go">       [16., 25., 36.]], dtype=float32)</code></pre>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>Notice that NumPy uses 64-bit precision by default, while TensorFlow uses 32-bit. This is because 32-bit precision is generally more than enough for neural networks, plus it runs faster and uses less RAM. So when you create a tensor from a NumPy array, make sure to set <code>dtype=tf.float32</code>.</p>
</div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Type Conversions"><div class="sect2" id="idm46324186553664">
<h2>Type Conversions</h2>

<p>Type conversions<a data-type="indexterm" data-primary="TensorFlow, NumPy-like operations" data-secondary="type conversions" id="idm46324186552128"/><a data-type="indexterm" data-primary="type conversions" id="idm46324186551152"/> can significantly hurt performance, and they can easily go unnoticed when they are done automatically. To avoid this, TensorFlow does not perform any type conversions automatically: it just raises an exception if you try to execute an operation on tensors with incompatible types. For example, you cannot add a float tensor and an integer tensor, and you cannot even add a 32-bit float and a 64-bit float:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mf">2.</code><code class="p">)</code> <code class="o">+</code> <code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mi">40</code><code class="p">)</code>
<code class="go">[...] InvalidArgumentError: [...] expected to be a float tensor [...]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mf">2.</code><code class="p">)</code> <code class="o">+</code> <code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mf">40.</code><code class="p">,</code> <code class="n">dtype</code><code class="o">=</code><code class="n">tf</code><code class="o">.</code><code class="n">float64</code><code class="p">)</code>
<code class="go">[...] InvalidArgumentError: [...] expected to be a float tensor [...]</code></pre>

<p>This may be a bit annoying at first, but remember that it’s for a good cause! And of course you can use <code>tf.cast()</code> when you really need to convert types:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">t2</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mf">40.</code><code class="p">,</code> <code class="n">dtype</code><code class="o">=</code><code class="n">tf</code><code class="o">.</code><code class="n">float64</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mf">2.0</code><code class="p">)</code> <code class="o">+</code> <code class="n">tf</code><code class="o">.</code><code class="n">cast</code><code class="p">(</code><code class="n">t2</code><code class="p">,</code> <code class="n">tf</code><code class="o">.</code><code class="n">float32</code><code class="p">)</code>
<code class="go">&lt;tf.Tensor: id=136, shape=(), dtype=float32, numpy=42.0&gt;</code></pre>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Variables"><div class="sect2" id="idm46324186407744">
<h2>Variables</h2>

<p>The <code>tf.Tensor</code> values<a data-type="indexterm" data-primary="variables" id="idm46324186375696"/><a data-type="indexterm" data-primary="TensorFlow, NumPy-like operations" data-secondary="variables" id="idm46324186374960"/> we’ve seen so far are immutable: you cannot modify them. This means that we cannot use regular tensors to implement weights in a neural network, since they need to be tweaked by backpropagation. Plus, other parameters may also need to change over time (e.g., a momentum optimizer keeps track of past gradients). What we need is a <code>tf.Variable</code>:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">v</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">Variable</code><code class="p">([[</code><code class="mf">1.</code><code class="p">,</code> <code class="mf">2.</code><code class="p">,</code> <code class="mf">3.</code><code class="p">],</code> <code class="p">[</code><code class="mf">4.</code><code class="p">,</code> <code class="mf">5.</code><code class="p">,</code> <code class="mf">6.</code><code class="p">]])</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">v</code>
<code class="go">&lt;tf.Variable 'Variable:0' shape=(2, 3) dtype=float32, numpy=</code>
<code class="go">array([[1., 2., 3.],</code>
<code class="go">       [4., 5., 6.]], dtype=float32)&gt;</code></pre>

<p>A <code>tf.Variable</code> acts much like a <code>tf.Tensor</code>: you can perform the same operations with it, it plays nicely with NumPy as well, and it is just as picky with types. But it can also be modified in place using the <code>assign()</code> method (or <code>assign_add()</code> or <code>assign_sub()</code>, which increment or decrement the variable by the given value). You can also modify individual cells (or slices), by using the cell’s (or slice’s) <code>assign()</code> method or by using the <code>scatter_update()</code> or <code>scatter_nd_update()</code> methods:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">v</code><code class="o">.</code><code class="n">assign</code><code class="p">(</code><code class="mi">2</code> <code class="o">*</code> <code class="n">v</code><code class="p">)</code>           <code class="c1"># v now equals [[2., 4., 6.], [8., 10., 12.]]</code>
<code class="n">v</code><code class="p">[</code><code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">]</code><code class="o">.</code><code class="n">assign</code><code class="p">(</code><code class="mi">42</code><code class="p">)</code>        <code class="c1"># v now equals [[2., 42., 6.], [8., 10., 12.]]</code>
<code class="n">v</code><code class="p">[:,</code> <code class="mi">2</code><code class="p">]</code><code class="o">.</code><code class="n">assign</code><code class="p">([</code><code class="mf">0.</code><code class="p">,</code> <code class="mf">1.</code><code class="p">])</code>  <code class="c1"># v now equals [[2., 42., 0.], [8., 10., 1.]]</code>
<code class="n">v</code><code class="o">.</code><code class="n">scatter_nd_update</code><code class="p">(</code>      <code class="c1"># v now equals [[100., 42., 0.], [8., 10., 200.]]</code>
    <code class="n">indices</code><code class="o">=</code><code class="p">[[</code><code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">],</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">]],</code> <code class="n">updates</code><code class="o">=</code><code class="p">[</code><code class="mf">100.</code><code class="p">,</code> <code class="mf">200.</code><code class="p">])</code></pre>

<p>Direct assignment will not work:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">v</code><code class="p">[</code><code class="mi">1</code><code class="p">]</code> <code class="o">=</code> <code class="p">[</code><code class="mf">7.</code><code class="p">,</code> <code class="mf">8.</code><code class="p">,</code> <code class="mf">9.</code><code class="p">]</code>
<code class="go">[...] TypeError: 'ResourceVariable' object does not support item assignment</code></pre>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>In practice you will rarely have to create variables manually, since Keras provides an <code>add_weight()</code> method that will take care of it for you, as we will see. Moreover, model parameters will generally be updated directly by the optimizers, so you will rarely need to update variables manually.</p>
</div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Other Data Structures"><div class="sect2" id="idm46324186199040">
<h2>Other Data Structures</h2>

<p>TensorFlow<a data-type="indexterm" data-primary="TensorFlow, NumPy-like operations" data-secondary="other data structures" id="idm46324186197744"/> supports several other data structures, including the following (please see the “Other Data Structures” section in the notebook or Appendix C for more details):</p>
<dl>
<dt>Sparse tensors (<code>tf.SparseTensor</code>)</dt>
<dd>
<p>Efficiently<a data-type="indexterm" data-primary="sparse tensors" id="idm46324186194336"/> represent tensors containing mostly zeros. The <code>tf.sparse</code> package contains operations for sparse tensors.</p>
</dd>
<dt>Tensor arrays (<code>tf.TensorArray</code>)</dt>
<dd>
<p>Are<a data-type="indexterm" data-primary="tensor arrays" id="idm46324186167408"/> lists of tensors. They have a fixed length by default but can optionally be made extensible. All tensors they contain must have the same shape and data type.</p>
</dd>
<dt>Ragged tensors (<code>tf.RaggedTensor</code>)</dt>
<dd>
<p>Represent<a data-type="indexterm" data-primary="ragged tensors" id="idm46324186164880"/> lists of tensors, all of the same rank and data type, but with varying sizes. The dimensions along which the tensor sizes vary are called the <em>ragged dimensions</em>. The tf.ragged package contains operations for ragged tensors.</p>
</dd>
<dt>String tensors</dt>
<dd>
<p>Are<a data-type="indexterm" data-primary="string tensors" id="idm46324186162320"/> regular tensors of type <code>tf.string</code>. These represent byte strings, not Unicode strings, so if you create a string tensor using a Unicode string (e.g., a regular Python 3 string like <code>"café"</code>), then it will get encoded to UTF-8 automatically (e.g., <code>b"caf\xc3\xa9"</code>). Alternatively, you can represent Unicode strings using tensors of type <code>tf.int32</code>, where each item represents a Unicode code point (e.g., <code>[99,  97, 102, 233]</code>). The <code>tf.strings</code> package (with an <code>s</code>) contains ops for byte strings and Unicode strings (and to convert one into the other). It’s important to note that a <code>tf.string</code> is atomic, meaning that its length does not appear in the tensor’s shape. Once you convert it to a Unicode tensor (i.e., a tensor of type <code>tf.int32</code> holding Unicode code points), the length appears in the shape.</p>
</dd>
<dt>Sets</dt>
<dd>
<p>Are<a data-type="indexterm" data-primary="sets" id="idm46324186156304"/> represented as regular tensors (or sparse tensors). For example, <code>tf.constant([[1, 2], [3, 4]])</code> represents the two sets {1, 2} and {3, 4}. More generally, each set is represented by a vector in the tensor’s last axis. You can manipulate sets using operations from the <code>tf.sets</code> package.</p>
</dd>
<dt>Queues</dt>
<dd>
<p>Store tensors across multiple steps. TensorFlow offers various kinds of queues: basic First In, First Out (FIFO) queues (<code>FIFOQueue</code>), queues that can<a data-type="indexterm" data-primary="queues" id="idm46324186152240"/><a data-type="indexterm" data-primary="First In, First Out (FIFO) queues" id="idm46324186151504"/> prioritize some items (<code>PriorityQueue</code>), shuffle their items (<code>RandomShuffleQueue</code>), and batch items of different shapes by padding (<code>PaddingFIFOQueue</code>). These classes are all in the <code>tf.queue</code> package.</p>
</dd>
</dl>

<p>With tensors, operations, variables, and various data structures at your disposal, you are now ready to customize your models and training algorithms!<a data-type="indexterm" data-primary="" data-startref="NPtensor12" id="idm46324186148720"/></p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Customizing Models and Training Algorithms"><div class="sect1" id="idm46324186147456">
<h1>Customizing Models and Training Algorithms</h1>

<p>Let’s<a data-type="indexterm" data-primary="models" data-secondary="custom with TensorFlow" id="Mtensor12"/> start by creating a custom loss function, which is a straightforward and common use case.</p>








<section data-type="sect2" data-pdf-bookmark="Custom Loss Functions"><div class="sect2" id="idm46324186144144">
<h2>Custom Loss Functions</h2>

<p>Suppose<a data-type="indexterm" data-primary="custom models" data-secondary="loss functions" id="idm46324186142448"/><a data-type="indexterm" data-primary="TensorFlow, custom models and training" data-secondary="loss functions" id="idm46324186141472"/> you want to train a regression model, but your training set is a bit noisy. Of course, you start by trying to clean up your dataset by removing or fixing the outliers, but that turns out to be insufficient; the dataset is still noisy. Which loss function should you use? The<a data-type="indexterm" data-primary="cost functions" data-secondary="mean squared error" id="idm46324186140400"/> mean squared error might penalize large errors too much and cause your model to be imprecise. The mean absolute error would not penalize outliers as much, but training might take a while to converge, and the trained model might not be very precise. This is probably a good time to use the Huber loss (introduced in <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a>) instead of the good old MSE. The<a data-type="indexterm" data-primary="Huber loss" id="idm46324186138528"/> Huber loss is available in Keras (just use an instance of the <code>tf.keras.losses.Huber</code> class). But let’s pretend it’s not there. To implement it, just create a function that takes the labels and the model’s predictions as arguments, and uses TensorFlow operations to compute a tensor containing all the losses (one per sample):</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">def</code> <code class="nf">huber_fn</code><code class="p">(</code><code class="n">y_true</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">):</code>
    <code class="n">error</code> <code class="o">=</code> <code class="n">y_true</code> <code class="o">-</code> <code class="n">y_pred</code>
    <code class="n">is_small_error</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">abs</code><code class="p">(</code><code class="n">error</code><code class="p">)</code> <code class="o">&lt;</code> <code class="mi">1</code>
    <code class="n">squared_loss</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">square</code><code class="p">(</code><code class="n">error</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code>
    <code class="n">linear_loss</code>  <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">abs</code><code class="p">(</code><code class="n">error</code><code class="p">)</code> <code class="o">-</code> <code class="mf">0.5</code>
    <code class="k">return</code> <code class="n">tf</code><code class="o">.</code><code class="n">where</code><code class="p">(</code><code class="n">is_small_error</code><code class="p">,</code> <code class="n">squared_loss</code><code class="p">,</code> <code class="n">linear_loss</code><code class="p">)</code></pre>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>For better performance, you should use a vectorized implementation, as in this example. Moreover, if you want to benefit from TensorFlow’s graph optimization features, you should use only TensorFlow operations.</p>
</div>

<p>It is also possible to return the mean loss instead of the individual sample losses, but this is not recommended as it makes it impossible to use class weights or sample weights when you need them (see <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a>).</p>

<p>Now you can use this Huber loss function when you compile the Keras model, then train your model as usual:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">model</code><code class="o">.</code><code class="n">compile</code><code class="p">(</code><code class="n">loss</code><code class="o">=</code><code class="n">huber_fn</code><code class="p">,</code> <code class="n">optimizer</code><code class="o">=</code><code class="s2">"nadam"</code><code class="p">)</code>
<code class="n">model</code><code class="o">.</code><code class="n">fit</code><code class="p">(</code><code class="n">X_train</code><code class="p">,</code> <code class="n">y_train</code><code class="p">,</code> <code class="p">[</code><code class="o">...</code><code class="p">])</code></pre>

<p>And that’s it! For each batch during training, Keras will call the <code>huber_fn()</code> function to compute the loss, then it will use reverse-mode autodiff to compute the gradients of the loss with regards to all the model parameters, and finally it will perform a Gradient Descent step (in this example using a Nadam optimizer). Moreover, it will keep track of the total loss since the beginning of the epoch, and it will display the mean loss.</p>

<p>But what happens to this custom loss when you save the model?</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Saving and Loading Models That Contain Custom Components"><div class="sect2" id="idm46324186024528">
<h2>Saving and Loading Models That Contain Custom Components</h2>

<p>Saving<a data-type="indexterm" data-primary="custom models" data-secondary="saving and loading" id="idm46324186022896"/><a data-type="indexterm" data-primary="TensorFlow, custom models and training" data-secondary="saving and loading" id="idm46324186021888"/> a model containing a custom loss function works fine, but when you load it, you’ll need to provide a dictionary that maps the function name to the actual function. More generally, when you load a model containing custom objects, you need to map the names to the objects:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">model</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">models</code><code class="o">.</code><code class="n">load_model</code><code class="p">(</code><code class="s2">"my_model_with_a_custom_loss"</code><code class="p">,</code>
                                   <code class="n">custom_objects</code><code class="o">=</code><code class="p">{</code><code class="s2">"huber_fn"</code><code class="p">:</code> <code class="n">huber_fn</code><code class="p">})</code></pre>

<p>With the current implementation, any error between –1 and 1 is considered “small.” But what if you want a different threshold? One solution is to create a function that creates a configured loss function:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">def</code> <code class="nf">create_huber</code><code class="p">(</code><code class="n">threshold</code><code class="o">=</code><code class="mf">1.0</code><code class="p">):</code>
    <code class="k">def</code> <code class="nf">huber_fn</code><code class="p">(</code><code class="n">y_true</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">):</code>
        <code class="n">error</code> <code class="o">=</code> <code class="n">y_true</code> <code class="o">-</code> <code class="n">y_pred</code>
        <code class="n">is_small_error</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">abs</code><code class="p">(</code><code class="n">error</code><code class="p">)</code> <code class="o">&lt;</code> <code class="n">threshold</code>
        <code class="n">squared_loss</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">square</code><code class="p">(</code><code class="n">error</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code>
        <code class="n">linear_loss</code>  <code class="o">=</code> <code class="n">threshold</code> <code class="o">*</code> <code class="n">tf</code><code class="o">.</code><code class="n">abs</code><code class="p">(</code><code class="n">error</code><code class="p">)</code> <code class="o">-</code> <code class="n">threshold</code> <code class="o">**</code> <code class="mi">2</code> <code class="o">/</code> <code class="mi">2</code>
        <code class="k">return</code> <code class="n">tf</code><code class="o">.</code><code class="n">where</code><code class="p">(</code><code class="n">is_small_error</code><code class="p">,</code> <code class="n">squared_loss</code><code class="p">,</code> <code class="n">linear_loss</code><code class="p">)</code>
    <code class="k">return</code> <code class="n">huber_fn</code>

<code class="n">model</code><code class="o">.</code><code class="n">compile</code><code class="p">(</code><code class="n">loss</code><code class="o">=</code><code class="n">create_huber</code><code class="p">(</code><code class="mf">2.0</code><code class="p">),</code> <code class="n">optimizer</code><code class="o">=</code><code class="s2">"nadam"</code><code class="p">)</code></pre>

<p>Unfortunately, when you save the model, the <code>threshold</code> will not be saved. This means that you will have to specify the <code>threshold</code> value when loading the model (note that the name to use is <code>"huber_fn"</code>, which is the name of the function you gave Keras, not the name of the function that created it):</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">model</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">models</code><code class="o">.</code><code class="n">load_model</code><code class="p">(</code><code class="s2">"my_model_with_a_custom_loss_threshold_2.h5"</code><code class="p">,</code>
                                <code class="n">custom_objects</code><code class="o">=</code><code class="p">{</code><code class="s2">"huber_fn"</code><code class="p">:</code> <code class="n">create_huber</code><code class="p">(</code><code class="mf">2.0</code><code class="p">)})</code></pre>

<p>You can solve this by creating a subclass of the <code>tf.keras.losses.Loss</code> class, and then implementing its <code>get_config()</code> method:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">class</code> <code class="nc">HuberLoss</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">losses</code><code class="o">.</code><code class="n">Loss</code><code class="p">):</code>
    <code class="k">def</code> <code class="fm">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">threshold</code><code class="o">=</code><code class="mf">1.0</code><code class="p">,</code> <code class="o">**</code><code class="n">kwargs</code><code class="p">):</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">threshold</code> <code class="o">=</code> <code class="n">threshold</code>
        <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="fm">__init__</code><code class="p">(</code><code class="o">**</code><code class="n">kwargs</code><code class="p">)</code>

    <code class="k">def</code> <code class="nf">call</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">y_true</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">):</code>
        <code class="n">error</code> <code class="o">=</code> <code class="n">y_true</code> <code class="o">-</code> <code class="n">y_pred</code>
        <code class="n">is_small_error</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">abs</code><code class="p">(</code><code class="n">error</code><code class="p">)</code> <code class="o">&lt;</code> <code class="bp">self</code><code class="o">.</code><code class="n">threshold</code>
        <code class="n">squared_loss</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">square</code><code class="p">(</code><code class="n">error</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code>
        <code class="n">linear_loss</code>  <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">threshold</code> <code class="o">*</code> <code class="n">tf</code><code class="o">.</code><code class="n">abs</code><code class="p">(</code><code class="n">error</code><code class="p">)</code> <code class="o">-</code> <code class="bp">self</code><code class="o">.</code><code class="n">threshold</code><code class="o">**</code><code class="mi">2</code> <code class="o">/</code> <code class="mi">2</code>
        <code class="k">return</code> <code class="n">tf</code><code class="o">.</code><code class="n">where</code><code class="p">(</code><code class="n">is_small_error</code><code class="p">,</code> <code class="n">squared_loss</code><code class="p">,</code> <code class="n">linear_loss</code><code class="p">)</code>

    <code class="k">def</code> <code class="nf">get_config</code><code class="p">(</code><code class="bp">self</code><code class="p">):</code>
        <code class="n">base_config</code> <code class="o">=</code> <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="n">get_config</code><code class="p">()</code>
        <code class="k">return</code> <code class="p">{</code><code class="o">**</code><code class="n">base_config</code><code class="p">,</code> <code class="s2">"threshold"</code><code class="p">:</code> <code class="bp">self</code><code class="o">.</code><code class="n">threshold</code><code class="p">}</code></pre>

<p>Let’s walk through this code:</p>

<ul>
<li>
<p>The constructor accepts <code>**kwargs</code> and passes them to the parent constructor, which handles standard hyperparameters: the <code>name</code> of the loss and the <code>reduction</code> algorithm to use to aggregate the individual instance losses. By default, it is <code>"AUTO"</code>, which is equivalent to <code>"SUM_OVER_BATCH_SIZE"</code>: the loss will be the sum of the instance losses, weighted by the sample weights, if any, and divided by the batch size (not by the sum of weights, so this is <em>not</em> the weighted mean).⁠<sup><a data-type="noteref" id="idm46324185616160-marker" href="ch12.xhtml#idm46324185616160">6</a></sup> Other possible values are <code>"SUM"</code> and <code>"NONE"</code>.</p>
</li>
<li>
<p>The <code>call()</code> method takes the labels and predictions, computes all the instance losses, and returns them.</p>
</li>
<li>
<p>The <code>get_config()</code> method returns a dictionary mapping each hyperparameter name to its value. It first calls the parent class’s <code>get_config()</code> method, then adds the new hyperparameters to this dictionary.⁠<sup><a data-type="noteref" id="idm46324185611296-marker" href="ch12.xhtml#idm46324185611296">7</a></sup></p>
</li>
</ul>

<p>You can then use any instance of this class when you compile the model:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">model</code><code class="o">.</code><code class="n">compile</code><code class="p">(</code><code class="n">loss</code><code class="o">=</code><code class="n">HuberLoss</code><code class="p">(</code><code class="mf">2.</code><code class="p">),</code> <code class="n">optimizer</code><code class="o">=</code><code class="s2">"nadam"</code><code class="p">)</code></pre>

<p>When you save the model, the threshold will be saved along with it; and when you load the model, you just need to map the class name to the class itself:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">model</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">models</code><code class="o">.</code><code class="n">load_model</code><code class="p">(</code><code class="s2">"my_model_with_a_custom_loss_class"</code><code class="p">,</code>
                                   <code class="n">custom_objects</code><code class="o">=</code><code class="p">{</code><code class="s2">"HuberLoss"</code><code class="p">:</code> <code class="n">HuberLoss</code><code class="p">})</code></pre>

<p>When you save a model, Keras calls the loss instance’s <code>get_config()</code> method and saves the config in the SavedModel. When you load the model, it calls the <code>from_config()</code> class method on the <code>HuberLoss</code> class: this method is implemented by the base class (<code>Loss</code>) and creates an instance of the class, passing <code>**config</code> to the <span class="keep-together">constructor</span>.</p>

<p>That’s it for losses! As we will see now, custom activation functions, initializers, regularizers, and constraints are not much different.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Custom Activation Functions, Initializers, Regularizers, and Constraints"><div class="sect2" id="idm46324186023936">
<h2>Custom Activation Functions, Initializers, Regularizers, and Constraints</h2>

<p>Most<a data-type="indexterm" data-primary="custom models" data-secondary="activation functions, initializers, regularizers, and constraints" id="idm46324185528752"/><a data-type="indexterm" data-primary="TensorFlow, custom models and training" data-secondary="activation functions, initializers, regularizers, and constraints" id="idm46324185524496"/> Keras functionalities, such as losses, regularizers, constraints, initializers, metrics, activation functions, layers, and even full models, can be customized in very much the same way. Most of the time, you will just need to write a simple function with the appropriate inputs and outputs. Here are examples of a custom activation function (equivalent to <code>tf.keras.activations.softplus()</code> or <code>tf.nn.softplus()</code>), a custom Glorot initializer (equivalent to <code>tf.keras.initializers.glorot_normal()</code>), a custom ℓ<sub>1</sub> regularizer (equivalent to <code>tf.keras.regularizers.l1(0.01)</code>), and a custom constraint that ensures weights are all positive (equivalent to <code>tf.keras.constraints.nonneg()</code> or <code>tf.nn.relu()</code>):</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">def</code> <code class="nf">my_softplus</code><code class="p">(</code><code class="n">z</code><code class="p">):</code>
    <code class="k">return</code> <code class="n">tf</code><code class="o">.</code><code class="n">math</code><code class="o">.</code><code class="n">log</code><code class="p">(</code><code class="mf">1.0</code> <code class="o">+</code> <code class="n">tf</code><code class="o">.</code><code class="n">exp</code><code class="p">(</code><code class="n">z</code><code class="p">))</code>

<code class="k">def</code> <code class="nf">my_glorot_initializer</code><code class="p">(</code><code class="n">shape</code><code class="p">,</code> <code class="n">dtype</code><code class="o">=</code><code class="n">tf</code><code class="o">.</code><code class="n">float32</code><code class="p">):</code>
    <code class="n">stddev</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">sqrt</code><code class="p">(</code><code class="mf">2.</code> <code class="o">/</code> <code class="p">(</code><code class="n">shape</code><code class="p">[</code><code class="mi">0</code><code class="p">]</code> <code class="o">+</code> <code class="n">shape</code><code class="p">[</code><code class="mi">1</code><code class="p">]))</code>
    <code class="k">return</code> <code class="n">tf</code><code class="o">.</code><code class="n">random</code><code class="o">.</code><code class="n">normal</code><code class="p">(</code><code class="n">shape</code><code class="p">,</code> <code class="n">stddev</code><code class="o">=</code><code class="n">stddev</code><code class="p">,</code> <code class="n">dtype</code><code class="o">=</code><code class="n">dtype</code><code class="p">)</code>

<code class="k">def</code> <code class="nf">my_l1_regularizer</code><code class="p">(</code><code class="n">weights</code><code class="p">):</code>
    <code class="k">return</code> <code class="n">tf</code><code class="o">.</code><code class="n">reduce_sum</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">abs</code><code class="p">(</code><code class="mf">0.01</code> <code class="o">*</code> <code class="n">weights</code><code class="p">))</code>

<code class="k">def</code> <code class="nf">my_positive_weights</code><code class="p">(</code><code class="n">weights</code><code class="p">):</code>  <code class="c1"># return value is just tf.nn.relu(weights)</code>
    <code class="k">return</code> <code class="n">tf</code><code class="o">.</code><code class="n">where</code><code class="p">(</code><code class="n">weights</code> <code class="o">&lt;</code> <code class="mf">0.</code><code class="p">,</code> <code class="n">tf</code><code class="o">.</code><code class="n">zeros_like</code><code class="p">(</code><code class="n">weights</code><code class="p">),</code> <code class="n">weights</code><code class="p">)</code></pre>

<p>As you can see, the arguments depend on the type of custom function. These custom functions can then be used normally; for example:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">layer</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Dense</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="n">activation</code><code class="o">=</code><code class="n">my_softplus</code><code class="p">,</code>
                              <code class="n">kernel_initializer</code><code class="o">=</code><code class="n">my_glorot_initializer</code><code class="p">,</code>
                              <code class="n">kernel_regularizer</code><code class="o">=</code><code class="n">my_l1_regularizer</code><code class="p">,</code>
                              <code class="n">kernel_constraint</code><code class="o">=</code><code class="n">my_positive_weights</code><code class="p">)</code></pre>

<p>The activation function will be applied to the output of this <code>Dense</code> layer, and its result will be passed on to the next layer. The layer’s weights will be initialized using the value returned by the initializer. At each training step the weights will be passed to the regularization function to compute the regularization loss, which will be added to the main loss to get the final loss used for training. Finally, the constraint function will be called after each training step, and the layer’s weights will be replaced by the constrained weights.</p>

<p>If a function has hyperparameters that need to be saved along with the model, then you will want to subclass the appropriate class, such as <code>tf.keras.regularizers.Regularizer</code>, <code>tf.keras.constraints.Constraint</code>, <code>tf.keras.initializers.Initializer</code>, or <code>tf.keras.layers.Layer</code> (for any layer, including activation functions). Much like we did for the custom loss, here is a simple class for ℓ<sub>1</sub> regularization that saves its <code>factor</code> hyperparameter (this time we do not need to call the parent constructor or the <code>get_config()</code> method, as they are not defined by the parent class):</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">class</code> <code class="nc">MyL1Regularizer</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">regularizers</code><code class="o">.</code><code class="n">Regularizer</code><code class="p">):</code>
    <code class="k">def</code> <code class="fm">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">factor</code><code class="p">):</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">factor</code> <code class="o">=</code> <code class="n">factor</code>

    <code class="k">def</code> <code class="fm">__call__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">weights</code><code class="p">):</code>
        <code class="k">return</code> <code class="n">tf</code><code class="o">.</code><code class="n">reduce_sum</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">abs</code><code class="p">(</code><code class="bp">self</code><code class="o">.</code><code class="n">factor</code> <code class="o">*</code> <code class="n">weights</code><code class="p">))</code>

    <code class="k">def</code> <code class="nf">get_config</code><code class="p">(</code><code class="bp">self</code><code class="p">):</code>
        <code class="k">return</code> <code class="p">{</code><code class="s2">"factor"</code><code class="p">:</code> <code class="bp">self</code><code class="o">.</code><code class="n">factor</code><code class="p">}</code></pre>

<p>Note that you must implement the <code>call()</code> method for losses, layers (including activation functions), and models, or the <code>__call__()</code> method for regularizers, initializers, and constraints. For metrics, things are a bit different, as we will see now.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Custom Metrics"><div class="sect2" id="idm46324185252864">
<h2>Custom Metrics</h2>

<p>Losses<a data-type="indexterm" data-primary="custom models" data-secondary="metrics" id="idm46324185251200"/><a data-type="indexterm" data-primary="TensorFlow, custom models and training" data-secondary="metrics" id="idm46324185250192"/> and metrics are conceptually not the same thing: losses (e.g., cross entropy) are used by Gradient Descent to <em>train</em> a model, so they must be differentiable (at least at the points where they are evaluated), and their gradients should not be 0 everywhere. Plus, it’s OK if they are not easily interpretable by humans. In contrast, <a data-type="indexterm" data-primary="metrics" data-secondary="accuracy" id="idm46324185248640"/>metrics (e.g., accuracy) are used to <em>evaluate</em> a model: they must be more easily interpretable, and they can be non-differentiable or have 0 gradients everywhere.</p>

<p>That said, in most cases, defining a custom metric function is exactly the same as defining a custom loss function. In fact, we could even use the Huber loss function we created earlier as a metric;⁠<sup><a data-type="noteref" id="idm46324185246608-marker" href="ch12.xhtml#idm46324185246608">8</a></sup> it would work just fine (and persistence would also work the same way, in this case only saving the name of the function, <code>"huber_fn"</code>, not the threshold):</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">model</code><code class="o">.</code><code class="n">compile</code><code class="p">(</code><code class="n">loss</code><code class="o">=</code><code class="s2">"mse"</code><code class="p">,</code> <code class="n">optimizer</code><code class="o">=</code><code class="s2">"nadam"</code><code class="p">,</code> <code class="n">metrics</code><code class="o">=</code><code class="p">[</code><code class="n">create_huber</code><code class="p">(</code><code class="mf">2.0</code><code class="p">)])</code></pre>

<p>For each batch during training, Keras will compute this metric and keep track of its mean since the beginning of the epoch. Most of the time, this is exactly what you want. But not always! Consider a binary classifier’s precision, for example. As we saw in <a data-type="xref" href="ch03.xhtml#classification_chapter">Chapter 3</a>, precision is the number of true positives divided by the number of positive predictions (including both true positives and false positives). Suppose the model made five positive predictions in the first batch, four of which were correct: that’s 80% precision. Then suppose the model made three positive predictions in the second batch, but they were all incorrect: that’s 0% precision for the second batch. If you just compute the mean of these two precisions, you get 40%. But wait a second—that’s <em>not</em> the model’s precision over these two batches! Indeed, there were a total of four true positives (4 + 0) out of eight positive predictions (5 + 3), so the overall precision is 50%, not 40%. What we need is an object that can keep track of the number of true positives and the number of false positives and that can compute the precision based on these numbers when requested. This is precisely what the <code>tf.keras.metrics.Precision</code> class does:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">precision</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">metrics</code><code class="o">.</code><code class="n">Precision</code><code class="p">()</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">precision</code><code class="p">([</code><code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">],</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">])</code>
<code class="go">&lt;tf.Tensor: shape=(), dtype=float32, numpy=0.8&gt;</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">precision</code><code class="p">([</code><code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">1</code><code class="p">],</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">])</code>
<code class="go">&lt;tf.Tensor: shape=(), dtype=float32, numpy=0.5&gt;</code></pre>

<p>In this example, we created a <code>Precision</code> object, then we used it like a function, passing it the labels and predictions for the first batch, then for the second batch (you can optionally pass sample weights as well, if you want). We used the same number of true and false positives as in the example we just discussed. After the first batch, it returns a precision of 80%; then after the second batch, it returns 50% (which is the overall precision so far, not the second batch’s precision). This<a data-type="indexterm" data-primary="streaming metrics" id="idm46324185101136"/><a data-type="indexterm" data-primary="stateful metrics" id="idm46324185024016"/> is called a <em>streaming metric</em> (or <em>stateful metric</em>), as it is gradually updated, batch after batch.</p>

<p>At any point, we can call the <code>result()</code> method to get the current value of the metric. We can also look at its variables (tracking the number of true and false positives) by using the <code>variables</code> attribute, and we can reset these variables using the <code>reset_states()</code> method:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">precision</code><code class="o">.</code><code class="n">result</code><code class="p">()</code>
<code class="go">&lt;tf.Tensor: shape=(), dtype=float32, numpy=0.5&gt;</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">precision</code><code class="o">.</code><code class="n">variables</code>
<code class="go">[&lt;tf.Variable 'true_positives:0' [...], numpy=array([4.], dtype=float32)&gt;,</code>
<code class="go"> &lt;tf.Variable 'false_positives:0' [...], numpy=array([4.], dtype=float32)&gt;]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">precision</code><code class="o">.</code><code class="n">reset_states</code><code class="p">()</code>  <code class="c1"># both variables get reset to 0.0</code></pre>

<p>If you need to define your own custom streaming metric, create a subclass of the <code>tf.keras.metrics.Metric</code> class. Here is a basic example that keeps track of the total Huber loss and the number of instances seen so far. When asked for the result, it returns the ratio, which is just the mean Huber loss:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">class</code> <code class="nc">HuberMetric</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">metrics</code><code class="o">.</code><code class="n">Metric</code><code class="p">):</code>
    <code class="k">def</code> <code class="fm">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">threshold</code><code class="o">=</code><code class="mf">1.0</code><code class="p">,</code> <code class="o">**</code><code class="n">kwargs</code><code class="p">):</code>
        <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="fm">__init__</code><code class="p">(</code><code class="o">**</code><code class="n">kwargs</code><code class="p">)</code>  <code class="c1"># handles base args (e.g., dtype)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">threshold</code> <code class="o">=</code> <code class="n">threshold</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">huber_fn</code> <code class="o">=</code> <code class="n">create_huber</code><code class="p">(</code><code class="n">threshold</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">total</code> <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">add_weight</code><code class="p">(</code><code class="s2">"total"</code><code class="p">,</code> <code class="n">initializer</code><code class="o">=</code><code class="s2">"zeros"</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">count</code> <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">add_weight</code><code class="p">(</code><code class="s2">"count"</code><code class="p">,</code> <code class="n">initializer</code><code class="o">=</code><code class="s2">"zeros"</code><code class="p">)</code>

    <code class="k">def</code> <code class="nf">update_state</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">y_true</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">,</code> <code class="n">sample_weight</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>
        <code class="n">sample_metrics</code> <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">huber_fn</code><code class="p">(</code><code class="n">y_true</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">total</code><code class="o">.</code><code class="n">assign_add</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">reduce_sum</code><code class="p">(</code><code class="n">sample_metrics</code><code class="p">))</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">count</code><code class="o">.</code><code class="n">assign_add</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">cast</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">size</code><code class="p">(</code><code class="n">y_true</code><code class="p">),</code> <code class="n">tf</code><code class="o">.</code><code class="n">float32</code><code class="p">))</code>

    <code class="k">def</code> <code class="nf">result</code><code class="p">(</code><code class="bp">self</code><code class="p">):</code>
        <code class="k">return</code> <code class="bp">self</code><code class="o">.</code><code class="n">total</code> <code class="o">/</code> <code class="bp">self</code><code class="o">.</code><code class="n">count</code>

    <code class="k">def</code> <code class="nf">get_config</code><code class="p">(</code><code class="bp">self</code><code class="p">):</code>
        <code class="n">base_config</code> <code class="o">=</code> <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="n">get_config</code><code class="p">()</code>
        <code class="k">return</code> <code class="p">{</code><code class="o">**</code><code class="n">base_config</code><code class="p">,</code> <code class="s2">"threshold"</code><code class="p">:</code> <code class="bp">self</code><code class="o">.</code><code class="n">threshold</code><code class="p">}</code></pre>

<p>Let’s walk through this code:⁠<sup><a data-type="noteref" id="idm46324184904384-marker" href="ch12.xhtml#idm46324184904384">9</a></sup></p>

<ul>
<li>
<p>The constructor uses the <code>add_weight()</code> method to create the variables needed to keep track of the metric’s state over multiple batches—in this case, the sum of all Huber losses (<code>total</code>) and the number of instances seen so far (<code>count</code>). You could just create variables manually if you preferred. Keras tracks any <code>tf.Variable</code> that is set as an attribute (and more generally, any “trackable” object, such as layers or models).</p>
</li>
<li>
<p>The <code>update_state()</code> method is called when you use an instance of this class as a function (as we did with the <code>Precision</code> object). It updates the variables, given the labels and predictions for one batch (and sample weights, but in this case we ignore them).</p>
</li>
<li>
<p>The <code>result()</code> method computes and returns the final result, in this case the mean Huber metric over all instances. When you use the metric as a function, the <code>update_state()</code> method gets called first, then the <code>result()</code> method is called, and its output is returned.</p>
</li>
<li>
<p>We also implement the <code>get_config()</code> method to ensure the <code>threshold</code> gets saved along with the model.</p>
</li>
<li>
<p>The default implementation of the <code>reset_states()</code> method resets all variables to 0.0 (but you can override it if needed).</p>
</li>
</ul>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>Keras will take care of variable persistence seamlessly; no action is required.</p>
</div>

<p>When you define a metric using a simple function, Keras automatically calls it for each batch, and it keeps track of the mean during each epoch, just like we did manually. So the only benefit of our <code>HuberMetric</code> class is that the <code>threshold</code> will be saved. But of course, some metrics, like precision, cannot simply be averaged over batches: in those cases, there’s no other option than to implement a streaming metric.</p>

<p>Now that we have built a streaming metric, building a custom layer will seem like a walk in the park!</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Custom Layers"><div class="sect2" id="idm46324185252272">
<h2>Custom Layers</h2>

<p>You<a data-type="indexterm" data-primary="custom models" data-secondary="layers" id="idm46324184744400"/><a data-type="indexterm" data-primary="TensorFlow, custom models and training" data-secondary="layers" id="idm46324184743392"/> may occasionally want to build an architecture that contains an exotic layer for which TensorFlow does not provide a default implementation. Or you may simply want to build a very repetitive architecture, in which a particular block of layers is repeated many times, and it would be convenient to treat each block as a single layer. For such cases, you’ll want to build a custom layer.</p>

<p>First, some layers have no weights, such as <code>tf.keras.layers.Flatten</code> or <code>tf.keras.layers.ReLU</code>. If you want to create a custom layer without any weights, the simplest option is to write a function and wrap it in a <code>tf.keras.layers.Lambda</code> layer. For example, the following layer will apply the exponential function to its inputs:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">exponential_layer</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Lambda</code><code class="p">(</code><code class="k">lambda</code> <code class="n">x</code><code class="p">:</code> <code class="n">tf</code><code class="o">.</code><code class="n">exp</code><code class="p">(</code><code class="n">x</code><code class="p">))</code></pre>

<p>This custom layer can then be used like any other layer, using the Sequential API, the Functional API, or the Subclassing API. You can also use it as an activation function, or you could use <code>activation=tf.exp</code>. The exponential layer is sometimes used in the output layer of a regression model when the values to predict have very different scales (e.g., 0.001, 10., 1,000.). In fact, the exponential function is one of the standard activation functions in Keras, so you can just use <code>activation="exponential"</code>.</p>

<p>As you might guess, to build a custom stateful layer (i.e., a layer with weights), you need to create a subclass of the <code>tf.keras.layers.Layer</code> class. For example, the following class implements a simplified version of the <code>Dense</code> layer:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">class</code> <code class="nc">MyDense</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Layer</code><code class="p">):</code>
    <code class="k">def</code> <code class="fm">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">units</code><code class="p">,</code> <code class="n">activation</code><code class="o">=</code><code class="bp">None</code><code class="p">,</code> <code class="o">**</code><code class="n">kwargs</code><code class="p">):</code>
        <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="fm">__init__</code><code class="p">(</code><code class="o">**</code><code class="n">kwargs</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">units</code> <code class="o">=</code> <code class="n">units</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">activation</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">activations</code><code class="o">.</code><code class="n">get</code><code class="p">(</code><code class="n">activation</code><code class="p">)</code>

    <code class="k">def</code> <code class="nf">build</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">batch_input_shape</code><code class="p">):</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">kernel</code> <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">add_weight</code><code class="p">(</code>
            <code class="n">name</code><code class="o">=</code><code class="s2">"kernel"</code><code class="p">,</code> <code class="n">shape</code><code class="o">=</code><code class="p">[</code><code class="n">batch_input_shape</code><code class="p">[</code><code class="o">-</code><code class="mi">1</code><code class="p">],</code> <code class="bp">self</code><code class="o">.</code><code class="n">units</code><code class="p">],</code>
            <code class="n">initializer</code><code class="o">=</code><code class="s2">"glorot_normal"</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">bias</code> <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">add_weight</code><code class="p">(</code>
            <code class="n">name</code><code class="o">=</code><code class="s2">"bias"</code><code class="p">,</code> <code class="n">shape</code><code class="o">=</code><code class="p">[</code><code class="bp">self</code><code class="o">.</code><code class="n">units</code><code class="p">],</code> <code class="n">initializer</code><code class="o">=</code><code class="s2">"zeros"</code><code class="p">)</code>
        <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="n">build</code><code class="p">(</code><code class="n">batch_input_shape</code><code class="p">)</code>  <code class="c1"># must be at the end</code>

    <code class="k">def</code> <code class="nf">call</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">X</code><code class="p">):</code>
        <code class="k">return</code> <code class="bp">self</code><code class="o">.</code><code class="n">activation</code><code class="p">(</code><code class="n">X</code> <code class="err">@</code> <code class="bp">self</code><code class="o">.</code><code class="n">kernel</code> <code class="o">+</code> <code class="bp">self</code><code class="o">.</code><code class="n">bias</code><code class="p">)</code>

    <code class="k">def</code> <code class="nf">compute_output_shape</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">batch_input_shape</code><code class="p">):</code>
        <code class="k">return</code> <code class="n">tf</code><code class="o">.</code><code class="n">TensorShape</code><code class="p">(</code><code class="n">batch_input_shape</code><code class="o">.</code><code class="n">as_list</code><code class="p">()[:</code><code class="o">-</code><code class="mi">1</code><code class="p">]</code> <code class="o">+</code> <code class="p">[</code><code class="bp">self</code><code class="o">.</code><code class="n">units</code><code class="p">])</code>

    <code class="k">def</code> <code class="nf">get_config</code><code class="p">(</code><code class="bp">self</code><code class="p">):</code>
        <code class="n">base_config</code> <code class="o">=</code> <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="n">get_config</code><code class="p">()</code>
        <code class="k">return</code> <code class="p">{</code><code class="o">**</code><code class="n">base_config</code><code class="p">,</code> <code class="s2">"units"</code><code class="p">:</code> <code class="bp">self</code><code class="o">.</code><code class="n">units</code><code class="p">,</code>
                <code class="s2">"activation"</code><code class="p">:</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">activations</code><code class="o">.</code><code class="n">serialize</code><code class="p">(</code><code class="bp">self</code><code class="o">.</code><code class="n">activation</code><code class="p">)}</code></pre>

<p>Let’s walk through this code:</p>

<ul>
<li>
<p>The constructor takes all the hyperparameters as arguments (in this example, <code>units</code> and <code>activation</code>), and importantly it also takes a <code>**kwargs</code> argument. It calls the parent constructor, passing it the <code>kwargs</code>: this takes care of standard arguments such as <code>input_shape</code>, <code>trainable</code>, and <code>name</code>. Then it saves the hyperparameters as attributes, converting the <code>activation</code> argument to the appropriate activation function using the <code>tf.keras.activations.get()</code> function (it accepts functions, standard strings like <code>"relu"</code> or <code>"swish"</code>, or simply <code>None</code>).</p>
</li>
<li>
<p>The <code>build()</code> method’s role is to create the layer’s variables by calling the <code>add_weight()</code> method for each weight. The <code>build()</code> method is called the first time the layer is used. At that point, Keras will know the shape of this layer’s inputs, and it will pass it to the <code>build()</code> method,⁠<sup><a data-type="noteref" id="idm46324184498960-marker" href="ch12.xhtml#idm46324184498960">10</a></sup> which is often necessary to create some of the weights. For example, we need to know the number of neurons in the previous layer in order to create the connection weights matrix (i.e., the <span class="keep-together"><code>"kernel"</code></span>): this corresponds to the size of the last dimension of the inputs. At the end of the <code>build()</code> method (and only at the end), you must call the parent’s <code>build()</code> method: this tells Keras that the layer is built (it just sets <code>self.built = True</code>).</p>
</li>
<li>
<p>The <code>call()</code> method performs the desired operations. In this case, we compute the matrix multiplication of the inputs <code>X</code> and the layer’s kernel, we add the bias vector, and we apply the activation function to the result, and this gives us the output of the layer.</p>
</li>
<li>
<p>The <code>compute_output_shape()</code> method simply returns the shape of this layer’s outputs. In this case, it is the same shape as the inputs, except the last dimension is replaced with the number of neurons in the layer. Note that in Keras, shapes are instances of the <code>tf.TensorShape</code> class, which you can convert to Python lists using <code>as_list()</code>.</p>
</li>
<li>
<p>The <code>get_config()</code> method is just like in the previous custom classes. Note that we save the activation function’s full configuration by calling <code>tf.keras.activations.serialize()</code>.</p>
</li>
</ul>

<p>You can now use a <code>MyDense</code> layer just like any other layer!</p>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>You can generally omit the <code>compute_output_shape()</code> method, as Keras automatically infers the output shape, except when the layer is dynamic (as we will see shortly).</p>
</div>

<p>To create a layer with multiple inputs (e.g., <code>Concatenate</code>), the argument to the <code>call()</code> method should be a tuple containing all the inputs, and similarly the argument to the <code>compute_output_shape()</code> method should be a tuple containing each input’s batch shape. To create a layer with multiple outputs, the <code>call()</code> method should return the list of outputs, and <code>compute_output_shape()</code> should return the list of batch output shapes (one per output). For example, the following toy layer takes two inputs and returns three outputs:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">class</code> <code class="nc">MyMultiLayer</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Layer</code><code class="p">):</code>
    <code class="k">def</code> <code class="nf">call</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">X</code><code class="p">):</code>
        <code class="n">X1</code><code class="p">,</code> <code class="n">X2</code> <code class="o">=</code> <code class="n">X</code>
        <code class="k">return</code> <code class="n">X1</code> <code class="o">+</code> <code class="n">X2</code><code class="p">,</code> <code class="n">X1</code> <code class="o">*</code> <code class="n">X2</code><code class="p">,</code> <code class="n">X1</code> <code class="o">/</code> <code class="n">X2</code>

    <code class="k">def</code> <code class="nf">compute_output_shape</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">batch_input_shape</code><code class="p">):</code>
        <code class="n">batch_input_shape1</code><code class="p">,</code> <code class="n">batch_input_shape2</code> <code class="o">=</code> <code class="n">batch_input_shape</code>
        <code class="k">return</code> <code class="p">[</code><code class="n">batch_input_shape1</code><code class="p">,</code> <code class="n">batch_input_shape1</code><code class="p">,</code> <code class="n">batch_input_shape1</code><code class="p">]</code></pre>

<p>This layer may now be used like any other layer, but of course only using the Functional and Subclassing APIs, not the Sequential API (which only accepts layers with one input and one output).</p>

<p>If your layer needs to have a different behavior during training and during testing (e.g., if it uses <code>Dropout</code> or <code>BatchNormalization</code> layers), then you must add a <code>training</code> argument to the <code>call()</code> method and use this argument to decide what to do. For example, let’s create a layer that adds Gaussian noise during training (for regularization) but does nothing during testing (Keras has a layer that does the same thing, <code>tf.keras.layers.GaussianNoise</code>):</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">class</code> <code class="nc">MyGaussianNoise</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Layer</code><code class="p">):</code>
    <code class="k">def</code> <code class="fm">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">stddev</code><code class="p">,</code> <code class="o">**</code><code class="n">kwargs</code><code class="p">):</code>
        <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="fm">__init__</code><code class="p">(</code><code class="o">**</code><code class="n">kwargs</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">stddev</code> <code class="o">=</code> <code class="n">stddev</code>

    <code class="k">def</code> <code class="nf">call</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">X</code><code class="p">,</code> <code class="n">training</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>
        <code class="k">if</code> <code class="n">training</code><code class="p">:</code>
            <code class="n">noise</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">random</code><code class="o">.</code><code class="n">normal</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">shape</code><code class="p">(</code><code class="n">X</code><code class="p">),</code> <code class="n">stddev</code><code class="o">=</code><code class="bp">self</code><code class="o">.</code><code class="n">stddev</code><code class="p">)</code>
            <code class="k">return</code> <code class="n">X</code> <code class="o">+</code> <code class="n">noise</code>
        <code class="k">else</code><code class="p">:</code>
            <code class="k">return</code> <code class="n">X</code>

    <code class="k">def</code> <code class="nf">compute_output_shape</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">batch_input_shape</code><code class="p">):</code>
        <code class="k">return</code> <code class="n">batch_input_shape</code></pre>

<p>With that, you can now build any custom layer you need! Now let’s create custom models.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Custom Models"><div class="sect2" id="idm46324184745504">
<h2>Custom Models</h2>

<p>We<a data-type="indexterm" data-primary="custom models" data-secondary="models" id="idm46324184218256"/><a data-type="indexterm" data-primary="TensorFlow, custom models and training" data-secondary="models" id="idm46324184217248"/> already looked at creating custom model classes in <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a>, when we discussed the Subclassing API.⁠<sup><a data-type="noteref" id="idm46324184141952-marker" href="ch12.xhtml#idm46324184141952">11</a></sup> It’s straightforward: subclass the <code>tf.keras.Model</code> class, create layers and variables in the constructor, and implement the <code>call()</code> method to do whatever you want the model to do. For example, suppose you want to build the model represented in <a data-type="xref" href="#custom_model_diagram">Figure 12-3</a>.</p>

<figure class="smallerseventy"><div id="custom_model_diagram" class="figure">
<img src="Images/mls3_1203.png" alt="mls3 1203" width="1440" height="1017"/>
<h6><span class="label">Figure 12-3. </span>Custom model example: an arbitrary model with a custom ResidualBlock layer containing a skip connection</h6>
</div></figure>

<p>The<a data-type="indexterm" data-primary="residual blocks" id="idm46324184137344"/> inputs go through a first dense layer, then through a <em>residual block</em> composed of two dense layers and an addition operation (as we will see in Chapter 14, a residual block adds its inputs to its outputs), then through this same residual block three more times, then through a second residual block, and the final result goes through a dense output layer. Note that this model does not make much sense; it’s just an example to illustrate the fact that you can easily build any kind of model you want, even one that contains loops and skip connections. To implement this model, it is best to first create a <code>ResidualBlock</code> layer, since we are going to create a couple of identical blocks (and we might want to reuse it in another model):</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">class</code> <code class="nc">ResidualBlock</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Layer</code><code class="p">):</code>
    <code class="k">def</code> <code class="fm">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">n_layers</code><code class="p">,</code> <code class="n">n_neurons</code><code class="p">,</code> <code class="o">**</code><code class="n">kwargs</code><code class="p">):</code>
        <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="fm">__init__</code><code class="p">(</code><code class="o">**</code><code class="n">kwargs</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">hidden</code> <code class="o">=</code> <code class="p">[</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Dense</code><code class="p">(</code><code class="n">n_neurons</code><code class="p">,</code> <code class="n">activation</code><code class="o">=</code><code class="s2">"relu"</code><code class="p">,</code>
                                             <code class="n">kernel_initializer</code><code class="o">=</code><code class="s2">"he_normal"</code><code class="p">)</code>
                       <code class="k">for</code> <code class="n">_</code> <code class="ow">in</code> <code class="nb">range</code><code class="p">(</code><code class="n">n_layers</code><code class="p">)]</code>

    <code class="k">def</code> <code class="nf">call</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">inputs</code><code class="p">):</code>
        <code class="n">Z</code> <code class="o">=</code> <code class="n">inputs</code>
        <code class="k">for</code> <code class="n">layer</code> <code class="ow">in</code> <code class="bp">self</code><code class="o">.</code><code class="n">hidden</code><code class="p">:</code>
            <code class="n">Z</code> <code class="o">=</code> <code class="n">layer</code><code class="p">(</code><code class="n">Z</code><code class="p">)</code>
        <code class="k">return</code> <code class="n">inputs</code> <code class="o">+</code> <code class="n">Z</code></pre>

<p>This layer is a bit special since it contains other layers. This is handled transparently by Keras: it automatically detects that the <code>hidden</code> attribute contains trackable objects (layers in this case), so their variables are automatically added to this layer’s list of variables. The rest of this class is self-explanatory. Next, let’s use the Subclassing API to define the model itself:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">class</code> <code class="nc">ResidualRegressor</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">Model</code><code class="p">):</code>
    <code class="k">def</code> <code class="fm">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">output_dim</code><code class="p">,</code> <code class="o">**</code><code class="n">kwargs</code><code class="p">):</code>
        <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="fm">__init__</code><code class="p">(</code><code class="o">**</code><code class="n">kwargs</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">hidden1</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Dense</code><code class="p">(</code><code class="mi">30</code><code class="p">,</code> <code class="n">activation</code><code class="o">=</code><code class="s2">"relu"</code><code class="p">,</code>
                                             <code class="n">kernel_initializer</code><code class="o">=</code><code class="s2">"he_normal"</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">block1</code> <code class="o">=</code> <code class="n">ResidualBlock</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code> <code class="mi">30</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">block2</code> <code class="o">=</code> <code class="n">ResidualBlock</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code> <code class="mi">30</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">out</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Dense</code><code class="p">(</code><code class="n">output_dim</code><code class="p">)</code>

    <code class="k">def</code> <code class="nf">call</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">inputs</code><code class="p">):</code>
        <code class="n">Z</code> <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">hidden1</code><code class="p">(</code><code class="n">inputs</code><code class="p">)</code>
        <code class="k">for</code> <code class="n">_</code> <code class="ow">in</code> <code class="nb">range</code><code class="p">(</code><code class="mi">1</code> <code class="o">+</code> <code class="mi">3</code><code class="p">):</code>
            <code class="n">Z</code> <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">block1</code><code class="p">(</code><code class="n">Z</code><code class="p">)</code>
        <code class="n">Z</code> <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">block2</code><code class="p">(</code><code class="n">Z</code><code class="p">)</code>
        <code class="k">return</code> <code class="bp">self</code><code class="o">.</code><code class="n">out</code><code class="p">(</code><code class="n">Z</code><code class="p">)</code></pre>

<p>We create the layers in the constructor and use them in the <code>call()</code> method. This model can then be used like any other model (compile it, fit it, evaluate it, and use it to make predictions). If you also want to be able to save the model using the <code>save()</code> method and load it using the <code>tf.keras.models.load_model()</code> function, you must implement the <code>get_config()</code> method (as we did earlier) in both the <code>ResidualBlock</code> class and the <code>ResidualRegressor</code> class. Alternatively, you can save and load the weights using the <code>save_weights()</code> and <code>load_weights()</code> methods.</p>

<p>The <code>Model</code> class is a subclass of the <code>Layer</code> class, so models can be defined and used exactly like layers. But a model has some extra functionalities, including of course its <code>compile()</code>, <code>fit()</code>, <code>evaluate()</code>, and <code>predict()</code> methods (and a few variants), plus the <code>get_layers()</code> method (which can return any of the model’s layers by name or by index) and the <code>save()</code> method (and support for <code>tf.keras.models.load_model()</code> and <code>tf.keras.models.clone_model()</code>).</p>
<div data-type="tip"><h6>Tip</h6>
<p>If models provide more functionality than layers, why not just define every layer as a model? Well, technically you could, but it is usually cleaner to distinguish the internal components of your model (i.e., layers or reusable blocks of layers) from the model itself (i.e., the object you will train). The former should subclass the <code>Layer</code> class, while the latter should subclass the <code>Model</code> class.</p>
</div>

<p>With that, you can naturally and concisely build almost any model that you find in a paper, using the Sequential API, the Functional API, the Subclassing API, or even a mix of these. “Almost” any model? Yes, there are still a few things that we need to look at: first, how to define losses or metrics based on model internals, and second, how to build a custom training loop.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Losses and Metrics Based on Model Internals"><div class="sect2" id="idm46324184268032">
<h2>Losses and Metrics Based on Model Internals</h2>

<p>The<a data-type="indexterm" data-primary="custom models" data-secondary="losses and metrics" id="idm46324183829408"/><a data-type="indexterm" data-primary="TensorFlow, custom models and training" data-secondary="losses and metrics" id="idm46324183805568"/> custom losses and metrics we defined earlier were all based on the labels and the predictions (and optionally sample weights). There will be times when you want to define losses based on other parts of your model, such as the weights or activations of its hidden layers. This may be useful for regularization purposes or to monitor some internal aspect of your model.</p>

<p>To define a custom loss based on model internals, compute it based on any part of the model you want, then pass the result to the <code>add_loss()</code> method. For example, let’s build a custom regression MLP model composed of a stack of five hidden layers plus an output layer. This custom model will also have an auxiliary output on top of the upper hidden layer. The<a data-type="indexterm" data-primary="reconstruction loss" id="idm46324183803824"/> loss associated to this auxiliary output will be called the <em>reconstruction loss</em> (see Chapter 17): it is the mean squared difference between the reconstruction and the inputs. By adding this reconstruction loss to the main loss, we will encourage the model to preserve as much information as possible through the hidden layers—even information that is not directly useful for the regression task itself. In practice, this loss sometimes improves generalization (it is a regularization loss). It is also possible to add a custom metric using the model’s <code>add_metric()</code> method. Here is the code for this custom model with a custom reconstruction loss and a corresponding metric:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">class</code> <code class="nc">ReconstructingRegressor</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">Model</code><code class="p">):</code>
    <code class="k">def</code> <code class="fm">__init__</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">output_dim</code><code class="p">,</code> <code class="o">**</code><code class="n">kwargs</code><code class="p">):</code>
        <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="fm">__init__</code><code class="p">(</code><code class="o">**</code><code class="n">kwargs</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">hidden</code> <code class="o">=</code> <code class="p">[</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Dense</code><code class="p">(</code><code class="mi">30</code><code class="p">,</code> <code class="n">activation</code><code class="o">=</code><code class="s2">"relu"</code><code class="p">,</code>
                                             <code class="n">kernel_initializer</code><code class="o">=</code><code class="s2">"he_normal"</code><code class="p">)</code>
                       <code class="k">for</code> <code class="n">_</code> <code class="ow">in</code> <code class="nb">range</code><code class="p">(</code><code class="mi">5</code><code class="p">)]</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">out</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Dense</code><code class="p">(</code><code class="n">output_dim</code><code class="p">)</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">reconstruction_mean</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">metrics</code><code class="o">.</code><code class="n">Mean</code><code class="p">(</code>
            <code class="n">name</code><code class="o">=</code><code class="s2">"reconstruction_error"</code><code class="p">)</code>

    <code class="k">def</code> <code class="nf">build</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">batch_input_shape</code><code class="p">):</code>
        <code class="n">n_inputs</code> <code class="o">=</code> <code class="n">batch_input_shape</code><code class="p">[</code><code class="o">-</code><code class="mi">1</code><code class="p">]</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">reconstruct</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Dense</code><code class="p">(</code><code class="n">n_inputs</code><code class="p">)</code>
        <code class="nb">super</code><code class="p">()</code><code class="o">.</code><code class="n">build</code><code class="p">(</code><code class="n">batch_input_shape</code><code class="p">)</code>  <code class="c1"># or self.built = True, see below</code>

    <code class="k">def</code> <code class="nf">call</code><code class="p">(</code><code class="bp">self</code><code class="p">,</code> <code class="n">inputs</code><code class="p">,</code> <code class="n">training</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>
        <code class="n">Z</code> <code class="o">=</code> <code class="n">inputs</code>
        <code class="k">for</code> <code class="n">layer</code> <code class="ow">in</code> <code class="bp">self</code><code class="o">.</code><code class="n">hidden</code><code class="p">:</code>
            <code class="n">Z</code> <code class="o">=</code> <code class="n">layer</code><code class="p">(</code><code class="n">Z</code><code class="p">)</code>
        <code class="n">reconstruction</code> <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">reconstruct</code><code class="p">(</code><code class="n">Z</code><code class="p">)</code>
        <code class="n">recon_loss</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">reduce_mean</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">square</code><code class="p">(</code><code class="n">reconstruction</code> <code class="o">-</code> <code class="n">inputs</code><code class="p">))</code>
        <code class="bp">self</code><code class="o">.</code><code class="n">add_loss</code><code class="p">(</code><code class="mf">0.05</code> <code class="o">*</code> <code class="n">recon_loss</code><code class="p">)</code>
        <code class="k">if</code> <code class="n">training</code><code class="p">:</code>
            <code class="n">result</code> <code class="o">=</code> <code class="bp">self</code><code class="o">.</code><code class="n">reconstruction_mean</code><code class="p">(</code><code class="n">recon_loss</code><code class="p">)</code>
            <code class="bp">self</code><code class="o">.</code><code class="n">add_metric</code><code class="p">(</code><code class="n">result</code><code class="p">)</code>
        <code class="k">return</code> <code class="bp">self</code><code class="o">.</code><code class="n">out</code><code class="p">(</code><code class="n">Z</code><code class="p">)</code></pre>

<p>Let’s go through this code:</p>

<ul>
<li>
<p>The constructor creates the DNN with five dense hidden layers and one dense output layer. We also create a <code>Mean</code> streaming metric to keep track of the reconstruction error during training.</p>
</li>
<li>
<p>The <code>build()</code> method creates an extra dense layer which will be used to reconstruct the inputs of the model. It must be created here because its number of units must be equal to the number of inputs, and this number is unknown before the <code>build()</code> method is called.⁠<sup><a data-type="noteref" id="idm46324183550144-marker" href="ch12.xhtml#idm46324183550144">12</a></sup></p>
</li>
<li>
<p>The <code>call()</code> method processes the inputs through all five hidden layers, then passes the result through the reconstruction layer, which produces the reconstruction.</p>
</li>
<li>
<p>Then the <code>call()</code> method computes the reconstruction loss (the mean squared difference between the reconstruction and the inputs), and adds it to the model’s list of losses using the <code>add_loss()</code> method.⁠<sup><a data-type="noteref" id="idm46324183545600-marker" href="ch12.xhtml#idm46324183545600">13</a></sup> Notice that we scale down the reconstruction loss by multiplying it by 0.05 (this is a hyperparameter you can tune). This ensures that the reconstruction loss does not dominate the main loss.</p>
</li>
<li>
<p>Next, during training only, the <code>call()</code> method updates the reconstruction metric, and adds it to the model so it can be displayed.</p>
</li>
<li>
<p>Finally, the <code>call()</code> method passes the output of the hidden layers to the output layer and returns its output.</p>
</li>
</ul>

<p>Both the total loss and the reconstruction loss will go down during training:</p>

<pre data-type="programlisting">Epoch 1/5
363/363 [========] - 1s 820us/step - loss: 0.7640 - reconstruction_error: 1.2728
Epoch 2/5
363/363 [========] - 0s 809us/step - loss: 0.4584 - reconstruction_error: 0.6340
[...]</pre>

<p>In most cases, everything we have discussed so far will be sufficient to implement whatever model you want to build, even with complex architectures, losses, and metrics. However, for some architectures such as GANs (see Chapter 17), you will have to customize the training loop itself. Before we get there, we must look at how to compute gradients automatically in TensorFlow.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Computing Gradients Using Autodiff"><div class="sect2" id="idm46324183539632">
<h2>Computing Gradients Using Autodiff</h2>

<p>To<a data-type="indexterm" data-primary="custom models" data-secondary="computing gradients using Autodiff" id="idm46324183537616"/><a data-type="indexterm" data-primary="TensorFlow, custom models and training" data-secondary="computing gradients using Autodiff" id="idm46324183506896"/><a data-type="indexterm" data-primary="automatic differentiation (autodiff)" id="idm46324183506048"/> understand how to use autodiff (see <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a> and Appendix B) to compute gradients automatically, let’s consider a simple toy function:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">def</code> <code class="nf">f</code><code class="p">(</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code><code class="p">):</code>
    <code class="k">return</code> <code class="mi">3</code> <code class="o">*</code> <code class="n">w1</code> <code class="o">**</code> <code class="mi">2</code> <code class="o">+</code> <code class="mi">2</code> <code class="o">*</code> <code class="n">w1</code> <code class="o">*</code> <code class="n">w2</code></pre>

<p>If you know calculus, you can analytically find that the partial derivative of this function with regard to <code>w1</code> is <code>6 * w1</code> <code>+</code> <code>2 * w2</code>. You can also find that its partial derivative with regard to <code>w2</code> is <code>2 * w1</code>. For example, at the point <code>(w1, w2)</code> <code>=</code> <code>(5, 3)</code>, these partial derivatives are equal to 36 and 10, respectively, so the gradient vector at this point is (36, 10). But if this were a neural network, the function would be much more complex, typically with tens of thousands of parameters, and finding the partial derivatives analytically by hand would be a virtually impossible task. One solution could be to compute an approximation of each partial derivative by measuring how much the function’s output changes when you tweak the corresponding parameter by a tiny amount:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code> <code class="o">=</code> <code class="mi">5</code><code class="p">,</code> <code class="mi">3</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">eps</code> <code class="o">=</code> <code class="mf">1e-6</code>
<code class="gp">&gt;&gt;&gt; </code><code class="p">(</code><code class="n">f</code><code class="p">(</code><code class="n">w1</code> <code class="o">+</code> <code class="n">eps</code><code class="p">,</code> <code class="n">w2</code><code class="p">)</code> <code class="o">-</code> <code class="n">f</code><code class="p">(</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code><code class="p">))</code> <code class="o">/</code> <code class="n">eps</code>
<code class="go">36.000003007075065</code>
<code class="gp">&gt;&gt;&gt; </code><code class="p">(</code><code class="n">f</code><code class="p">(</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code> <code class="o">+</code> <code class="n">eps</code><code class="p">)</code> <code class="o">-</code> <code class="n">f</code><code class="p">(</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code><code class="p">))</code> <code class="o">/</code> <code class="n">eps</code>
<code class="go">10.000000003174137</code></pre>

<p>Looks about right! This works rather well and is easy to implement, but it is just an approximation, and importantly you need to call <code>f()</code> at least once per parameter (not twice, since we could compute <code>f(w1, w2)</code> just once). Having to call <code>f()</code> at least once per parameter makes this approach intractable for large neural networks. So instead, we should use reverse-mode autodiff. TensorFlow makes this pretty simple:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">Variable</code><code class="p">(</code><code class="mf">5.</code><code class="p">),</code> <code class="n">tf</code><code class="o">.</code><code class="n">Variable</code><code class="p">(</code><code class="mf">3.</code><code class="p">)</code>
<code class="k">with</code> <code class="n">tf</code><code class="o">.</code><code class="n">GradientTape</code><code class="p">()</code> <code class="k">as</code> <code class="n">tape</code><code class="p">:</code>
    <code class="n">z</code> <code class="o">=</code> <code class="n">f</code><code class="p">(</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code><code class="p">)</code>

<code class="n">gradients</code> <code class="o">=</code> <code class="n">tape</code><code class="o">.</code><code class="n">gradient</code><code class="p">(</code><code class="n">z</code><code class="p">,</code> <code class="p">[</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code><code class="p">])</code></pre>

<p>We first define two variables <code>w1</code> and <code>w2</code>, then we create a <code>tf.GradientTape</code> context that will automatically record every operation that involves a variable, and finally we ask this tape to compute the gradients of the result <code>z</code> with regard to both variables <code>[w1, w2]</code>. Let’s take a look at the gradients that TensorFlow computed:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">gradients</code>
<code class="go">[&lt;tf.Tensor: shape=(), dtype=float32, numpy=36.0&gt;,</code>
<code class="go"> &lt;tf.Tensor: shape=(), dtype=float32, numpy=10.0&gt;]</code></pre>

<p>Perfect! Not only is the result accurate (the precision is only limited by the floating-point errors), but the <code>gradient()</code> method only goes through the recorded computations once (in reverse order), no matter how many variables there are, so it is incredibly efficient. It’s like magic!</p>
<div data-type="tip"><h6>Tip</h6>
<p>To save memory, only put the strict minimum inside the <code>tf.GradientTape()</code> block. Alternatively, pause recording by creating a <code>with tape.stop_recording()</code> block inside the <code>tf.GradientTape()</code> block.</p>
</div>

<p>The tape is automatically erased immediately after you call its <code>gradient()</code> method, so you will get an exception if you try to call <code>gradient()</code> twice:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">with</code> <code class="n">tf</code><code class="o">.</code><code class="n">GradientTape</code><code class="p">()</code> <code class="k">as</code> <code class="n">tape</code><code class="p">:</code>
    <code class="n">z</code> <code class="o">=</code> <code class="n">f</code><code class="p">(</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code><code class="p">)</code>

<code class="n">dz_dw1</code> <code class="o">=</code> <code class="n">tape</code><code class="o">.</code><code class="n">gradient</code><code class="p">(</code><code class="n">z</code><code class="p">,</code> <code class="n">w1</code><code class="p">)</code>  <code class="c1"># returns tensor 36.0</code>
<code class="n">dz_dw2</code> <code class="o">=</code> <code class="n">tape</code><code class="o">.</code><code class="n">gradient</code><code class="p">(</code><code class="n">z</code><code class="p">,</code> <code class="n">w2</code><code class="p">)</code>  <code class="c1"># raises a RuntimeError!</code></pre>

<p>If you need to call <code>gradient()</code> more than once, you must make the tape persistent and delete it each time you are done with it to free resources:⁠<sup><a data-type="noteref" id="idm46324183194160-marker" href="ch12.xhtml#idm46324183194160">14</a></sup></p>

<pre data-type="programlisting" data-code-language="python"><code class="k">with</code> <code class="n">tf</code><code class="o">.</code><code class="n">GradientTape</code><code class="p">(</code><code class="n">persistent</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code> <code class="k">as</code> <code class="n">tape</code><code class="p">:</code>
    <code class="n">z</code> <code class="o">=</code> <code class="n">f</code><code class="p">(</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code><code class="p">)</code>

<code class="n">dz_dw1</code> <code class="o">=</code> <code class="n">tape</code><code class="o">.</code><code class="n">gradient</code><code class="p">(</code><code class="n">z</code><code class="p">,</code> <code class="n">w1</code><code class="p">)</code>  <code class="c1"># returns tensor 36.0</code>
<code class="n">dz_dw2</code> <code class="o">=</code> <code class="n">tape</code><code class="o">.</code><code class="n">gradient</code><code class="p">(</code><code class="n">z</code><code class="p">,</code> <code class="n">w2</code><code class="p">)</code>  <code class="c1"># returns tensor 10.0, works fine now!</code>
<code class="k">del</code> <code class="n">tape</code></pre>

<p>By default, the tape will only track operations involving variables, so if you try to compute the gradient of <code>z</code> with regard to anything other than a variable, the result will be <code>None</code>:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">c1</code><code class="p">,</code> <code class="n">c2</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mf">5.</code><code class="p">),</code> <code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mf">3.</code><code class="p">)</code>
<code class="k">with</code> <code class="n">tf</code><code class="o">.</code><code class="n">GradientTape</code><code class="p">()</code> <code class="k">as</code> <code class="n">tape</code><code class="p">:</code>
    <code class="n">z</code> <code class="o">=</code> <code class="n">f</code><code class="p">(</code><code class="n">c1</code><code class="p">,</code> <code class="n">c2</code><code class="p">)</code>

<code class="n">gradients</code> <code class="o">=</code> <code class="n">tape</code><code class="o">.</code><code class="n">gradient</code><code class="p">(</code><code class="n">z</code><code class="p">,</code> <code class="p">[</code><code class="n">c1</code><code class="p">,</code> <code class="n">c2</code><code class="p">])</code>  <code class="c1"># returns [None, None]</code></pre>

<p>However, you can force the tape to watch any tensors you like, to record every operation that involves them. You can then compute gradients with regard to these tensors, as if they were variables:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">with</code> <code class="n">tf</code><code class="o">.</code><code class="n">GradientTape</code><code class="p">()</code> <code class="k">as</code> <code class="n">tape</code><code class="p">:</code>
    <code class="n">tape</code><code class="o">.</code><code class="n">watch</code><code class="p">(</code><code class="n">c1</code><code class="p">)</code>
    <code class="n">tape</code><code class="o">.</code><code class="n">watch</code><code class="p">(</code><code class="n">c2</code><code class="p">)</code>
    <code class="n">z</code> <code class="o">=</code> <code class="n">f</code><code class="p">(</code><code class="n">c1</code><code class="p">,</code> <code class="n">c2</code><code class="p">)</code>

<code class="n">gradients</code> <code class="o">=</code> <code class="n">tape</code><code class="o">.</code><code class="n">gradient</code><code class="p">(</code><code class="n">z</code><code class="p">,</code> <code class="p">[</code><code class="n">c1</code><code class="p">,</code> <code class="n">c2</code><code class="p">])</code>  <code class="c1"># returns [tensor 36., tensor 10.]</code></pre>

<p>This can be useful in some cases, like if you want to implement a regularization loss that penalizes activations that vary a lot when the inputs vary little: the loss will be based on the gradient of the activations with regard to the inputs. Since the inputs are not variables, you would need to tell the tape to watch them.</p>

<p>Most of the time a gradient tape is used to compute the gradients of a single value (usually the loss) with regard to a set of values (usually the model parameters). This is where reverse-mode autodiff shines, as it just needs to do one forward pass and one reverse pass to get all the gradients at once. If you try to compute the gradients of a vector, for example a vector containing multiple losses, then TensorFlow will compute the gradients of the vector’s sum. So if you ever need to get the individual gradients (e.g., the gradients of each loss with regard to the model parameters), you must call the tape’s <code>jacobian()</code> method: it will perform reverse-mode autodiff once for each loss in the vector (all in parallel by default). It is even possible to compute second-order partial derivatives (the Hessians, i.e., the partial derivatives of the partial derivatives), but this is rarely needed in practice (see the “Computing Gradients Using Autodiff” section of the notebook for an example).</p>

<p>In some cases you may want to stop gradients from backpropagating through some part of your neural network. To do this, you must use the <code>tf.stop_gradient()</code> function. The function returns its inputs during the forward pass (like <code>tf.identity()</code>), but it does not let gradients through during backpropagation (it acts like a constant):</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">def</code> <code class="nf">f</code><code class="p">(</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code><code class="p">):</code>
    <code class="k">return</code> <code class="mi">3</code> <code class="o">*</code> <code class="n">w1</code> <code class="o">**</code> <code class="mi">2</code> <code class="o">+</code> <code class="n">tf</code><code class="o">.</code><code class="n">stop_gradient</code><code class="p">(</code><code class="mi">2</code> <code class="o">*</code> <code class="n">w1</code> <code class="o">*</code> <code class="n">w2</code><code class="p">)</code>

<code class="k">with</code> <code class="n">tf</code><code class="o">.</code><code class="n">GradientTape</code><code class="p">()</code> <code class="k">as</code> <code class="n">tape</code><code class="p">:</code>
    <code class="n">z</code> <code class="o">=</code> <code class="n">f</code><code class="p">(</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code><code class="p">)</code>  <code class="c1"># the forward pass is not affected by stop_gradient()</code>

<code class="n">gradients</code> <code class="o">=</code> <code class="n">tape</code><code class="o">.</code><code class="n">gradient</code><code class="p">(</code><code class="n">z</code><code class="p">,</code> <code class="p">[</code><code class="n">w1</code><code class="p">,</code> <code class="n">w2</code><code class="p">])</code>  <code class="c1"># returns [tensor 30., None]</code></pre>

<p>Finally, you may occasionally run into some numerical issues when computing gradients. For example, if you compute the gradients of the square root function at <em>x</em> = 10<sup>–50</sup>, the result will be infinite. In reality, the slope at that point is not infinite, but it’s more than 32-bit floats can handle:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">x</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">Variable</code><code class="p">(</code><code class="mf">1e-50</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="k">with</code> <code class="n">tf</code><code class="o">.</code><code class="n">GradientTape</code><code class="p">()</code> <code class="k">as</code> <code class="n">tape</code><code class="p">:</code>
<code class="gp">... </code>    <code class="n">z</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">sqrt</code><code class="p">(</code><code class="n">x</code><code class="p">)</code>
<code class="gp">...</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tape</code><code class="o">.</code><code class="n">gradient</code><code class="p">(</code><code class="n">z</code><code class="p">,</code> <code class="p">[</code><code class="n">x</code><code class="p">])</code>
<code class="go">[&lt;tf.Tensor: shape=(), dtype=float32, numpy=inf&gt;]</code></pre>

<p>To solve this, it’s often a good idea to add a tiny value to <em>x</em> (such as 10<sup>–6</sup>) when computing its square root.</p>

<p>The exponential function is also a frequent source of headaches, as it grows extremely fast. For example, the way <code>my_softplus()</code> was defined earlier is not numerically stable. If you compute <code>my_softplus(100.0)</code>, you will get infinity rather than the correct result (about 100). But it’s possible to rewrite the function to make it numerically stable: the softplus function is defined as log(1 + exp(<em>z</em>)), which is also equal to log(1 + exp(–|<em>z</em>|)) + max(<em>z</em>, 0) (see the notebook for the mathematical proof) and the advantage of this second form is that the exponential term cannot explode. So here’s a better implementation of the <code>my_softplus()</code> function:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">def</code> <code class="nf">my_softplus</code><code class="p">(</code><code class="n">z</code><code class="p">):</code>
    <code class="k">return</code> <code class="n">tf</code><code class="o">.</code><code class="n">math</code><code class="o">.</code><code class="n">log</code><code class="p">(</code><code class="mi">1</code> <code class="o">+</code> <code class="n">tf</code><code class="o">.</code><code class="n">exp</code><code class="p">(</code><code class="o">-</code><code class="n">tf</code><code class="o">.</code><code class="n">abs</code><code class="p">(</code><code class="n">z</code><code class="p">)))</code> <code class="o">+</code> <code class="n">tf</code><code class="o">.</code><code class="n">maximum</code><code class="p">(</code><code class="mf">0.</code><code class="p">,</code> <code class="n">z</code><code class="p">)</code></pre>

<p>In some rare cases, a numerically stable function may still have numerically unstable gradients. In such cases, you will have to tell TensorFlow which equation to use for the gradients, rather than letting it use autodiff. For this, you must use the <code>@tf.custom_gradient</code> decorator when defining the function, and return both the function’s usual result plus a function that computes the gradients. For example, let’s update the <code>my_softplus()</code> function to also return a numerically stable gradients function:</p>

<pre data-type="programlisting" data-code-language="python"><code class="nd">@tf.custom_gradient</code>
<code class="k">def</code> <code class="nf">my_softplus</code><code class="p">(</code><code class="n">z</code><code class="p">):</code>
    <code class="k">def</code> <code class="nf">my_softplus_gradients</code><code class="p">(</code><code class="n">grads</code><code class="p">):</code>  <code class="c1"># grads = backprop'ed from upper layers</code>
        <code class="k">return</code> <code class="n">grads</code> <code class="o">*</code> <code class="p">(</code><code class="mi">1</code> <code class="o">-</code> <code class="mi">1</code> <code class="o">/</code> <code class="p">(</code><code class="mi">1</code> <code class="o">+</code> <code class="n">tf</code><code class="o">.</code><code class="n">exp</code><code class="p">(</code><code class="n">z</code><code class="p">)))</code>  <code class="c1"># stable grads of softplus</code>

    <code class="n">result</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">math</code><code class="o">.</code><code class="n">log</code><code class="p">(</code><code class="mi">1</code> <code class="o">+</code> <code class="n">tf</code><code class="o">.</code><code class="n">exp</code><code class="p">(</code><code class="o">-</code><code class="n">tf</code><code class="o">.</code><code class="n">abs</code><code class="p">(</code><code class="n">z</code><code class="p">)))</code> <code class="o">+</code> <code class="n">tf</code><code class="o">.</code><code class="n">maximum</code><code class="p">(</code><code class="mf">0.</code><code class="p">,</code> <code class="n">z</code><code class="p">)</code>
    <code class="k">return</code> <code class="n">result</code><code class="p">,</code> <code class="n">my_softplus_gradients</code></pre>

<p>If you know differential calculus (see the tutorial notebook on this topic), you can find that the derivative of log(1 + exp(<em>z</em>)) is exp(<em>z</em>) / (1 + exp(<em>z</em>)). But this form is not stable: for large values of <em>z</em>, it ends up computing infinity divided by infinity, which return NaN. However, with a bit of algebraic manipulation, you can show that it’s also equal to 1 - 1 / (1 + exp(<em>z</em>)), which <em>is</em> stable. The <code>my_softplus_gradients()</code> function uses this equation to compute the gradients. Note that this function will receive as input the gradients that were backpropagated so far, down to the <code>my_softplus()</code> function; and according to the chain rule, we must multiply them with this function’s gradients.</p>

<p>Now when we compute the gradients of the <code>my_softplus()</code> function, we get the proper result, even for large input values.</p>

<p>Congratulations! You can now compute the gradients of any function (provided it is differentiable at the point where you compute it), even blocking backpropagation when needed, and write your own gradient functions! This is probably more flexibility than you will ever need, even if you build your own custom training loops, as we will see now.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="Custom Training Loops"><div class="sect2" id="idm46324183538688">
<h2>Custom Training Loops</h2>

<p>In<a data-type="indexterm" data-primary="custom models" data-secondary="training loops" id="idm46324182616000"/><a data-type="indexterm" data-primary="TensorFlow, custom models and training" data-secondary="training loops" id="idm46324182615088"/> some cases, the <code>fit()</code> method may not be flexible enough for what you need to do. For example, the <a href="https://homl.info/widedeep">Wide &amp; Deep paper</a> we discussed in <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a> uses two different optimizers: one for the wide path and the other for the deep path. Since the <code>fit()</code> method only uses one optimizer (the one that we specify when compiling the model), implementing this paper requires writing your own custom loop.</p>

<p>You may also like to write custom training loops simply to feel more confident that they do precisely what you intend them to do (perhaps you are unsure about some details of the <code>fit()</code> method). It can sometimes feel safer to make everything explicit. However, remember that writing a custom training loop will make your code longer, more error-prone, and harder to maintain.</p>
<div data-type="tip"><h6>Tip</h6>
<p>Unless you’re learning or you really need the extra flexibility, you should prefer using the <code>fit()</code> method rather than implementing your own training loop, especially if you work in a team.</p>
</div>

<p>First, let’s build a simple model. No need to compile it, since we will handle the training loop manually:</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">l2_reg</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">regularizers</code><code class="o">.</code><code class="n">l2</code><code class="p">(</code><code class="mf">0.05</code><code class="p">)</code>
<code class="n">model</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">models</code><code class="o">.</code><code class="n">Sequential</code><code class="p">([</code>
    <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Dense</code><code class="p">(</code><code class="mi">30</code><code class="p">,</code> <code class="n">activation</code><code class="o">=</code><code class="s2">"relu"</code><code class="p">,</code> <code class="n">kernel_initializer</code><code class="o">=</code><code class="s2">"he_normal"</code><code class="p">,</code>
                          <code class="n">kernel_regularizer</code><code class="o">=</code><code class="n">l2_reg</code><code class="p">),</code>
    <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">layers</code><code class="o">.</code><code class="n">Dense</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="n">kernel_regularizer</code><code class="o">=</code><code class="n">l2_reg</code><code class="p">)</code>
<code class="p">])</code></pre>

<p>Next, let’s create a tiny function that will randomly sample a batch of instances from the training set (in Chapter 13 we will discuss the Data API, which offers a much better alternative):</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">def</code> <code class="nf">random_batch</code><code class="p">(</code><code class="n">X</code><code class="p">,</code> <code class="n">y</code><code class="p">,</code> <code class="n">batch_size</code><code class="o">=</code><code class="mi">32</code><code class="p">):</code>
    <code class="n">idx</code> <code class="o">=</code> <code class="n">np</code><code class="o">.</code><code class="n">random</code><code class="o">.</code><code class="n">randint</code><code class="p">(</code><code class="nb">len</code><code class="p">(</code><code class="n">X</code><code class="p">),</code> <code class="n">size</code><code class="o">=</code><code class="n">batch_size</code><code class="p">)</code>
    <code class="k">return</code> <code class="n">X</code><code class="p">[</code><code class="n">idx</code><code class="p">],</code> <code class="n">y</code><code class="p">[</code><code class="n">idx</code><code class="p">]</code></pre>

<p>Let’s also define a function that will display the training status, including the number of steps, the total number of steps, the mean loss since the start of the epoch (i.e., we will use the <code>Mean</code> metric to compute it), and other metrics:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">def</code> <code class="nf">print_status_bar</code><code class="p">(</code><code class="n">step</code><code class="p">,</code> <code class="n">total</code><code class="p">,</code> <code class="n">loss</code><code class="p">,</code> <code class="n">metrics</code><code class="o">=</code><code class="bp">None</code><code class="p">):</code>
    <code class="n">metrics</code> <code class="o">=</code> <code class="s2">" - "</code><code class="o">.</code><code class="n">join</code><code class="p">([</code><code class="n">f</code><code class="s2">"{m.name}: {m.result():.4f}"</code>
                          <code class="k">for</code> <code class="n">m</code> <code class="ow">in</code> <code class="p">[</code><code class="n">loss</code><code class="p">]</code> <code class="o">+</code> <code class="p">(</code><code class="n">metrics</code> <code class="ow">or</code> <code class="p">[])])</code>
    <code class="n">end</code> <code class="o">=</code> <code class="s2">""</code> <code class="k">if</code> <code class="n">step</code> <code class="o">&lt;</code> <code class="n">total</code> <code class="k">else</code> <code class="s2">"</code><code class="se">\n</code><code class="s2">"</code>
    <code class="k">print</code><code class="p">(</code><code class="n">f</code><code class="s2">"</code><code class="se">\r</code><code class="s2">{step}/{total} - "</code> <code class="o">+</code> <code class="n">metrics</code><code class="p">,</code> <code class="n">end</code><code class="o">=</code><code class="n">end</code><code class="p">)</code></pre>

<p>This code is self-explanatory, unless you are unfamiliar with Python string formatting: <code>{m.result():.4f}</code> will format the metric’s result as a float with four digits after the decimal point; moreover, using <code>\r</code> (carriage return) along with <code>end=""</code> ensures that the status bar always gets printed on the same line.</p>

<p>With that, let’s get down to business! First, we need to define some hyperparameters and choose the optimizer, the loss function, and the metrics (just the MAE in this example):</p>

<pre data-type="programlisting" data-code-language="python"><code class="n">n_epochs</code> <code class="o">=</code> <code class="mi">5</code>
<code class="n">batch_size</code> <code class="o">=</code> <code class="mi">32</code>
<code class="n">n_steps</code> <code class="o">=</code> <code class="nb">len</code><code class="p">(</code><code class="n">X_train</code><code class="p">)</code> <code class="o">//</code> <code class="n">batch_size</code>
<code class="n">optimizer</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">optimizers</code><code class="o">.</code><code class="n">SGD</code><code class="p">(</code><code class="n">learning_rate</code><code class="o">=</code><code class="mf">0.01</code><code class="p">)</code>
<code class="n">loss_fn</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">losses</code><code class="o">.</code><code class="n">mean_squared_error</code>
<code class="n">mean_loss</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">metrics</code><code class="o">.</code><code class="n">Mean</code><code class="p">()</code>
<code class="n">metrics</code> <code class="o">=</code> <code class="p">[</code><code class="n">tf</code><code class="o">.</code><code class="n">keras</code><code class="o">.</code><code class="n">metrics</code><code class="o">.</code><code class="n">MeanAbsoluteError</code><code class="p">()]</code></pre>

<p>And now we are ready to build the custom loop!</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">for</code> <code class="n">epoch</code> <code class="ow">in</code> <code class="nb">range</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="n">n_epochs</code> <code class="o">+</code> <code class="mi">1</code><code class="p">):</code>
    <code class="k">print</code><code class="p">(</code><code class="s2">"Epoch {}/{}"</code><code class="o">.</code><code class="n">format</code><code class="p">(</code><code class="n">epoch</code><code class="p">,</code> <code class="n">n_epochs</code><code class="p">))</code>
    <code class="k">for</code> <code class="n">step</code> <code class="ow">in</code> <code class="nb">range</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="n">n_steps</code> <code class="o">+</code> <code class="mi">1</code><code class="p">):</code>
        <code class="n">X_batch</code><code class="p">,</code> <code class="n">y_batch</code> <code class="o">=</code> <code class="n">random_batch</code><code class="p">(</code><code class="n">X_train_scaled</code><code class="p">,</code> <code class="n">y_train</code><code class="p">)</code>
        <code class="k">with</code> <code class="n">tf</code><code class="o">.</code><code class="n">GradientTape</code><code class="p">()</code> <code class="k">as</code> <code class="n">tape</code><code class="p">:</code>
            <code class="n">y_pred</code> <code class="o">=</code> <code class="n">model</code><code class="p">(</code><code class="n">X_batch</code><code class="p">,</code> <code class="n">training</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>
            <code class="n">main_loss</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">reduce_mean</code><code class="p">(</code><code class="n">loss_fn</code><code class="p">(</code><code class="n">y_batch</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">))</code>
            <code class="n">loss</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">add_n</code><code class="p">([</code><code class="n">main_loss</code><code class="p">]</code> <code class="o">+</code> <code class="n">model</code><code class="o">.</code><code class="n">losses</code><code class="p">)</code>

        <code class="n">gradients</code> <code class="o">=</code> <code class="n">tape</code><code class="o">.</code><code class="n">gradient</code><code class="p">(</code><code class="n">loss</code><code class="p">,</code> <code class="n">model</code><code class="o">.</code><code class="n">trainable_variables</code><code class="p">)</code>
        <code class="n">optimizer</code><code class="o">.</code><code class="n">apply_gradients</code><code class="p">(</code><code class="nb">zip</code><code class="p">(</code><code class="n">gradients</code><code class="p">,</code> <code class="n">model</code><code class="o">.</code><code class="n">trainable_variables</code><code class="p">))</code>
        <code class="n">mean_loss</code><code class="p">(</code><code class="n">loss</code><code class="p">)</code>
        <code class="k">for</code> <code class="n">metric</code> <code class="ow">in</code> <code class="n">metrics</code><code class="p">:</code>
            <code class="n">metric</code><code class="p">(</code><code class="n">y_batch</code><code class="p">,</code> <code class="n">y_pred</code><code class="p">)</code>

        <code class="n">print_status_bar</code><code class="p">(</code><code class="n">step</code><code class="p">,</code> <code class="n">n_steps</code><code class="p">,</code> <code class="n">mean_loss</code><code class="p">,</code> <code class="n">metrics</code><code class="p">)</code>

    <code class="k">for</code> <code class="n">metric</code> <code class="ow">in</code> <code class="p">[</code><code class="n">mean_loss</code><code class="p">]</code> <code class="o">+</code> <code class="n">metrics</code><code class="p">:</code>
        <code class="n">metric</code><code class="o">.</code><code class="n">reset_states</code><code class="p">()</code></pre>

<p>There’s a lot going on in this code, so let’s walk through it:</p>

<ul>
<li>
<p>We create two nested loops: one for the epochs, the other for the batches within an epoch.</p>
</li>
<li>
<p>Then we sample a random batch from the training set.</p>
</li>
<li>
<p>Inside the <code>tf.GradientTape()</code> block, we make a prediction for one batch, using the model as a function, and we compute the loss: it is equal to the main loss plus the other losses (in this model, there is one regularization loss per layer). Since the <code>mean_squared_error()</code> function returns one loss per instance, we compute the mean over the batch using <code>tf.reduce_mean()</code> (if you wanted to apply different weights to each instance, this is where you would do it). The regularization losses are already reduced to a single scalar each, so we just need to sum them (using <code>tf.add_n()</code>, which sums multiple tensors of the same shape and data type).</p>
</li>
<li>
<p>Next, we ask the tape to compute the gradients of the loss with regard to each trainable variable—<em>not</em> all variables!—and we apply them to the optimizer to perform a Gradient Descent step.</p>
</li>
<li>
<p>Then we update the mean loss and the metrics (over the current epoch), and we display the status bar.</p>
</li>
<li>
<p>At the end of each epoch, we reset the states of the mean loss and the metrics.</p>
</li>
</ul>

<p>If you want to apply Gradient Clipping (see <a data-type="xref" href="ch11.xhtml#deep_chapter">Chapter 11</a>), just set the optimizer’s <code>clipnorm</code> or <code>clipvalue</code> hyperparameter. If you want to apply any other transformation to the gradients, simply do so before calling the <code>apply_gradients()</code> method. And if you want to add weight constraints to your model (e.g., by setting <code>kernel_constraint</code> or <code>bias_constraint</code> when creating a layer), you should update the training loop to apply these constraints just after <code>apply_gradients()</code>, like so:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">for</code> <code class="n">variable</code> <code class="ow">in</code> <code class="n">model</code><code class="o">.</code><code class="n">variables</code><code class="p">:</code>
    <code class="k">if</code> <code class="n">variable</code><code class="o">.</code><code class="n">constraint</code> <code class="ow">is</code> <code class="ow">not</code> <code class="bp">None</code><code class="p">:</code>
        <code class="n">variable</code><code class="o">.</code><code class="n">assign</code><code class="p">(</code><code class="n">variable</code><code class="o">.</code><code class="n">constraint</code><code class="p">(</code><code class="n">variable</code><code class="p">))</code></pre>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>Don’t forget to set <code>training=True</code> when calling the model in the training loop, especially if your model behaves differently during training and testing (e.g., if it uses <code>BatchNormalization</code> or <code>Dropout</code>). If it’s a custom model, make sure to propagate the <code>training</code> argument to the layers that your model calls.</p>
</div>

<p>As you can see, there are quite a lot of things you need to get right, and it’s easy to make a mistake. But on the bright side, you get full control, so it’s your call.</p>

<p>Now that you know how to customize any part of your models⁠<sup><a data-type="noteref" id="idm46324182031088-marker" href="ch12.xhtml#idm46324182031088">15</a></sup> and training algorithms, let’s see how you can use TensorFlow’s automatic graph generation feature: it can speed up your custom code considerably, and it will also make it portable to any platform supported by TensorFlow (see Chapter 19).<a data-type="indexterm" data-primary="" data-startref="Mtensor12" id="idm46324182018080"/></p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="TensorFlow Functions and Graphs"><div class="sect1" id="idm46324186146864">
<h1>TensorFlow Functions and Graphs</h1>

<p>Back in<a data-type="indexterm" data-primary="TensorFlow, functions and graphs" data-secondary="overview of" id="idm46324182015408"/> TensorFlow 1, graphs were unavoidable (as were the complexities that came with them) because they were a central part of TensorFlow’s API. Since TensorFlow 2 (released in 2019), graphs are still there, but not as central, and they’re much (much!) simpler to use. To show just how simple, let’s start with a trivial function that computes the cube of its input:</p>

<pre data-type="programlisting" data-code-language="python"><code class="k">def</code> <code class="nf">cube</code><code class="p">(</code><code class="n">x</code><code class="p">):</code>
    <code class="k">return</code> <code class="n">x</code> <code class="o">**</code> <code class="mi">3</code></pre>

<p>We can obviously call this function with a Python value, such as an int or a float, or we can call it with a tensor:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">cube</code><code class="p">(</code><code class="mi">2</code><code class="p">)</code>
<code class="go">8</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">cube</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mf">2.0</code><code class="p">))</code>
<code class="go">&lt;tf.Tensor: shape=(), dtype=float32, numpy=8.0&gt;</code></pre>

<p>Now, let’s use <code>tf.function()</code> to convert this Python function to a <em>TensorFlow</em> <span class="keep-together"><em>Function</em></span>:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">tf_cube</code> <code class="o">=</code> <code class="n">tf</code><code class="o">.</code><code class="n">function</code><code class="p">(</code><code class="n">cube</code><code class="p">)</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tf_cube</code>
<code class="go">&lt;tensorflow.python.eager.def_function.Function at 0x7fbfe0c54d50&gt;</code></pre>

<p>This TF Function can then be used exactly like the original Python function, and it will return the same result (but always as tensors):</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">tf_cube</code><code class="p">(</code><code class="mi">2</code><code class="p">)</code>
<code class="go">&lt;tf.Tensor: shape=(), dtype=int32, numpy=8&gt;</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">tf_cube</code><code class="p">(</code><code class="n">tf</code><code class="o">.</code><code class="n">constant</code><code class="p">(</code><code class="mf">2.0</code><code class="p">))</code>
<code class="go">&lt;tf.Tensor: shape=(), dtype=float32, numpy=8.0&gt;</code></pre>

<p>Under the hood, <code>tf.function()</code> analyzed the computations performed by the <code>cube()</code> function and generated an equivalent computation graph! As you can see, it was rather painless (we will see how this works shortly). Alternatively, we could have used <code>tf.function</code> as a decorator; this is actually more common:</p>

<pre data-type="programlisting" data-code-language="python"><code class="nd">@tf.function</code>
<code class="k">def</code> <code class="nf">tf_cube</code><code class="p">(</code><code class="n">x</code><code class="p">):</code>
    <code class="k">return</code> <code class="n">x</code> <code class="o">**</code> <code class="mi">3</code></pre>

<p>The original Python function is still available via the TF Function’s <code>python_function</code> attribute, in case you ever need it:</p>

<pre data-type="programlisting" data-code-language="pycon"><code class="gp">&gt;&gt;&gt; </code><code class="n">tf_cube</code><code class="o">.</code><code class="n">python_function</code><code class="p">(</code><code class="mi">2</code><code class="p">)</code>
<code class="go">8</code></pre>

<p>TensorFlow optimizes the computation graph, pruning unused nodes, simplifying expressions (e.g., 1 + 2 would get replaced with 3), and more. Once the optimized graph is ready, the TF Function efficiently executes the operations in the graph, in the appropriate order (and in parallel when it can). As a result, a TF Function will usually run much faster than the original Python function, especially if it performs complex computations.⁠<sup><a data-type="noteref" id="idm46324181812928-marker" href="ch12.xhtml#idm46324181812928">16</a></sup> Most of the time you will not really need to know more than that: when you want to boost a Python function, just transform it into a TF Function. That’s all!</p>

<p>Moreover, when you write a custom loss function, a custom metric, a custom layer, or any other custom function and you use it in a Keras model (as we did throughout this chapter), Keras automatically converts your function into a TF Function—no need to use <code>tf.function()</code>. So most of the time, all this magic is 100% transparent.</p>
<div data-type="tip"><h6>Tip</h6>
<p>You can tell Keras <em>not</em> to convert your Python functions to TF Functions by setting <code>dynamic=True</code> when creating a custom layer or a custom model. Alternatively, you can set <code>run_eagerly=True</code> when calling the model’s <code>compile()</code> method.</p>
</div>

<p>By default, a TF Function generates a new graph for every unique set of input shapes and data types and caches it for subsequent calls. For example, if you call <code>tf_cube(tf.constant(10))</code>, a graph will be generated for int32 tensors of shape []. Then if you call <code>tf_cube(tf.constant(20))</code>, the same graph will be reused. But if you then call <code>tf_cube(tf.constant([10, 20]))</code>, a new graph will be generated for int32 tensors of shape [2]. This is how TF Functions handle polymorphism (i.e., varying argument types and shapes). However, this is only true for tensor arguments: if you pass numerical Python values to a TF Function, a new graph will be generated for every distinct value: for example, calling <code>tf_cube(10)</code> and <code>tf_cube(20)</code> will generate two graphs.</p>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>If you call a TF Function many times with different numerical Python values, then many graphs will be generated, slowing down your program and using up a lot of RAM (you must delete the TF Function to release it). Python values should be reserved for arguments that will have few unique values, such as hyperparameters like the number of neurons per layer. This allows TensorFlow to better optimize each variant of your model.</p>
</div>








<section data-type="sect2" data-pdf-bookmark="AutoGraph and Tracing"><div class="sect2" id="idm46324181803696">
<h2>AutoGraph and Tracing</h2>

<p>So how<a data-type="indexterm" data-primary="TensorFlow, functions and graphs" data-secondary="AutoGraph and tracing" id="idm46324181763952"/><a data-type="indexterm" data-primary="AutoGraphs" id="idm46324181762400"/> does TensorFlow generate graphs? It starts by analyzing the Python function’s source code to capture all the control flow statements, such as <code>for</code> loops, <code>while</code> loops, and <code>if</code> statements, as well as <code>break</code>, <code>continue</code>, and <code>return</code> statements. This first step is called <em>AutoGraph</em>. The reason TensorFlow has to analyze the source code is that Python does not provide any other way to capture control flow statements: it offers magic methods like <code>__add__()</code> and <code>__mul__()</code> to capture operators like <code>+</code> and <code>*</code>, but there are no <code>__while__()</code> or <code>__if__()</code> magic methods. After analyzing the function’s code, AutoGraph outputs an upgraded version of that function in which all the control flow statements are replaced by the appropriate TensorFlow operations, such as <code>tf.while_loop()</code> for loops and <code>tf.cond()</code> for <code>if</code> statements. For example, in <a data-type="xref" href="#autograph_tracing_diagram">Figure 12-4</a>, AutoGraph analyzes the source code of the <code>sum_squares()</code> Python <span class="keep-together">function</span>, and it generates the <code>tf__sum_squares()</code> function. In this function, the <code>for</code> loop is replaced by the definition of the <code>loop_body()</code> function (containing the body of the original <code>for</code> loop), followed by a call to the <code>for_stmt()</code> function. This call will build the appropriate <code>tf.while_loop()</code> operation in the computation graph.</p>

<figure><div id="autograph_tracing_diagram" class="figure">
<img src="Images/mls3_1204.png" alt="mls3 1204" width="1440" height="773"/>
<h6><span class="label">Figure 12-4. </span>How TensorFlow generates graphs using AutoGraph and tracing</h6>
</div></figure>

<p>Next, TensorFlow<a data-type="indexterm" data-primary="symbolic tensors" id="idm46324181748384"/> calls this “upgraded” function, but instead of passing the argument, it passes a <em>symbolic tensor</em>—a tensor without any actual value, only a name, a data type, and a shape. For example, if you call <code>sum_squares(tf.constant(10))</code>, then the <code>tf__sum_squares()</code> function will be called with a symbolic tensor of type int32 and shape []. The function will<a data-type="indexterm" data-primary="graph mode" id="idm46324181745696"/> run in <em>graph mode</em>, meaning that each TensorFlow operation will add a node in the graph to represent itself and its output tensor(s) (as opposed to the regular mode, called<a data-type="indexterm" data-primary="eager execution/eager mode" id="idm46324181744448"/> <em>eager execution</em>, or <em>eager mode</em>). In graph mode, TF operations do not perform any computations. Graph mode was the default mode in TensorFlow 1. In <a data-type="xref" href="#autograph_tracing_diagram">Figure 12-4</a>, you can see the <code>tf__sum_squares()</code> function being called with a symbolic tensor as its argument (in this case, an int32 tensor of shape []) and the final graph being generated during tracing. The nodes represent operations, and the arrows represent tensors (both the generated function and the graph are simplified).</p>
<div data-type="tip"><h6>Tip</h6>
<p>To view the generated function’s source code, you can call <code>tf.autograph.to_code(sum_squares.python_function)</code>. The code is not meant to be pretty, but it can sometimes help for debugging.</p>
</div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="TF Function Rules"><div class="sect2" id="tf_functionrules">
<h2>TF Function Rules</h2>

<p>Most<a data-type="indexterm" data-primary="TensorFlow, functions and graphs" data-secondary="TF Function rules" id="idm46324181737872"/><a data-type="indexterm" data-primary="TF Functions" data-secondary="rules" id="idm46324181736848"/> of the time, converting a Python function that performs TensorFlow operations into a TF Function is trivial: decorate it with <code>@tf.function</code> or let Keras take care of it for you. However, there are a few rules to respect:</p>

<ul>
<li>
<p>If you call any external library, including NumPy or even the standard library, this call will run only during tracing; it will not be part of the graph. Indeed, a TensorFlow graph can only include TensorFlow constructs (tensors, operations, variables, datasets, and so on). So, make sure you use <code>tf.reduce_sum()</code> instead of <code>np.sum()</code>, <code>tf.sort()</code> instead of the built-in <code>sorted()</code> function, and so on (unless you really want the code to run only during tracing). This has a few additional implications:</p>

<ul>
<li>
<p>If you define a TF Function <code>f(<em>x</em>)</code> that just returns <code>np.random.rand()</code>, a random number will only be generated when the function is traced, so <code>f(tf.constant(2.))</code> and <code>f(tf.constant(3.))</code> will return the same random number, but <code>f(tf.constant([2., 3.]))</code> will return a different one. If you replace <code>np.random.rand()</code> with <code>tf.random.uniform([])</code>, then a new random number will be generated upon every call, since the operation will be part of the graph.</p>
</li>
<li>
<p>If your non-TensorFlow code has side effects (such as logging something or updating a Python counter), then you should not expect those side effects to occur every time you call the TF Function, as they will only occur when the function is traced.</p>
</li>
<li>
<p>You can wrap arbitrary Python code in a <code>tf.py_function()</code> operation, but doing so will hinder performance, as TensorFlow will not be able to do any graph optimization on this code. It will also reduce portability, as the graph will only run on platforms where Python is available (and where the right libraries are installed).</p>
</li>
</ul>
</li>
<li>
<p>You can call other Python functions or TF Functions, but they should follow the same rules, as TensorFlow will capture their operations in the computation graph. Note that these other functions do not need to be decorated with <code>@tf.function</code>.</p>
</li>
<li>
<p>If the function creates a TensorFlow variable (or any other stateful TensorFlow object, such as a dataset or a queue), it must do so upon the very first call, and only then, or else you will get an exception. It is usually preferable to create <span class="keep-together">variables</span> outside of the TF Function (e.g., in the <code>build()</code> method of a custom layer). If you want to assign a new value to the variable, make sure you call its <code>assign()</code> method, instead of using the <code>=</code> operator.</p>
</li>
<li>
<p>The source code of your Python function should be available to TensorFlow. If the source code is unavailable (for example, if you define your function in the Python shell, which does not give access to the source code, or if you deploy only the compiled <em>*.pyc</em> Python files to production), then the graph generation process will fail or have limited functionality.</p>
</li>
<li>
<p>TensorFlow will only capture <code>for</code> loops that iterate over a tensor or a <code>tf.data.Dataset</code> (see Chapter 13). So make sure you use <code>for i in tf.range(<em>x</em>)</code> rather than <code>for i in range(<em>x</em>)</code>, or else the loop will not be captured in the graph. Instead, it will run during tracing. (This may be what you want if the <code>for</code> loop is meant to build the graph, for example to create each layer in a neural network.)</p>
</li>
<li>
<p>As always, for performance reasons, you should prefer a vectorized implementation whenever you can, rather than using loops.</p>
</li>
</ul>

<p>It’s time to sum up! In this chapter we started with a brief overview of TensorFlow, then we looked at TensorFlow’s low-level API, including tensors, operations, variables, and special data structures. We then used these tools to customize almost every component in tf.keras. Finally, we looked at how TF Functions can boost performance, how graphs are generated using AutoGraph and tracing, and what rules to follow when you write TF Functions (if you would like to open the black box a bit further and explore the generated graphs, you will find technical details in Appendix D).</p>

<p>In the next chapter, we will look at how to efficiently load and preprocess data with TensorFlow.</p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="Exercises"><div class="sect1" id="idm46324182016224">
<h1>Exercises</h1>
<ol>
<li>
<p>How would you describe TensorFlow in a short sentence? What are its main features? Can you name other popular Deep Learning libraries?</p>
</li>
<li>
<p>Is TensorFlow a drop-in replacement for NumPy? What are the main differences between the two?</p>
</li>
<li>
<p>Do you get the same result with <code>tf.range(10)</code> and <code>tf.constant(np.arange(10))</code>?</p>
</li>
<li>
<p>Can you name six other data structures available in TensorFlow, beyond regular tensors?</p>
</li>
<li>
<p>A custom loss function can be defined by writing a function or by subclassing the <code>tf.keras.losses.Loss</code> class. When would you use each option?</p>
</li>
<li>
<p>Similarly, a custom metric can be defined in a function or a subclass of <code>tf.keras.metrics.Metric</code>. When would you use each option?</p>
</li>
<li>
<p>When should you create a custom layer versus a custom model?</p>
</li>
<li>
<p>What are some use cases that require writing your own custom training loop?</p>
</li>
<li>
<p>Can custom Keras components contain arbitrary Python code, or must they be convertible to TF Functions?</p>
</li>
<li>
<p>What are the main rules to respect if you want a function to be convertible to a TF Function?</p>
</li>
<li>
<p>When would you need to create a dynamic Keras model? How do you do that? Why not make all your models dynamic?</p>
</li>
<li>
<p>Implement a custom layer that performs <em>Layer Normalization</em> (we will use this type of layer in Chapter 16):</p>
<ol>
<li>
<p>The <code>build()</code> method should define two trainable weights <strong>α</strong> and <strong>β</strong>, both of shape <code>input_shape[-1:]</code> and data type <code>tf.float32</code>. <strong>α</strong> should be initialized with 1s, and <strong>β</strong> with 0s.</p>
</li>
<li>
<p>The <code>call()</code> method should compute the mean <em>μ</em> and standard deviation <em>σ</em> of each instance’s features. For this, you can use <code>tf.nn.moments(inputs, axes=-1, keepdims=True)</code>, which returns the mean <em>μ</em> and the variance <em>σ</em><sup>2</sup> of all instances (compute the square root of the variance to get the standard deviation). Then the function should compute and return <strong>α</strong>⊗(<strong>X</strong> - <em>μ</em>)/(<em>σ</em> + <em>ε</em>) + <strong>β</strong>, where ⊗ represents itemwise multiplication (<code>*</code>) and <em>ε</em> is a smoothing term (small constant to avoid division by zero, e.g., 0.001).</p>
</li>
<li>
<p>Ensure that your custom layer produces the same (or very nearly the same) output as the <code>tf.keras.layers.LayerNormalization</code> layer.</p>
</li>

</ol>
</li>
<li>
<p>Train a model using a custom training loop to tackle the Fashion MNIST dataset (see <a data-type="xref" href="ch10.xhtml#ann_chapter">Chapter 10</a>).</p>
<ol>
<li>
<p>Display the epoch, iteration, mean training loss, and mean accuracy over each epoch (updated at each iteration), as well as the validation loss and accuracy at the end of each epoch.</p>
</li>
<li>
<p>Try using a different optimizer with a different learning rate for the upper layers and the lower layers.</p>
</li>

</ol>
</li>

</ol>

<p>Solutions to these exercises are available at the end of this chapter’s notebook, at <a href="https://homl.info/colab3"><em class="hyperlink">https://homl.info/colab3</em></a>.</p>
</div></section>







<div data-type="footnotes"><p data-type="footnote" id="idm46324186907008"><sup><a href="ch12.xhtml#idm46324186907008-marker">1</a></sup> However, PyTorch is currently more popular in Academia: more papers cite PyTorch than TensorFlow or Keras.</p><p data-type="footnote" id="idm46324186894816"><sup><a href="ch12.xhtml#idm46324186894816-marker">2</a></sup> TensorFlow includes another Deep Learning API called the <em>Estimators API</em>, but the TensorFlow team recommends using Keras instead.</p><p data-type="footnote" id="idm46324186887120"><sup><a href="ch12.xhtml#idm46324186887120-marker">3</a></sup> If you ever need to (but you probably won’t), you can write your own operations using the C++ API.</p><p data-type="footnote" id="idm46324186883808"><sup><a href="ch12.xhtml#idm46324186883808-marker">4</a></sup> To learn more about TPUs and how they work, check out <a href="https://homl.info/tpus"><em class="hyperlink">https://homl.info/tpus</em></a>.</p><p data-type="footnote" id="idm46324186658256"><sup><a href="ch12.xhtml#idm46324186658256-marker">5</a></sup> A notable exception is <code>tf.math.log()</code>, which is commonly used but doesn’t have a <code>tf.log()</code> alias, as it might be confused with logging.</p><p data-type="footnote" id="idm46324185616160"><sup><a href="ch12.xhtml#idm46324185616160-marker">6</a></sup> It would not be a good idea to use a weighted mean: if you did, then two instances with the same weight but in different batches would have a different impact on training, depending on the total weight of each batch.</p><p data-type="footnote" id="idm46324185611296"><sup><a href="ch12.xhtml#idm46324185611296-marker">7</a></sup> The <code>{**x, [...]}</code> syntax was added in Python 3.5, to merge all the key/value pairs from dictionary <code>x</code> into another dictionary. Since Python 3.9, you can use the nicer <code>x | y</code> syntax instead (where <code>x</code> and <code>y</code> are two dictionaries).</p><p data-type="footnote" id="idm46324185246608"><sup><a href="ch12.xhtml#idm46324185246608-marker">8</a></sup> However, the Huber loss is seldom used as a metric (the MAE or MSE is preferred).</p><p data-type="footnote" id="idm46324184904384"><sup><a href="ch12.xhtml#idm46324184904384-marker">9</a></sup> This class is for illustration purposes only. A simpler and better implementation would just subclass the <code>tf.keras.metrics.Mean</code> class; see the “Streaming metrics” section of the notebook for an example.</p><p data-type="footnote" id="idm46324184498960"><sup><a href="ch12.xhtml#idm46324184498960-marker">10</a></sup> The Keras API calls this argument <code>input_shape</code>, but since it also includes the batch dimension, I prefer to call it <code>batch_input_shape</code>. Same for <code>compute_output_shape()</code>.</p><p data-type="footnote" id="idm46324184141952"><sup><a href="ch12.xhtml#idm46324184141952-marker">11</a></sup> The name “Subclassing API” in Keras usually refers only to the creation of custom models by subclassing, although many other things can be created by subclassing, as we saw in this chapter.</p><p data-type="footnote" id="idm46324183550144"><sup><a href="ch12.xhtml#idm46324183550144-marker">12</a></sup> Due to TensorFlow issue #46858, the call to <code>super().build()</code> may fail in this case, unless the issue was fixed by the time you read this. If not, you need to replace this line with <code>self.built = True</code>.</p><p data-type="footnote" id="idm46324183545600"><sup><a href="ch12.xhtml#idm46324183545600-marker">13</a></sup> You can also call <code>add_loss()</code> on any layer inside the model, as the model recursively gathers losses from all of its layers.</p><p data-type="footnote" id="idm46324183194160"><sup><a href="ch12.xhtml#idm46324183194160-marker">14</a></sup> If the tape goes out of scope, for example when the function that used it returns, Python’s garbage collector will delete it for you.</p><p data-type="footnote" id="idm46324182031088"><sup><a href="ch12.xhtml#idm46324182031088-marker">15</a></sup> With the exception of optimizers, as very few people ever customize these; see the “Custom Optimizers” section in the notebook for an example.</p><p data-type="footnote" id="idm46324181812928"><sup><a href="ch12.xhtml#idm46324181812928-marker">16</a></sup> However, in this trivial example, the computation graph is so small that there is nothing at all to optimize, so <code>tf_cube()</code> actually runs much slower than <code>cube()</code>.</p></div></div></section></div></body>
</html>